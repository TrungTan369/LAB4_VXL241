
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003058  08003058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800307c  0800307c  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  0800307c  0800307c  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800307c  0800307c  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003084  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000078  080030fc  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080030fc  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f47  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a7  00000000  00000000  0000dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00010090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082a  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018414  00000000  00000000  0001139a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e864  00000000  00000000  000297ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b99  00000000  00000000  00038012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdbab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  000bdbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000c08f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003040 	.word	0x08003040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003040 	.word	0x08003040

0800014c <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};
uint8_t count = 0;
void getKeyinput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (count > 0 ) count--;
 8000150:	4b1f      	ldr	r3, [pc, #124]	@ (80001d0 <getKeyinput+0x84>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d005      	beq.n	8000164 <getKeyinput+0x18>
 8000158:	4b1d      	ldr	r3, [pc, #116]	@ (80001d0 <getKeyinput+0x84>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b1b      	ldr	r3, [pc, #108]	@ (80001d0 <getKeyinput+0x84>)
 8000162:	701a      	strb	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == 0)){
 8000164:	4b1a      	ldr	r3, [pc, #104]	@ (80001d0 <getKeyinput+0x84>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d10c      	bne.n	8000186 <getKeyinput+0x3a>
 800016c:	2101      	movs	r1, #1
 800016e:	4819      	ldr	r0, [pc, #100]	@ (80001d4 <getKeyinput+0x88>)
 8000170:	f001 fe1a 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 800017a:	4b17      	ldr	r3, [pc, #92]	@ (80001d8 <getKeyinput+0x8c>)
 800017c:	2201      	movs	r2, #1
 800017e:	601a      	str	r2, [r3, #0]
		count = 20;
 8000180:	4b13      	ldr	r3, [pc, #76]	@ (80001d0 <getKeyinput+0x84>)
 8000182:	2214      	movs	r2, #20
 8000184:	701a      	strb	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == 0)){
 8000186:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <getKeyinput+0x84>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10c      	bne.n	80001a8 <getKeyinput+0x5c>
 800018e:	2102      	movs	r1, #2
 8000190:	4810      	ldr	r0, [pc, #64]	@ (80001d4 <getKeyinput+0x88>)
 8000192:	f001 fe09 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d105      	bne.n	80001a8 <getKeyinput+0x5c>
		buttonFlag[1] = 1;
 800019c:	4b0e      	ldr	r3, [pc, #56]	@ (80001d8 <getKeyinput+0x8c>)
 800019e:	2201      	movs	r2, #1
 80001a0:	605a      	str	r2, [r3, #4]
		count = 20;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <getKeyinput+0x84>)
 80001a4:	2214      	movs	r2, #20
 80001a6:	701a      	strb	r2, [r3, #0]
	}
	// ----- PROCESS BUTTON 3 -----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == 0)){
 80001a8:	4b09      	ldr	r3, [pc, #36]	@ (80001d0 <getKeyinput+0x84>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d10c      	bne.n	80001ca <getKeyinput+0x7e>
 80001b0:	2104      	movs	r1, #4
 80001b2:	4808      	ldr	r0, [pc, #32]	@ (80001d4 <getKeyinput+0x88>)
 80001b4:	f001 fdf8 	bl	8001da8 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d105      	bne.n	80001ca <getKeyinput+0x7e>
		buttonFlag[2] = 1;
 80001be:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <getKeyinput+0x8c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	609a      	str	r2, [r3, #8]
		count = 20;
 80001c4:	4b02      	ldr	r3, [pc, #8]	@ (80001d0 <getKeyinput+0x84>)
 80001c6:	2214      	movs	r2, #20
 80001c8:	701a      	strb	r2, [r3, #0]
	}

}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	20000094 	.word	0x20000094

080001dc <isButtonPress>:
int isButtonPress(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <isButtonPress+0x30>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d106      	bne.n	80001fe <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80001f0:	4a06      	ldr	r2, [pc, #24]	@ (800020c <isButtonPress+0x30>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2100      	movs	r1, #0
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e000      	b.n	8000200 <isButtonPress+0x24>
	}
	return 0;
 80001fe:	2300      	movs	r3, #0
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000094 	.word	0x20000094

08000210 <fsm_auto_run>:
 */

#include "fsm_auto.h"

uint8_t temp_task;
void fsm_auto_run(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 8000214:	4b90      	ldr	r3, [pc, #576]	@ (8000458 <fsm_auto_run+0x248>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b04      	cmp	r3, #4
 800021a:	f200 811b 	bhi.w	8000454 <fsm_auto_run+0x244>
 800021e:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <fsm_auto_run+0x14>)
 8000220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000224:	08000239 	.word	0x08000239
 8000228:	080002ad 	.word	0x080002ad
 800022c:	0800031d 	.word	0x0800031d
 8000230:	0800032d 	.word	0x0800032d
 8000234:	0800039d 	.word	0x0800039d
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 8000238:	f000 ff18 	bl	800106c <single_LED_off>
			count0 = (time_red_green + time_red_yellow)/1000;
 800023c:	4b87      	ldr	r3, [pc, #540]	@ (800045c <fsm_auto_run+0x24c>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b87      	ldr	r3, [pc, #540]	@ (8000460 <fsm_auto_run+0x250>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4413      	add	r3, r2
 8000246:	4a87      	ldr	r2, [pc, #540]	@ (8000464 <fsm_auto_run+0x254>)
 8000248:	fb82 1203 	smull	r1, r2, r2, r3
 800024c:	1192      	asrs	r2, r2, #6
 800024e:	17db      	asrs	r3, r3, #31
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	4a85      	ldr	r2, [pc, #532]	@ (8000468 <fsm_auto_run+0x258>)
 8000254:	6013      	str	r3, [r2, #0]
			count1 = time_red_green/1000;
 8000256:	4b81      	ldr	r3, [pc, #516]	@ (800045c <fsm_auto_run+0x24c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a82      	ldr	r2, [pc, #520]	@ (8000464 <fsm_auto_run+0x254>)
 800025c:	fb82 1203 	smull	r1, r2, r2, r3
 8000260:	1192      	asrs	r2, r2, #6
 8000262:	17db      	asrs	r3, r3, #31
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	4a81      	ldr	r2, [pc, #516]	@ (800046c <fsm_auto_run+0x25c>)
 8000268:	6013      	str	r3, [r2, #0]
			updateClockBuffer(count0, count1);
 800026a:	4b7f      	ldr	r3, [pc, #508]	@ (8000468 <fsm_auto_run+0x258>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a7f      	ldr	r2, [pc, #508]	@ (800046c <fsm_auto_run+0x25c>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f000 febd 	bl	8000ff4 <updateClockBuffer>
			status = auto_red_green;
 800027a:	4b77      	ldr	r3, [pc, #476]	@ (8000458 <fsm_auto_run+0x248>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	487a      	ldr	r0, [pc, #488]	@ (8000470 <fsm_auto_run+0x260>)
 8000286:	f001 fda6 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800028a:	2200      	movs	r2, #0
 800028c:	2140      	movs	r1, #64	@ 0x40
 800028e:	4878      	ldr	r0, [pc, #480]	@ (8000470 <fsm_auto_run+0x260>)
 8000290:	f001 fda1 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	4875      	ldr	r0, [pc, #468]	@ (8000470 <fsm_auto_run+0x260>)
 800029a:	f001 fd9c 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a4:	4872      	ldr	r0, [pc, #456]	@ (8000470 <fsm_auto_run+0x260>)
 80002a6:	f001 fd96 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 80002aa:	e082      	b.n	80003b2 <fsm_auto_run+0x1a2>
		case auto_red_green:
			SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 80002ac:	4b6b      	ldr	r3, [pc, #428]	@ (800045c <fsm_auto_run+0x24c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	4619      	mov	r1, r3
 80002b4:	486f      	ldr	r0, [pc, #444]	@ (8000474 <fsm_auto_run+0x264>)
 80002b6:	f001 f84d 	bl	8001354 <SCH_Add_Task>
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80002ba:	2001      	movs	r0, #1
 80002bc:	f7ff ff8e 	bl	80001dc <isButtonPress>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d172      	bne.n	80003ac <fsm_auto_run+0x19c>
				SCH_Delete_Task_By_Function(fsm_switch_state_auto_red_yellow);
 80002c6:	486b      	ldr	r0, [pc, #428]	@ (8000474 <fsm_auto_run+0x264>)
 80002c8:	f001 f972 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Delete_Task_By_Function(fsm_auto_run);
 80002cc:	486a      	ldr	r0, [pc, #424]	@ (8000478 <fsm_auto_run+0x268>)
 80002ce:	f001 f96f 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Delete_Task_By_Function(Scan7SEG);
 80002d2:	486a      	ldr	r0, [pc, #424]	@ (800047c <fsm_auto_run+0x26c>)
 80002d4:	f001 f96c 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Add_Task(fsm_manual, 100, 10);
 80002d8:	220a      	movs	r2, #10
 80002da:	2164      	movs	r1, #100	@ 0x64
 80002dc:	4868      	ldr	r0, [pc, #416]	@ (8000480 <fsm_auto_run+0x270>)
 80002de:	f001 f839 	bl	8001354 <SCH_Add_Task>
				status = manual_red_green;
 80002e2:	4b5d      	ldr	r3, [pc, #372]	@ (8000458 <fsm_auto_run+0x248>)
 80002e4:	2205      	movs	r2, #5
 80002e6:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80002e8:	f000 fc3e 	bl	8000b68 <Diable_Led>
				single_LED_off();
 80002ec:	f000 febe 	bl	800106c <single_LED_off>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2108      	movs	r1, #8
 80002f4:	485e      	ldr	r0, [pc, #376]	@ (8000470 <fsm_auto_run+0x260>)
 80002f6:	f001 fd6e 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000300:	485b      	ldr	r0, [pc, #364]	@ (8000470 <fsm_auto_run+0x260>)
 8000302:	f001 fd68 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2140      	movs	r1, #64	@ 0x40
 800030a:	4859      	ldr	r0, [pc, #356]	@ (8000470 <fsm_auto_run+0x260>)
 800030c:	f001 fd63 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2120      	movs	r1, #32
 8000314:	4856      	ldr	r0, [pc, #344]	@ (8000470 <fsm_auto_run+0x260>)
 8000316:	f001 fd5e 	bl	8001dd6 <HAL_GPIO_WritePin>
				return;
 800031a:	e09c      	b.n	8000456 <fsm_auto_run+0x246>
			}
			break;
		case auto_red_yellow:
			SCH_Add_Task(fsm_switch_state_auto_green_red, time_red_yellow, 0);
 800031c:	4b50      	ldr	r3, [pc, #320]	@ (8000460 <fsm_auto_run+0x250>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2200      	movs	r2, #0
 8000322:	4619      	mov	r1, r3
 8000324:	4857      	ldr	r0, [pc, #348]	@ (8000484 <fsm_auto_run+0x274>)
 8000326:	f001 f815 	bl	8001354 <SCH_Add_Task>
			break;
 800032a:	e042      	b.n	80003b2 <fsm_auto_run+0x1a2>
		case auto_green_red:
			SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);
 800032c:	4b4b      	ldr	r3, [pc, #300]	@ (800045c <fsm_auto_run+0x24c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2200      	movs	r2, #0
 8000332:	4619      	mov	r1, r3
 8000334:	4854      	ldr	r0, [pc, #336]	@ (8000488 <fsm_auto_run+0x278>)
 8000336:	f001 f80d 	bl	8001354 <SCH_Add_Task>
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff4e 	bl	80001dc <isButtonPress>
 8000340:	4603      	mov	r3, r0
 8000342:	2b01      	cmp	r3, #1
 8000344:	d134      	bne.n	80003b0 <fsm_auto_run+0x1a0>
				SCH_Delete_Task_By_Function(fsm_switch_state_auto_yellow_red);
 8000346:	4850      	ldr	r0, [pc, #320]	@ (8000488 <fsm_auto_run+0x278>)
 8000348:	f001 f932 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Delete_Task_By_Function(fsm_auto_run);
 800034c:	484a      	ldr	r0, [pc, #296]	@ (8000478 <fsm_auto_run+0x268>)
 800034e:	f001 f92f 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Delete_Task_By_Function(Scan7SEG);
 8000352:	484a      	ldr	r0, [pc, #296]	@ (800047c <fsm_auto_run+0x26c>)
 8000354:	f001 f92c 	bl	80015b0 <SCH_Delete_Task_By_Function>
				SCH_Add_Task(fsm_manual, 100, 10);
 8000358:	220a      	movs	r2, #10
 800035a:	2164      	movs	r1, #100	@ 0x64
 800035c:	4848      	ldr	r0, [pc, #288]	@ (8000480 <fsm_auto_run+0x270>)
 800035e:	f000 fff9 	bl	8001354 <SCH_Add_Task>
				status = manual_green_red;
 8000362:	4b3d      	ldr	r3, [pc, #244]	@ (8000458 <fsm_auto_run+0x248>)
 8000364:	2206      	movs	r2, #6
 8000366:	601a      	str	r2, [r3, #0]
				Diable_Led();
 8000368:	f000 fbfe 	bl	8000b68 <Diable_Led>
				single_LED_off();
 800036c:	f000 fe7e 	bl	800106c <single_LED_off>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2140      	movs	r1, #64	@ 0x40
 8000374:	483e      	ldr	r0, [pc, #248]	@ (8000470 <fsm_auto_run+0x260>)
 8000376:	f001 fd2e 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	483c      	ldr	r0, [pc, #240]	@ (8000470 <fsm_auto_run+0x260>)
 8000380:	f001 fd29 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	4839      	ldr	r0, [pc, #228]	@ (8000470 <fsm_auto_run+0x260>)
 800038a:	f001 fd24 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000394:	4836      	ldr	r0, [pc, #216]	@ (8000470 <fsm_auto_run+0x260>)
 8000396:	f001 fd1e 	bl	8001dd6 <HAL_GPIO_WritePin>
				return;
 800039a:	e05c      	b.n	8000456 <fsm_auto_run+0x246>
			}
			break;
		case auto_yellow_red:
			SCH_Add_Task(fsm_switch_state_auto_red_green, time_red_yellow, 0);
 800039c:	4b30      	ldr	r3, [pc, #192]	@ (8000460 <fsm_auto_run+0x250>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4839      	ldr	r0, [pc, #228]	@ (800048c <fsm_auto_run+0x27c>)
 80003a6:	f000 ffd5 	bl	8001354 <SCH_Add_Task>
			break;
 80003aa:	e002      	b.n	80003b2 <fsm_auto_run+0x1a2>
			break;
 80003ac:	bf00      	nop
 80003ae:	e000      	b.n	80003b2 <fsm_auto_run+0x1a2>
			break;
 80003b0:	bf00      	nop
		default: // ----- MANUAL MODE & SETTING MODE & SLOW MODE---------
			return;
	}
	// -------SWITCHING SLOW MODE ---------------
	if(isButtonPress(0) == 1){
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ff12 	bl	80001dc <isButtonPress>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d117      	bne.n	80003ee <fsm_auto_run+0x1de>
		SCH_Delete_Task(list.tail->TaskID); // DELETE TASK SWITCH STATE
 80003be:	4b34      	ldr	r3, [pc, #208]	@ (8000490 <fsm_auto_run+0x280>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 f87e 	bl	80014c8 <SCH_Delete_Task>
		SCH_Delete_Task_By_Function(fsm_auto_run);
 80003cc:	482a      	ldr	r0, [pc, #168]	@ (8000478 <fsm_auto_run+0x268>)
 80003ce:	f001 f8ef 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Delete_Task_By_Function(Scan7SEG);
 80003d2:	482a      	ldr	r0, [pc, #168]	@ (800047c <fsm_auto_run+0x26c>)
 80003d4:	f001 f8ec 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Add_Task(fsm_slow_run, 0, 500);
 80003d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003dc:	2100      	movs	r1, #0
 80003de:	482d      	ldr	r0, [pc, #180]	@ (8000494 <fsm_auto_run+0x284>)
 80003e0:	f000 ffb8 	bl	8001354 <SCH_Add_Task>
		single_LED_off();// ------ALL LED OFF----------
 80003e4:	f000 fe42 	bl	800106c <single_LED_off>
		Diable_Led(); //--- Disable led 7 segment ------
 80003e8:	f000 fbbe 	bl	8000b68 <Diable_Led>
		return;
 80003ec:	e033      	b.n	8000456 <fsm_auto_run+0x246>
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff fef4 	bl	80001dc <isButtonPress>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d12d      	bne.n	8000456 <fsm_auto_run+0x246>
		time_red_yellow = 0;
 80003fa:	4b19      	ldr	r3, [pc, #100]	@ (8000460 <fsm_auto_run+0x250>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000400:	4b16      	ldr	r3, [pc, #88]	@ (800045c <fsm_auto_run+0x24c>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000406:	2101      	movs	r1, #1
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fdf3 	bl	8000ff4 <updateClockBuffer>
		status = set_green;
 800040e:	4b12      	ldr	r3, [pc, #72]	@ (8000458 <fsm_auto_run+0x248>)
 8000410:	2208      	movs	r2, #8
 8000412:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(list.tail->TaskID); // DELETE TASK SWITCH STATE
 8000414:	4b1e      	ldr	r3, [pc, #120]	@ (8000490 <fsm_auto_run+0x280>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f853 	bl	80014c8 <SCH_Delete_Task>
		SCH_Delete_Task_By_Function(fsm_auto_run);
 8000422:	4815      	ldr	r0, [pc, #84]	@ (8000478 <fsm_auto_run+0x268>)
 8000424:	f001 f8c4 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Delete_Task_By_Function(count_1_second);
 8000428:	481b      	ldr	r0, [pc, #108]	@ (8000498 <fsm_auto_run+0x288>)
 800042a:	f001 f8c1 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Add_Task(fsm_setting, 100, 10);
 800042e:	220a      	movs	r2, #10
 8000430:	2164      	movs	r1, #100	@ 0x64
 8000432:	481a      	ldr	r0, [pc, #104]	@ (800049c <fsm_auto_run+0x28c>)
 8000434:	f000 ff8e 	bl	8001354 <SCH_Add_Task>
		single_LED_off();
 8000438:	f000 fe18 	bl	800106c <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	480b      	ldr	r0, [pc, #44]	@ (8000470 <fsm_auto_run+0x260>)
 8000442:	f001 fcc8 	bl	8001dd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800044c:	4808      	ldr	r0, [pc, #32]	@ (8000470 <fsm_auto_run+0x260>)
 800044e:	f001 fcc2 	bl	8001dd6 <HAL_GPIO_WritePin>
 8000452:	e000      	b.n	8000456 <fsm_auto_run+0x246>
			return;
 8000454:	bf00      	nop
	}
}
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000ac 	.word	0x200000ac
 800045c:	20000014 	.word	0x20000014
 8000460:	20000018 	.word	0x20000018
 8000464:	10624dd3 	.word	0x10624dd3
 8000468:	200000b0 	.word	0x200000b0
 800046c:	200000b4 	.word	0x200000b4
 8000470:	40010800 	.word	0x40010800
 8000474:	08000525 	.word	0x08000525
 8000478:	08000211 	.word	0x08000211
 800047c:	08000b9d 	.word	0x08000b9d
 8000480:	080006b1 	.word	0x080006b1
 8000484:	08000589 	.word	0x08000589
 8000488:	08000609 	.word	0x08000609
 800048c:	080004a1 	.word	0x080004a1
 8000490:	20000114 	.word	0x20000114
 8000494:	08000b11 	.word	0x08000b11
 8000498:	0800066d 	.word	0x0800066d
 800049c:	080008ad 	.word	0x080008ad

080004a0 <fsm_switch_state_auto_red_green>:
void fsm_switch_state_auto_init(){
	status = auto_init;
}
void fsm_switch_state_auto_red_green(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 80004a4:	2200      	movs	r2, #0
 80004a6:	2110      	movs	r1, #16
 80004a8:	4817      	ldr	r0, [pc, #92]	@ (8000508 <fsm_switch_state_auto_red_green+0x68>)
 80004aa:	f001 fc94 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 80004ae:	2200      	movs	r2, #0
 80004b0:	2140      	movs	r1, #64	@ 0x40
 80004b2:	4815      	ldr	r0, [pc, #84]	@ (8000508 <fsm_switch_state_auto_red_green+0x68>)
 80004b4:	f001 fc8f 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 80004b8:	2201      	movs	r2, #1
 80004ba:	2108      	movs	r1, #8
 80004bc:	4812      	ldr	r0, [pc, #72]	@ (8000508 <fsm_switch_state_auto_red_green+0x68>)
 80004be:	f001 fc8a 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004c8:	480f      	ldr	r0, [pc, #60]	@ (8000508 <fsm_switch_state_auto_red_green+0x68>)
 80004ca:	f001 fc84 	bl	8001dd6 <HAL_GPIO_WritePin>
	status = auto_red_green;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <fsm_switch_state_auto_red_green+0x6c>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green + time_red_yellow)/1000;
 80004d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <fsm_switch_state_auto_red_green+0x70>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <fsm_switch_state_auto_red_green+0x74>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4413      	add	r3, r2
 80004de:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <fsm_switch_state_auto_red_green+0x78>)
 80004e0:	fb82 1203 	smull	r1, r2, r2, r3
 80004e4:	1192      	asrs	r2, r2, #6
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a0c      	ldr	r2, [pc, #48]	@ (800051c <fsm_switch_state_auto_red_green+0x7c>)
 80004ec:	6013      	str	r3, [r2, #0]
	count1 = time_red_green/1000;
 80004ee:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <fsm_switch_state_auto_red_green+0x70>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <fsm_switch_state_auto_red_green+0x78>)
 80004f4:	fb82 1203 	smull	r1, r2, r2, r3
 80004f8:	1192      	asrs	r2, r2, #6
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <fsm_switch_state_auto_red_green+0x80>)
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800
 800050c:	200000ac 	.word	0x200000ac
 8000510:	20000014 	.word	0x20000014
 8000514:	20000018 	.word	0x20000018
 8000518:	10624dd3 	.word	0x10624dd3
 800051c:	200000b0 	.word	0x200000b0
 8000520:	200000b4 	.word	0x200000b4

08000524 <fsm_switch_state_auto_red_yellow>:
void fsm_switch_state_auto_red_yellow(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 off
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052e:	4810      	ldr	r0, [pc, #64]	@ (8000570 <fsm_switch_state_auto_red_yellow+0x4c>)
 8000530:	f001 fc51 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow1 on
 8000534:	2201      	movs	r2, #1
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <fsm_switch_state_auto_red_yellow+0x4c>)
 800053a:	f001 fc4c 	bl	8001dd6 <HAL_GPIO_WritePin>
	status = auto_red_yellow;
 800053e:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <fsm_switch_state_auto_red_yellow+0x50>)
 8000540:	2202      	movs	r2, #2
 8000542:	601a      	str	r2, [r3, #0]
	count0 = time_red_yellow/1000;;
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <fsm_switch_state_auto_red_yellow+0x54>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0c      	ldr	r2, [pc, #48]	@ (800057c <fsm_switch_state_auto_red_yellow+0x58>)
 800054a:	fb82 1203 	smull	r1, r2, r2, r3
 800054e:	1192      	asrs	r2, r2, #6
 8000550:	17db      	asrs	r3, r3, #31
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <fsm_switch_state_auto_red_yellow+0x5c>)
 8000556:	6013      	str	r3, [r2, #0]
	count1 = time_red_yellow/1000;
 8000558:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <fsm_switch_state_auto_red_yellow+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	@ (800057c <fsm_switch_state_auto_red_yellow+0x58>)
 800055e:	fb82 1203 	smull	r1, r2, r2, r3
 8000562:	1192      	asrs	r2, r2, #6
 8000564:	17db      	asrs	r3, r3, #31
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <fsm_switch_state_auto_red_yellow+0x60>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010800 	.word	0x40010800
 8000574:	200000ac 	.word	0x200000ac
 8000578:	20000018 	.word	0x20000018
 800057c:	10624dd3 	.word	0x10624dd3
 8000580:	200000b0 	.word	0x200000b0
 8000584:	200000b4 	.word	0x200000b4

08000588 <fsm_switch_state_auto_green_red>:
void fsm_switch_state_auto_green_red(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red 0 off
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4816      	ldr	r0, [pc, #88]	@ (80005ec <fsm_switch_state_auto_green_red+0x64>)
 8000592:	f001 fc20 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow 1 off
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	4814      	ldr	r0, [pc, #80]	@ (80005ec <fsm_switch_state_auto_green_red+0x64>)
 800059c:	f001 fc1b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 on
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4811      	ldr	r0, [pc, #68]	@ (80005ec <fsm_switch_state_auto_green_red+0x64>)
 80005a6:	f001 fc16 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	480f      	ldr	r0, [pc, #60]	@ (80005ec <fsm_switch_state_auto_green_red+0x64>)
 80005b0:	f001 fc11 	bl	8001dd6 <HAL_GPIO_WritePin>
	status = auto_green_red;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <fsm_switch_state_auto_green_red+0x68>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green)/1000;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <fsm_switch_state_auto_green_red+0x6c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <fsm_switch_state_auto_green_red+0x70>)
 80005c0:	fb82 1203 	smull	r1, r2, r2, r3
 80005c4:	1192      	asrs	r2, r2, #6
 80005c6:	17db      	asrs	r3, r3, #31
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <fsm_switch_state_auto_green_red+0x74>)
 80005cc:	6013      	str	r3, [r2, #0]
	count1 = (time_red_green + time_red_yellow)/1000;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <fsm_switch_state_auto_green_red+0x6c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <fsm_switch_state_auto_green_red+0x78>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <fsm_switch_state_auto_green_red+0x70>)
 80005da:	fb82 1203 	smull	r1, r2, r2, r3
 80005de:	1192      	asrs	r2, r2, #6
 80005e0:	17db      	asrs	r3, r3, #31
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a07      	ldr	r2, [pc, #28]	@ (8000604 <fsm_switch_state_auto_green_red+0x7c>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010800 	.word	0x40010800
 80005f0:	200000ac 	.word	0x200000ac
 80005f4:	20000014 	.word	0x20000014
 80005f8:	10624dd3 	.word	0x10624dd3
 80005fc:	200000b0 	.word	0x200000b0
 8000600:	20000018 	.word	0x20000018
 8000604:	200000b4 	.word	0x200000b4

08000608 <fsm_switch_state_auto_yellow_red>:
void fsm_switch_state_auto_yellow_red(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 on
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4810      	ldr	r0, [pc, #64]	@ (8000654 <fsm_switch_state_auto_yellow_red+0x4c>)
 8000612:	f001 fbe0 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 off
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <fsm_switch_state_auto_yellow_red+0x4c>)
 800061c:	f001 fbdb 	bl	8001dd6 <HAL_GPIO_WritePin>
	status = auto_yellow_red;
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <fsm_switch_state_auto_yellow_red+0x50>)
 8000622:	2204      	movs	r2, #4
 8000624:	601a      	str	r2, [r3, #0]
	count0 = time_red_yellow/1000;
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <fsm_switch_state_auto_yellow_red+0x54>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <fsm_switch_state_auto_yellow_red+0x58>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	1192      	asrs	r2, r2, #6
 8000632:	17db      	asrs	r3, r3, #31
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <fsm_switch_state_auto_yellow_red+0x5c>)
 8000638:	6013      	str	r3, [r2, #0]
	count1 = time_red_yellow/1000;
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <fsm_switch_state_auto_yellow_red+0x54>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a08      	ldr	r2, [pc, #32]	@ (8000660 <fsm_switch_state_auto_yellow_red+0x58>)
 8000640:	fb82 1203 	smull	r1, r2, r2, r3
 8000644:	1192      	asrs	r2, r2, #6
 8000646:	17db      	asrs	r3, r3, #31
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <fsm_switch_state_auto_yellow_red+0x60>)
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800
 8000658:	200000ac 	.word	0x200000ac
 800065c:	20000018 	.word	0x20000018
 8000660:	10624dd3 	.word	0x10624dd3
 8000664:	200000b0 	.word	0x200000b0
 8000668:	200000b4 	.word	0x200000b4

0800066c <count_1_second>:
void count_1_second(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	if(count0 > 0)
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <count_1_second+0x3c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	dd04      	ble.n	8000682 <count_1_second+0x16>
		count0 --;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <count_1_second+0x3c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <count_1_second+0x3c>)
 8000680:	6013      	str	r3, [r2, #0]
	if(count1 > 0)
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <count_1_second+0x40>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	dd04      	ble.n	8000694 <count_1_second+0x28>
		count1 --;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <count_1_second+0x40>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <count_1_second+0x40>)
 8000692:	6013      	str	r3, [r2, #0]
	updateClockBuffer(count0, count1);
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <count_1_second+0x3c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <count_1_second+0x40>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fca8 	bl	8000ff4 <updateClockBuffer>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000b0 	.word	0x200000b0
 80006ac:	200000b4 	.word	0x200000b4

080006b0 <fsm_manual>:
 *  Created on: Nov 19, 2024
 *      Author: HOME
 */
#include "fsm_manual.h"

void fsm_manual(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	switch (status) {
 80006b4:	4b71      	ldr	r3, [pc, #452]	@ (800087c <fsm_manual+0x1cc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d002      	beq.n	80006c2 <fsm_manual+0x12>
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d055      	beq.n	800076c <fsm_manual+0xbc>
				updateClockBuffer(count0, count1);
				return;
			}
			break;
		default:
			return;
 80006c0:	e0db      	b.n	800087a <fsm_manual+0x1ca>
			if(isButtonPress(1) == 1){
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff fd8a 	bl	80001dc <isButtonPress>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d117      	bne.n	80006fe <fsm_manual+0x4e>
				status = manual_green_red;
 80006ce:	4b6b      	ldr	r3, [pc, #428]	@ (800087c <fsm_manual+0x1cc>)
 80006d0:	2206      	movs	r2, #6
 80006d2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	@ 0x40
 80006d8:	4869      	ldr	r0, [pc, #420]	@ (8000880 <fsm_manual+0x1d0>)
 80006da:	f001 fb7c 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	4867      	ldr	r0, [pc, #412]	@ (8000880 <fsm_manual+0x1d0>)
 80006e4:	f001 fb77 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2108      	movs	r1, #8
 80006ec:	4864      	ldr	r0, [pc, #400]	@ (8000880 <fsm_manual+0x1d0>)
 80006ee:	f001 fb72 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f8:	4861      	ldr	r0, [pc, #388]	@ (8000880 <fsm_manual+0x1d0>)
 80006fa:	f001 fb6c 	bl	8001dd6 <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd6c 	bl	80001dc <isButtonPress>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	f040 8084 	bne.w	8000814 <fsm_manual+0x164>
				SCH_Add_Task(fsm_auto_run, 100, 10);
 800070c:	220a      	movs	r2, #10
 800070e:	2164      	movs	r1, #100	@ 0x64
 8000710:	485c      	ldr	r0, [pc, #368]	@ (8000884 <fsm_manual+0x1d4>)
 8000712:	f000 fe1f 	bl	8001354 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 100, 250);
 8000716:	22fa      	movs	r2, #250	@ 0xfa
 8000718:	2164      	movs	r1, #100	@ 0x64
 800071a:	485b      	ldr	r0, [pc, #364]	@ (8000888 <fsm_manual+0x1d8>)
 800071c:	f000 fe1a 	bl	8001354 <SCH_Add_Task>
				SCH_Delete_Task_By_Function(fsm_manual);
 8000720:	485a      	ldr	r0, [pc, #360]	@ (800088c <fsm_manual+0x1dc>)
 8000722:	f000 ff45 	bl	80015b0 <SCH_Delete_Task_By_Function>
				status = auto_red_green;
 8000726:	4b55      	ldr	r3, [pc, #340]	@ (800087c <fsm_manual+0x1cc>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <fsm_manual+0x1e0>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <fsm_manual+0x1e4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4413      	add	r3, r2
 8000736:	4a58      	ldr	r2, [pc, #352]	@ (8000898 <fsm_manual+0x1e8>)
 8000738:	fb82 1203 	smull	r1, r2, r2, r3
 800073c:	1192      	asrs	r2, r2, #6
 800073e:	17db      	asrs	r3, r3, #31
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a56      	ldr	r2, [pc, #344]	@ (800089c <fsm_manual+0x1ec>)
 8000744:	6013      	str	r3, [r2, #0]
				count1 = time_red_green / 1000;
 8000746:	4b52      	ldr	r3, [pc, #328]	@ (8000890 <fsm_manual+0x1e0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a53      	ldr	r2, [pc, #332]	@ (8000898 <fsm_manual+0x1e8>)
 800074c:	fb82 1203 	smull	r1, r2, r2, r3
 8000750:	1192      	asrs	r2, r2, #6
 8000752:	17db      	asrs	r3, r3, #31
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a52      	ldr	r2, [pc, #328]	@ (80008a0 <fsm_manual+0x1f0>)
 8000758:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 800075a:	4b50      	ldr	r3, [pc, #320]	@ (800089c <fsm_manual+0x1ec>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a50      	ldr	r2, [pc, #320]	@ (80008a0 <fsm_manual+0x1f0>)
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fc45 	bl	8000ff4 <updateClockBuffer>
				return;
 800076a:	e086      	b.n	800087a <fsm_manual+0x1ca>
			if(isButtonPress(1) == 1){
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fd35 	bl	80001dc <isButtonPress>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d117      	bne.n	80007a8 <fsm_manual+0xf8>
				status = manual_red_green;
 8000778:	4b40      	ldr	r3, [pc, #256]	@ (800087c <fsm_manual+0x1cc>)
 800077a:	2205      	movs	r2, #5
 800077c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2108      	movs	r1, #8
 8000782:	483f      	ldr	r0, [pc, #252]	@ (8000880 <fsm_manual+0x1d0>)
 8000784:	f001 fb27 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800078e:	483c      	ldr	r0, [pc, #240]	@ (8000880 <fsm_manual+0x1d0>)
 8000790:	f001 fb21 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2140      	movs	r1, #64	@ 0x40
 8000798:	4839      	ldr	r0, [pc, #228]	@ (8000880 <fsm_manual+0x1d0>)
 800079a:	f001 fb1c 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4837      	ldr	r0, [pc, #220]	@ (8000880 <fsm_manual+0x1d0>)
 80007a4:	f001 fb17 	bl	8001dd6 <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff fd17 	bl	80001dc <isButtonPress>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d131      	bne.n	8000818 <fsm_manual+0x168>
				SCH_Add_Task(fsm_auto_run, 100, 10);
 80007b4:	220a      	movs	r2, #10
 80007b6:	2164      	movs	r1, #100	@ 0x64
 80007b8:	4832      	ldr	r0, [pc, #200]	@ (8000884 <fsm_manual+0x1d4>)
 80007ba:	f000 fdcb 	bl	8001354 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 100, 250);
 80007be:	22fa      	movs	r2, #250	@ 0xfa
 80007c0:	2164      	movs	r1, #100	@ 0x64
 80007c2:	4831      	ldr	r0, [pc, #196]	@ (8000888 <fsm_manual+0x1d8>)
 80007c4:	f000 fdc6 	bl	8001354 <SCH_Add_Task>
				SCH_Delete_Task_By_Function(fsm_manual);
 80007c8:	4830      	ldr	r0, [pc, #192]	@ (800088c <fsm_manual+0x1dc>)
 80007ca:	f000 fef1 	bl	80015b0 <SCH_Delete_Task_By_Function>
				status = auto_green_red;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <fsm_manual+0x1cc>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <fsm_manual+0x1e0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <fsm_manual+0x1e8>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1192      	asrs	r2, r2, #6
 80007e0:	17db      	asrs	r3, r3, #31
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4a2d      	ldr	r2, [pc, #180]	@ (800089c <fsm_manual+0x1ec>)
 80007e6:	6013      	str	r3, [r2, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <fsm_manual+0x1e0>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <fsm_manual+0x1e4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a29      	ldr	r2, [pc, #164]	@ (8000898 <fsm_manual+0x1e8>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1192      	asrs	r2, r2, #6
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a28      	ldr	r2, [pc, #160]	@ (80008a0 <fsm_manual+0x1f0>)
 8000800:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <fsm_manual+0x1ec>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a26      	ldr	r2, [pc, #152]	@ (80008a0 <fsm_manual+0x1f0>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fbf1 	bl	8000ff4 <updateClockBuffer>
				return;
 8000812:	e032      	b.n	800087a <fsm_manual+0x1ca>
			break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <fsm_manual+0x16a>
			break;
 8000818:	bf00      	nop
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff fcde 	bl	80001dc <isButtonPress>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d129      	bne.n	800087a <fsm_manual+0x1ca>
		time_red_yellow = 0;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <fsm_manual+0x1e4>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <fsm_manual+0x1e0>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000832:	2101      	movs	r1, #1
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fbdd 	bl	8000ff4 <updateClockBuffer>
		status = set_green;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <fsm_manual+0x1cc>)
 800083c:	2208      	movs	r2, #8
 800083e:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task_By_Function(fsm_manual);
 8000840:	4812      	ldr	r0, [pc, #72]	@ (800088c <fsm_manual+0x1dc>)
 8000842:	f000 feb5 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Delete_Task_By_Function(count_1_second);
 8000846:	4817      	ldr	r0, [pc, #92]	@ (80008a4 <fsm_manual+0x1f4>)
 8000848:	f000 feb2 	bl	80015b0 <SCH_Delete_Task_By_Function>
		SCH_Add_Task(fsm_setting, 100, 10);
 800084c:	220a      	movs	r2, #10
 800084e:	2164      	movs	r1, #100	@ 0x64
 8000850:	4815      	ldr	r0, [pc, #84]	@ (80008a8 <fsm_manual+0x1f8>)
 8000852:	f000 fd7f 	bl	8001354 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 250);
 8000856:	22fa      	movs	r2, #250	@ 0xfa
 8000858:	210a      	movs	r1, #10
 800085a:	480b      	ldr	r0, [pc, #44]	@ (8000888 <fsm_manual+0x1d8>)
 800085c:	f000 fd7a 	bl	8001354 <SCH_Add_Task>
		single_LED_off();
 8000860:	f000 fc04 	bl	800106c <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2120      	movs	r1, #32
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <fsm_manual+0x1d0>)
 800086a:	f001 fab4 	bl	8001dd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <fsm_manual+0x1d0>)
 8000876:	f001 faae 	bl	8001dd6 <HAL_GPIO_WritePin>
	}
}
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000ac 	.word	0x200000ac
 8000880:	40010800 	.word	0x40010800
 8000884:	08000211 	.word	0x08000211
 8000888:	08000b9d 	.word	0x08000b9d
 800088c:	080006b1 	.word	0x080006b1
 8000890:	20000014 	.word	0x20000014
 8000894:	20000018 	.word	0x20000018
 8000898:	10624dd3 	.word	0x10624dd3
 800089c:	200000b0 	.word	0x200000b0
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	0800066d 	.word	0x0800066d
 80008a8:	080008ad 	.word	0x080008ad

080008ac <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;
int temp =0 ;
void fsm_setting(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch (status) {
 80008b0:	4b8a      	ldr	r3, [pc, #552]	@ (8000adc <fsm_setting+0x230>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	d074      	beq.n	80009a2 <fsm_setting+0xf6>
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	f040 810c 	bne.w	8000ad6 <fsm_setting+0x22a>
		case set_green:
			if(isButtonPress(0) == 1){  // TIME INCREASE
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fc8c 	bl	80001dc <isButtonPress>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d12b      	bne.n	8000922 <fsm_setting+0x76>
				time_red_green += increment[i];
 80008ca:	4b85      	ldr	r3, [pc, #532]	@ (8000ae0 <fsm_setting+0x234>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a85      	ldr	r2, [pc, #532]	@ (8000ae4 <fsm_setting+0x238>)
 80008d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d4:	4b84      	ldr	r3, [pc, #528]	@ (8000ae8 <fsm_setting+0x23c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	4a83      	ldr	r2, [pc, #524]	@ (8000ae8 <fsm_setting+0x23c>)
 80008dc:	6013      	str	r3, [r2, #0]
				temp = time_red_green;
 80008de:	4b82      	ldr	r3, [pc, #520]	@ (8000ae8 <fsm_setting+0x23c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a82      	ldr	r2, [pc, #520]	@ (8000aec <fsm_setting+0x240>)
 80008e4:	6013      	str	r3, [r2, #0]
				if(time_red_green > 98000){
 80008e6:	4b80      	ldr	r3, [pc, #512]	@ (8000ae8 <fsm_setting+0x23c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a81      	ldr	r2, [pc, #516]	@ (8000af0 <fsm_setting+0x244>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	dd02      	ble.n	80008f6 <fsm_setting+0x4a>
					time_red_green = 0;
 80008f0:	4b7d      	ldr	r3, [pc, #500]	@ (8000ae8 <fsm_setting+0x23c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
				}
				updateClockBuffer(time_red_green/1000, increment[i]/1000);
 80008f6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ae8 <fsm_setting+0x23c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a7e      	ldr	r2, [pc, #504]	@ (8000af4 <fsm_setting+0x248>)
 80008fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000900:	1192      	asrs	r2, r2, #6
 8000902:	17db      	asrs	r3, r3, #31
 8000904:	1ad0      	subs	r0, r2, r3
 8000906:	4b76      	ldr	r3, [pc, #472]	@ (8000ae0 <fsm_setting+0x234>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a76      	ldr	r2, [pc, #472]	@ (8000ae4 <fsm_setting+0x238>)
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	4a78      	ldr	r2, [pc, #480]	@ (8000af4 <fsm_setting+0x248>)
 8000912:	fb82 1203 	smull	r1, r2, r2, r3
 8000916:	1192      	asrs	r2, r2, #6
 8000918:	17db      	asrs	r3, r3, #31
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	4619      	mov	r1, r3
 800091e:	f000 fb69 	bl	8000ff4 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fc5a 	bl	80001dc <isButtonPress>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	f040 80a7 	bne.w	8000a7e <fsm_setting+0x1d2>
				i = 0;
 8000930:	4b6b      	ldr	r3, [pc, #428]	@ (8000ae0 <fsm_setting+0x234>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000936:	4b70      	ldr	r3, [pc, #448]	@ (8000af8 <fsm_setting+0x24c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a6e      	ldr	r2, [pc, #440]	@ (8000af4 <fsm_setting+0x248>)
 800093c:	fb82 1203 	smull	r1, r2, r2, r3
 8000940:	1192      	asrs	r2, r2, #6
 8000942:	17db      	asrs	r3, r3, #31
 8000944:	1ad0      	subs	r0, r2, r3
 8000946:	4b66      	ldr	r3, [pc, #408]	@ (8000ae0 <fsm_setting+0x234>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a66      	ldr	r2, [pc, #408]	@ (8000ae4 <fsm_setting+0x238>)
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	4a68      	ldr	r2, [pc, #416]	@ (8000af4 <fsm_setting+0x248>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1192      	asrs	r2, r2, #6
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4619      	mov	r1, r3
 800095e:	f000 fb49 	bl	8000ff4 <updateClockBuffer>
				temp = time_red_yellow;
 8000962:	4b65      	ldr	r3, [pc, #404]	@ (8000af8 <fsm_setting+0x24c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a61      	ldr	r2, [pc, #388]	@ (8000aec <fsm_setting+0x240>)
 8000968:	6013      	str	r3, [r2, #0]
				status = set_yellow;
 800096a:	4b5c      	ldr	r3, [pc, #368]	@ (8000adc <fsm_setting+0x230>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	4861      	ldr	r0, [pc, #388]	@ (8000afc <fsm_setting+0x250>)
 8000976:	f001 fa2e 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000980:	485e      	ldr	r0, [pc, #376]	@ (8000afc <fsm_setting+0x250>)
 8000982:	f001 fa28 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	485c      	ldr	r0, [pc, #368]	@ (8000afc <fsm_setting+0x250>)
 800098c:	f001 fa23 	bl	8001dd6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	4859      	ldr	r0, [pc, #356]	@ (8000afc <fsm_setting+0x250>)
 8000996:	f001 fa1e 	bl	8001dd6 <HAL_GPIO_WritePin>
				i = 0;
 800099a:	4b51      	ldr	r3, [pc, #324]	@ (8000ae0 <fsm_setting+0x234>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a0:	e06d      	b.n	8000a7e <fsm_setting+0x1d2>
		case set_yellow:
			if(isButtonPress(0) == 1){
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fc1a 	bl	80001dc <isButtonPress>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d123      	bne.n	80009f6 <fsm_setting+0x14a>
				time_red_yellow += increment[i];
 80009ae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae0 <fsm_setting+0x234>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae4 <fsm_setting+0x238>)
 80009b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b8:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <fsm_setting+0x24c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4a4e      	ldr	r2, [pc, #312]	@ (8000af8 <fsm_setting+0x24c>)
 80009c0:	6013      	str	r3, [r2, #0]
				temp = time_red_yellow;
 80009c2:	4b4d      	ldr	r3, [pc, #308]	@ (8000af8 <fsm_setting+0x24c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a49      	ldr	r2, [pc, #292]	@ (8000aec <fsm_setting+0x240>)
 80009c8:	6013      	str	r3, [r2, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 80009ca:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <fsm_setting+0x24c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a49      	ldr	r2, [pc, #292]	@ (8000af4 <fsm_setting+0x248>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1192      	asrs	r2, r2, #6
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad0      	subs	r0, r2, r3
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <fsm_setting+0x234>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a41      	ldr	r2, [pc, #260]	@ (8000ae4 <fsm_setting+0x238>)
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	4a43      	ldr	r2, [pc, #268]	@ (8000af4 <fsm_setting+0x248>)
 80009e6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ea:	1192      	asrs	r2, r2, #6
 80009ec:	17db      	asrs	r3, r3, #31
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	f000 faff 	bl	8000ff4 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff fbf0 	bl	80001dc <isButtonPress>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d13f      	bne.n	8000a82 <fsm_setting+0x1d6>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 8000a02:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <fsm_setting+0x24c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <fsm_setting+0x23c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b00 <fsm_setting+0x254>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	dd1f      	ble.n	8000a52 <fsm_setting+0x1a6>
 8000a12:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <fsm_setting+0x23c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11b      	bne.n	8000a52 <fsm_setting+0x1a6>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4837      	ldr	r0, [pc, #220]	@ (8000afc <fsm_setting+0x250>)
 8000a20:	f001 f9d9 	bl	8001dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	4834      	ldr	r0, [pc, #208]	@ (8000afc <fsm_setting+0x250>)
 8000a2a:	f001 f9d4 	bl	8001dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2120      	movs	r1, #32
 8000a32:	4832      	ldr	r0, [pc, #200]	@ (8000afc <fsm_setting+0x250>)
 8000a34:	f001 f9cf 	bl	8001dd6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3e:	482f      	ldr	r0, [pc, #188]	@ (8000afc <fsm_setting+0x250>)
 8000a40:	f001 f9c9 	bl	8001dd6 <HAL_GPIO_WritePin>
					status = set_green;
 8000a44:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <fsm_setting+0x230>)
 8000a46:	2208      	movs	r2, #8
 8000a48:	601a      	str	r2, [r3, #0]
					i = 0;
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <fsm_setting+0x234>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
					SCH_Add_Task(fsm_auto_run, 100, 10);
					SCH_Add_Task(count_1_second, 1000, 1000);
					return;
				}
			}
			break;
 8000a50:	e017      	b.n	8000a82 <fsm_setting+0x1d6>
					i = 0;
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <fsm_setting+0x234>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
					status = auto_init;
 8000a58:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <fsm_setting+0x230>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task_By_Function(fsm_setting);
 8000a5e:	4829      	ldr	r0, [pc, #164]	@ (8000b04 <fsm_setting+0x258>)
 8000a60:	f000 fda6 	bl	80015b0 <SCH_Delete_Task_By_Function>
					SCH_Add_Task(fsm_auto_run, 100, 10);
 8000a64:	220a      	movs	r2, #10
 8000a66:	2164      	movs	r1, #100	@ 0x64
 8000a68:	4827      	ldr	r0, [pc, #156]	@ (8000b08 <fsm_setting+0x25c>)
 8000a6a:	f000 fc73 	bl	8001354 <SCH_Add_Task>
					SCH_Add_Task(count_1_second, 1000, 1000);
 8000a6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a76:	4825      	ldr	r0, [pc, #148]	@ (8000b0c <fsm_setting+0x260>)
 8000a78:	f000 fc6c 	bl	8001354 <SCH_Add_Task>
					return;
 8000a7c:	e02c      	b.n	8000ad8 <fsm_setting+0x22c>
			break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <fsm_setting+0x1d8>
			break;
 8000a82:	bf00      	nop
		default:
			return;
	}
	if(isButtonPress(1) == 1){
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fba9 	bl	80001dc <isButtonPress>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d123      	bne.n	8000ad8 <fsm_setting+0x22c>
		 ++i;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <fsm_setting+0x234>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <fsm_setting+0x234>)
 8000a98:	6013      	str	r3, [r2, #0]
		 if(i >= 5) i = 0;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <fsm_setting+0x234>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	dd02      	ble.n	8000aa8 <fsm_setting+0x1fc>
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <fsm_setting+0x234>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		 updateClockBuffer(temp/1000, increment[i]/1000);
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <fsm_setting+0x240>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <fsm_setting+0x248>)
 8000aae:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab2:	1192      	asrs	r2, r2, #6
 8000ab4:	17db      	asrs	r3, r3, #31
 8000ab6:	1ad0      	subs	r0, r2, r3
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <fsm_setting+0x234>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <fsm_setting+0x238>)
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <fsm_setting+0x248>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1192      	asrs	r2, r2, #6
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f000 fa90 	bl	8000ff4 <updateClockBuffer>
 8000ad4:	e000      	b.n	8000ad8 <fsm_setting+0x22c>
			return;
 8000ad6:	bf00      	nop
	}
}
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000ac 	.word	0x200000ac
 8000ae0:	200000a4 	.word	0x200000a4
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000014 	.word	0x20000014
 8000aec:	200000a8 	.word	0x200000a8
 8000af0:	00017ed0 	.word	0x00017ed0
 8000af4:	10624dd3 	.word	0x10624dd3
 8000af8:	20000018 	.word	0x20000018
 8000afc:	40010800 	.word	0x40010800
 8000b00:	0001869f 	.word	0x0001869f
 8000b04:	080008ad 	.word	0x080008ad
 8000b08:	08000211 	.word	0x08000211
 8000b0c:	0800066d 	.word	0x0800066d

08000b10 <fsm_slow_run>:
 *      Author: HOME
 */

#include "fsm_slow.h"

void fsm_slow_run(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000b14:	2110      	movs	r1, #16
 8000b16:	480f      	ldr	r0, [pc, #60]	@ (8000b54 <fsm_slow_run+0x44>)
 8000b18:	f001 f975 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <fsm_slow_run+0x44>)
 8000b20:	f001 f971 	bl	8001e06 <HAL_GPIO_TogglePin>
	if(isButtonPress(0)==1){
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fb59 	bl	80001dc <isButtonPress>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10f      	bne.n	8000b50 <fsm_slow_run+0x40>
		SCH_Add_Task(fsm_auto_run, 100, 10);
 8000b30:	220a      	movs	r2, #10
 8000b32:	2164      	movs	r1, #100	@ 0x64
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <fsm_slow_run+0x48>)
 8000b36:	f000 fc0d 	bl	8001354 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 0, 250);
 8000b3a:	22fa      	movs	r2, #250	@ 0xfa
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <fsm_slow_run+0x4c>)
 8000b40:	f000 fc08 	bl	8001354 <SCH_Add_Task>
		SCH_Delete_Task_By_Function(fsm_slow_run);
 8000b44:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <fsm_slow_run+0x50>)
 8000b46:	f000 fd33 	bl	80015b0 <SCH_Delete_Task_By_Function>
		status = auto_init;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <fsm_slow_run+0x54>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
	}
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010800 	.word	0x40010800
 8000b58:	08000211 	.word	0x08000211
 8000b5c:	08000b9d 	.word	0x08000b9d
 8000b60:	08000b11 	.word	0x08000b11
 8000b64:	200000ac 	.word	0x200000ac

08000b68 <Diable_Led>:

#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2108      	movs	r1, #8
 8000b70:	4809      	ldr	r0, [pc, #36]	@ (8000b98 <Diable_Led+0x30>)
 8000b72:	f001 f930 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <Diable_Led+0x30>)
 8000b7c:	f001 f92b 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2120      	movs	r1, #32
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <Diable_Led+0x30>)
 8000b86:	f001 f926 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2140      	movs	r1, #64	@ 0x40
 8000b8e:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <Diable_Led+0x30>)
 8000b90:	f001 f921 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <Scan7SEG>:
void Scan7SEG(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	Diable_Led();
 8000ba0:	f7ff ffe2 	bl	8000b68 <Diable_Led>
	switch(led_index){
 8000ba4:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <Scan7SEG+0xa0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d837      	bhi.n	8000c1c <Scan7SEG+0x80>
 8000bac:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb4 <Scan7SEG+0x18>)
 8000bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb2:	bf00      	nop
 8000bb4:	08000bc5 	.word	0x08000bc5
 8000bb8:	08000bdb 	.word	0x08000bdb
 8000bbc:	08000bf1 	.word	0x08000bf1
 8000bc0:	08000c07 	.word	0x08000c07
		case 0:
			//Display the first 7SEG with led_buffer[0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	481d      	ldr	r0, [pc, #116]	@ (8000c40 <Scan7SEG+0xa4>)
 8000bca:	f001 f904 	bl	8001dd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <Scan7SEG+0xa8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f838 	bl	8000c48 <display7SEG>
			break;
 8000bd8:	e021      	b.n	8000c1e <Scan7SEG+0x82>
		case 1:
			//Display the second 7SEG with led_buffer[1]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4818      	ldr	r0, [pc, #96]	@ (8000c40 <Scan7SEG+0xa4>)
 8000be0:	f001 f8f9 	bl	8001dd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <Scan7SEG+0xa8>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 f82d 	bl	8000c48 <display7SEG>
			break;
 8000bee:	e016      	b.n	8000c1e <Scan7SEG+0x82>
		case 2:
			//Display the third 7SEG with led_buffer[2]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <Scan7SEG+0xa4>)
 8000bf6:	f001 f8ee 	bl	8001dd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <Scan7SEG+0xa8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f822 	bl	8000c48 <display7SEG>
			break;
 8000c04:	e00b      	b.n	8000c1e <Scan7SEG+0x82>
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <Scan7SEG+0xa4>)
 8000c0c:	f001 f8e3 	bl	8001dd6 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <Scan7SEG+0xa8>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f817 	bl	8000c48 <display7SEG>
			break;
 8000c1a:	e000      	b.n	8000c1e <Scan7SEG+0x82>
		default:
			break;
 8000c1c:	bf00      	nop
	}
	if((++led_index) >= 4) led_index = 0;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <Scan7SEG+0xa0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <Scan7SEG+0xa0>)
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Scan7SEG+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	dd02      	ble.n	8000c36 <Scan7SEG+0x9a>
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <Scan7SEG+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	200000b8 	.word	0x200000b8

08000c48 <display7SEG>:
void display7SEG(int num){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	switch(num){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b09      	cmp	r3, #9
 8000c54:	f200 81c8 	bhi.w	8000fe8 <display7SEG+0x3a0>
 8000c58:	a201      	add	r2, pc, #4	@ (adr r2, 8000c60 <display7SEG+0x18>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c89 	.word	0x08000c89
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000d35 	.word	0x08000d35
 8000c6c:	08000d8b 	.word	0x08000d8b
 8000c70:	08000de1 	.word	0x08000de1
 8000c74:	08000e37 	.word	0x08000e37
 8000c78:	08000e8d 	.word	0x08000e8d
 8000c7c:	08000ee3 	.word	0x08000ee3
 8000c80:	08000f39 	.word	0x08000f39
 8000c84:	08000f8f 	.word	0x08000f8f
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c8e:	48d5      	ldr	r0, [pc, #852]	@ (8000fe4 <display7SEG+0x39c>)
 8000c90:	f001 f8a1 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c9a:	48d2      	ldr	r0, [pc, #840]	@ (8000fe4 <display7SEG+0x39c>)
 8000c9c:	f001 f89b 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca6:	48cf      	ldr	r0, [pc, #828]	@ (8000fe4 <display7SEG+0x39c>)
 8000ca8:	f001 f895 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb2:	48cc      	ldr	r0, [pc, #816]	@ (8000fe4 <display7SEG+0x39c>)
 8000cb4:	f001 f88f 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cbe:	48c9      	ldr	r0, [pc, #804]	@ (8000fe4 <display7SEG+0x39c>)
 8000cc0:	f001 f889 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cca:	48c6      	ldr	r0, [pc, #792]	@ (8000fe4 <display7SEG+0x39c>)
 8000ccc:	f001 f883 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd6:	48c3      	ldr	r0, [pc, #780]	@ (8000fe4 <display7SEG+0x39c>)
 8000cd8:	f001 f87d 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000cdc:	e185      	b.n	8000fea <display7SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce4:	48bf      	ldr	r0, [pc, #764]	@ (8000fe4 <display7SEG+0x39c>)
 8000ce6:	f001 f876 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf0:	48bc      	ldr	r0, [pc, #752]	@ (8000fe4 <display7SEG+0x39c>)
 8000cf2:	f001 f870 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cfc:	48b9      	ldr	r0, [pc, #740]	@ (8000fe4 <display7SEG+0x39c>)
 8000cfe:	f001 f86a 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d08:	48b6      	ldr	r0, [pc, #728]	@ (8000fe4 <display7SEG+0x39c>)
 8000d0a:	f001 f864 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	48b3      	ldr	r0, [pc, #716]	@ (8000fe4 <display7SEG+0x39c>)
 8000d16:	f001 f85e 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d20:	48b0      	ldr	r0, [pc, #704]	@ (8000fe4 <display7SEG+0x39c>)
 8000d22:	f001 f858 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d2c:	48ad      	ldr	r0, [pc, #692]	@ (8000fe4 <display7SEG+0x39c>)
 8000d2e:	f001 f852 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000d32:	e15a      	b.n	8000fea <display7SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3a:	48aa      	ldr	r0, [pc, #680]	@ (8000fe4 <display7SEG+0x39c>)
 8000d3c:	f001 f84b 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d46:	48a7      	ldr	r0, [pc, #668]	@ (8000fe4 <display7SEG+0x39c>)
 8000d48:	f001 f845 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d52:	48a4      	ldr	r0, [pc, #656]	@ (8000fe4 <display7SEG+0x39c>)
 8000d54:	f001 f83f 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5e:	48a1      	ldr	r0, [pc, #644]	@ (8000fe4 <display7SEG+0x39c>)
 8000d60:	f001 f839 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6a:	489e      	ldr	r0, [pc, #632]	@ (8000fe4 <display7SEG+0x39c>)
 8000d6c:	f001 f833 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d76:	489b      	ldr	r0, [pc, #620]	@ (8000fe4 <display7SEG+0x39c>)
 8000d78:	f001 f82d 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d82:	4898      	ldr	r0, [pc, #608]	@ (8000fe4 <display7SEG+0x39c>)
 8000d84:	f001 f827 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000d88:	e12f      	b.n	8000fea <display7SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d90:	4894      	ldr	r0, [pc, #592]	@ (8000fe4 <display7SEG+0x39c>)
 8000d92:	f001 f820 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9c:	4891      	ldr	r0, [pc, #580]	@ (8000fe4 <display7SEG+0x39c>)
 8000d9e:	f001 f81a 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da8:	488e      	ldr	r0, [pc, #568]	@ (8000fe4 <display7SEG+0x39c>)
 8000daa:	f001 f814 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db4:	488b      	ldr	r0, [pc, #556]	@ (8000fe4 <display7SEG+0x39c>)
 8000db6:	f001 f80e 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc0:	4888      	ldr	r0, [pc, #544]	@ (8000fe4 <display7SEG+0x39c>)
 8000dc2:	f001 f808 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dcc:	4885      	ldr	r0, [pc, #532]	@ (8000fe4 <display7SEG+0x39c>)
 8000dce:	f001 f802 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd8:	4882      	ldr	r0, [pc, #520]	@ (8000fe4 <display7SEG+0x39c>)
 8000dda:	f000 fffc 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000dde:	e104      	b.n	8000fea <display7SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de6:	487f      	ldr	r0, [pc, #508]	@ (8000fe4 <display7SEG+0x39c>)
 8000de8:	f000 fff5 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df2:	487c      	ldr	r0, [pc, #496]	@ (8000fe4 <display7SEG+0x39c>)
 8000df4:	f000 ffef 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dfe:	4879      	ldr	r0, [pc, #484]	@ (8000fe4 <display7SEG+0x39c>)
 8000e00:	f000 ffe9 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e0a:	4876      	ldr	r0, [pc, #472]	@ (8000fe4 <display7SEG+0x39c>)
 8000e0c:	f000 ffe3 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e16:	4873      	ldr	r0, [pc, #460]	@ (8000fe4 <display7SEG+0x39c>)
 8000e18:	f000 ffdd 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e22:	4870      	ldr	r0, [pc, #448]	@ (8000fe4 <display7SEG+0x39c>)
 8000e24:	f000 ffd7 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2e:	486d      	ldr	r0, [pc, #436]	@ (8000fe4 <display7SEG+0x39c>)
 8000e30:	f000 ffd1 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000e34:	e0d9      	b.n	8000fea <display7SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	4869      	ldr	r0, [pc, #420]	@ (8000fe4 <display7SEG+0x39c>)
 8000e3e:	f000 ffca 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e48:	4866      	ldr	r0, [pc, #408]	@ (8000fe4 <display7SEG+0x39c>)
 8000e4a:	f000 ffc4 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e54:	4863      	ldr	r0, [pc, #396]	@ (8000fe4 <display7SEG+0x39c>)
 8000e56:	f000 ffbe 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e60:	4860      	ldr	r0, [pc, #384]	@ (8000fe4 <display7SEG+0x39c>)
 8000e62:	f000 ffb8 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6c:	485d      	ldr	r0, [pc, #372]	@ (8000fe4 <display7SEG+0x39c>)
 8000e6e:	f000 ffb2 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e78:	485a      	ldr	r0, [pc, #360]	@ (8000fe4 <display7SEG+0x39c>)
 8000e7a:	f000 ffac 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e84:	4857      	ldr	r0, [pc, #348]	@ (8000fe4 <display7SEG+0x39c>)
 8000e86:	f000 ffa6 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000e8a:	e0ae      	b.n	8000fea <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e92:	4854      	ldr	r0, [pc, #336]	@ (8000fe4 <display7SEG+0x39c>)
 8000e94:	f000 ff9f 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9e:	4851      	ldr	r0, [pc, #324]	@ (8000fe4 <display7SEG+0x39c>)
 8000ea0:	f000 ff99 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eaa:	484e      	ldr	r0, [pc, #312]	@ (8000fe4 <display7SEG+0x39c>)
 8000eac:	f000 ff93 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb6:	484b      	ldr	r0, [pc, #300]	@ (8000fe4 <display7SEG+0x39c>)
 8000eb8:	f000 ff8d 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec2:	4848      	ldr	r0, [pc, #288]	@ (8000fe4 <display7SEG+0x39c>)
 8000ec4:	f000 ff87 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ece:	4845      	ldr	r0, [pc, #276]	@ (8000fe4 <display7SEG+0x39c>)
 8000ed0:	f000 ff81 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eda:	4842      	ldr	r0, [pc, #264]	@ (8000fe4 <display7SEG+0x39c>)
 8000edc:	f000 ff7b 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000ee0:	e083      	b.n	8000fea <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee8:	483e      	ldr	r0, [pc, #248]	@ (8000fe4 <display7SEG+0x39c>)
 8000eea:	f000 ff74 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef4:	483b      	ldr	r0, [pc, #236]	@ (8000fe4 <display7SEG+0x39c>)
 8000ef6:	f000 ff6e 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f00:	4838      	ldr	r0, [pc, #224]	@ (8000fe4 <display7SEG+0x39c>)
 8000f02:	f000 ff68 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0c:	4835      	ldr	r0, [pc, #212]	@ (8000fe4 <display7SEG+0x39c>)
 8000f0e:	f000 ff62 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f18:	4832      	ldr	r0, [pc, #200]	@ (8000fe4 <display7SEG+0x39c>)
 8000f1a:	f000 ff5c 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f24:	482f      	ldr	r0, [pc, #188]	@ (8000fe4 <display7SEG+0x39c>)
 8000f26:	f000 ff56 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f30:	482c      	ldr	r0, [pc, #176]	@ (8000fe4 <display7SEG+0x39c>)
 8000f32:	f000 ff50 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000f36:	e058      	b.n	8000fea <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3e:	4829      	ldr	r0, [pc, #164]	@ (8000fe4 <display7SEG+0x39c>)
 8000f40:	f000 ff49 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4a:	4826      	ldr	r0, [pc, #152]	@ (8000fe4 <display7SEG+0x39c>)
 8000f4c:	f000 ff43 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f56:	4823      	ldr	r0, [pc, #140]	@ (8000fe4 <display7SEG+0x39c>)
 8000f58:	f000 ff3d 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f62:	4820      	ldr	r0, [pc, #128]	@ (8000fe4 <display7SEG+0x39c>)
 8000f64:	f000 ff37 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6e:	481d      	ldr	r0, [pc, #116]	@ (8000fe4 <display7SEG+0x39c>)
 8000f70:	f000 ff31 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f7a:	481a      	ldr	r0, [pc, #104]	@ (8000fe4 <display7SEG+0x39c>)
 8000f7c:	f000 ff2b 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f86:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <display7SEG+0x39c>)
 8000f88:	f000 ff25 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000f8c:	e02d      	b.n	8000fea <display7SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <display7SEG+0x39c>)
 8000f96:	f000 ff1e 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa0:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <display7SEG+0x39c>)
 8000fa2:	f000 ff18 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fac:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <display7SEG+0x39c>)
 8000fae:	f000 ff12 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb8:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <display7SEG+0x39c>)
 8000fba:	f000 ff0c 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc4:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <display7SEG+0x39c>)
 8000fc6:	f000 ff06 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <display7SEG+0x39c>)
 8000fd2:	f000 ff00 	bl	8001dd6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fdc:	4801      	ldr	r0, [pc, #4]	@ (8000fe4 <display7SEG+0x39c>)
 8000fde:	f000 fefa 	bl	8001dd6 <HAL_GPIO_WritePin>
			break;
 8000fe2:	e002      	b.n	8000fea <display7SEG+0x3a2>
 8000fe4:	40010800 	.word	0x40010800
		default:
			break;
 8000fe8:	bf00      	nop
	}
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop

08000ff4 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a18      	ldr	r2, [pc, #96]	@ (8001064 <updateClockBuffer+0x70>)
 8001002:	fb82 1203 	smull	r1, r2, r2, r3
 8001006:	1092      	asrs	r2, r2, #2
 8001008:	17db      	asrs	r3, r3, #31
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	4a16      	ldr	r2, [pc, #88]	@ (8001068 <updateClockBuffer+0x74>)
 800100e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <updateClockBuffer+0x70>)
 8001014:	fb83 2301 	smull	r2, r3, r3, r1
 8001018:	109a      	asrs	r2, r3, #2
 800101a:	17cb      	asrs	r3, r1, #31
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	1aca      	subs	r2, r1, r3
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <updateClockBuffer+0x74>)
 800102a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <updateClockBuffer+0x70>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <updateClockBuffer+0x74>)
 800103c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <updateClockBuffer+0x70>)
 8001042:	fb83 2301 	smull	r2, r3, r3, r1
 8001046:	109a      	asrs	r2, r3, #2
 8001048:	17cb      	asrs	r3, r1, #31
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1aca      	subs	r2, r1, r3
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <updateClockBuffer+0x74>)
 8001058:	60da      	str	r2, [r3, #12]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	66666667 	.word	0x66666667
 8001068:	200000b8 	.word	0x200000b8

0800106c <single_LED_off>:
void single_LED_off(){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2108      	movs	r1, #8
 8001074:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <single_LED_off+0x48>)
 8001076:	f000 feae 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <single_LED_off+0x48>)
 8001080:	f000 fea9 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2120      	movs	r1, #32
 8001088:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <single_LED_off+0x48>)
 800108a:	f000 fea4 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2140      	movs	r1, #64	@ 0x40
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <single_LED_off+0x48>)
 8001094:	f000 fe9f 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <single_LED_off+0x48>)
 800109e:	f000 fe9a 	bl	8001dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <single_LED_off+0x48>)
 80010aa:	f000 fe94 	bl	8001dd6 <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010800 	.word	0x40010800

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f000 fb88 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c0:	f000 f834 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c4:	f000 f8ba 	bl	800123c <MX_GPIO_Init>
  MX_TIM2_Init();
 80010c8:	f000 f86c 	bl	80011a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80010cc:	4811      	ldr	r0, [pc, #68]	@ (8001114 <main+0x5c>)
 80010ce:	f001 fae1 	bl	8002694 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010d2:	f000 f92d 	bl	8001330 <SCH_Init>
  SCH_Add_Task(led_debug, 0, 1000);
 80010d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010da:	2100      	movs	r1, #0
 80010dc:	480e      	ldr	r0, [pc, #56]	@ (8001118 <main+0x60>)
 80010de:	f000 f939 	bl	8001354 <SCH_Add_Task>
  SCH_Add_Task(getKeyinput, 0, 10);
 80010e2:	220a      	movs	r2, #10
 80010e4:	2100      	movs	r1, #0
 80010e6:	480d      	ldr	r0, [pc, #52]	@ (800111c <main+0x64>)
 80010e8:	f000 f934 	bl	8001354 <SCH_Add_Task>
  //SCH_Add_Task(led_test, 2000, 0);
  SCH_Add_Task(fsm_auto_run, 0, 10);
 80010ec:	220a      	movs	r2, #10
 80010ee:	2100      	movs	r1, #0
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <main+0x68>)
 80010f2:	f000 f92f 	bl	8001354 <SCH_Add_Task>
  SCH_Add_Task(Scan7SEG, 0, 250);
 80010f6:	22fa      	movs	r2, #250	@ 0xfa
 80010f8:	2100      	movs	r1, #0
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <main+0x6c>)
 80010fc:	f000 f92a 	bl	8001354 <SCH_Add_Task>
  SCH_Add_Task(count_1_second, 0, 1000);
 8001100:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001104:	2100      	movs	r1, #0
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <main+0x70>)
 8001108:	f000 f924 	bl	8001354 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 800110c:	f000 f9aa 	bl	8001464 <SCH_Dispatch_Task>
 8001110:	e7fc      	b.n	800110c <main+0x54>
 8001112:	bf00      	nop
 8001114:	200000cc 	.word	0x200000cc
 8001118:	080012fd 	.word	0x080012fd
 800111c:	0800014d 	.word	0x0800014d
 8001120:	08000211 	.word	0x08000211
 8001124:	08000b9d 	.word	0x08000b9d
 8001128:	0800066d 	.word	0x0800066d

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b090      	sub	sp, #64	@ 0x40
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	2228      	movs	r2, #40	@ 0x28
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fef4 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001152:	2301      	movs	r3, #1
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2310      	movs	r3, #16
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fe68 	bl	8001e38 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800116e:	f000 f8d9 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f8d6 	bl	800233c <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001196:	f000 f8c5 	bl	8001324 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	@ 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011ca:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011d8:	2209      	movs	r2, #9
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e8:	4813      	ldr	r0, [pc, #76]	@ (8001238 <MX_TIM2_Init+0x94>)
 80011ea:	f001 fa03 	bl	80025f4 <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f4:	f000 f896 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <MX_TIM2_Init+0x94>)
 8001206:	f001 fb81 	bl	800290c <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001210:	f000 f888 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_TIM2_Init+0x94>)
 8001222:	f001 fd59 	bl	8002cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 f87a 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000cc 	.word	0x200000cc

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a26      	ldr	r2, [pc, #152]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a20      	ldr	r2, [pc, #128]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 800126e:	f043 0308 	orr.w	r3, r3, #8
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_GPIO_Init+0xb4>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 8001280:	2200      	movs	r2, #0
 8001282:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 8001286:	481b      	ldr	r0, [pc, #108]	@ (80012f4 <MX_GPIO_Init+0xb8>)
 8001288:	f000 fda5 	bl	8001dd6 <HAL_GPIO_WritePin>
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2178      	movs	r1, #120	@ 0x78
 8001290:	4819      	ldr	r0, [pc, #100]	@ (80012f8 <MX_GPIO_Init+0xbc>)
 8001292:	f000 fda0 	bl	8001dd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 R0_Pin Y0_Pin G0_Pin
                           R1_Pin Y1_Pin G1_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 8001296:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800129a:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	@ (80012f4 <MX_GPIO_Init+0xb8>)
 80012b0:	f000 fbfe 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80012b4:	2307      	movs	r3, #7
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <MX_GPIO_Init+0xbc>)
 80012c8:	f000 fbf2 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80012cc:	2378      	movs	r3, #120	@ 0x78
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_GPIO_Init+0xbc>)
 80012e4:	f000 fbe4 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00

080012fc <led_debug>:

/* USER CODE BEGIN 4 */
void led_debug(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001300:	2104      	movs	r1, #4
 8001302:	4802      	ldr	r0, [pc, #8]	@ (800130c <led_debug+0x10>)
 8001304:	f000 fd7f 	bl	8001e06 <HAL_GPIO_TogglePin>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010800 	.word	0x40010800

08001310 <HAL_TIM_PeriodElapsedCallback>:
void led_test(){
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001318:	f000 f87a 	bl	8001410 <SCH_Update>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Error_Handler+0x8>

08001330 <SCH_Init>:
 */
#include "scheduler.h"

List list;

void SCH_Init(void) {
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	list.head = NULL;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <SCH_Init+0x20>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	list.tail = NULL;
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SCH_Init+0x20>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
    list.numTask = 0;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <SCH_Init+0x20>)
 8001342:	2200      	movs	r2, #0
 8001344:	721a      	strb	r2, [r3, #8]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000114 	.word	0x20000114

08001354 <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){\
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	if(SCH_Is_Task_Exist(function) == 1)
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f901 	bl	8001568 <SCH_Is_Task_Exist>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	d047      	beq.n	80013fc <SCH_Add_Task+0xa8>
		return;
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 800136c:	201c      	movs	r0, #28
 800136e:	f001 fd1d 	bl	8002dac <malloc>
 8001372:	4603      	mov	r3, r0
 8001374:	617b      	str	r3, [r7, #20]
	if (newTask == NULL)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d041      	beq.n	8001400 <SCH_Add_Task+0xac>
		return;

	newTask->pTask = function;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4a20      	ldr	r2, [pc, #128]	@ (8001408 <SCH_Add_Task+0xb4>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <SCH_Add_Task+0xb4>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	08da      	lsrs	r2, r3, #3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	609a      	str	r2, [r3, #8]
	newTask->RunMe = 0;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2200      	movs	r2, #0
 80013a2:	731a      	strb	r2, [r3, #12]
	newTask->TaskID = list.numTask++;
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <SCH_Add_Task+0xb8>)
 80013a6:	7a1b      	ldrb	r3, [r3, #8]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	b2d1      	uxtb	r1, r2
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <SCH_Add_Task+0xb8>)
 80013ae:	7211      	strb	r1, [r2, #8]
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	611a      	str	r2, [r3, #16]
	newTask->next = NULL;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
	newTask->prev = NULL;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]

	if(list.head == NULL){
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <SCH_Add_Task+0xb8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <SCH_Add_Task+0x84>
		list.head = newTask;
 80013ca:	4a10      	ldr	r2, [pc, #64]	@ (800140c <SCH_Add_Task+0xb8>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	6013      	str	r3, [r2, #0]
		list.tail = newTask;
 80013d0:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <SCH_Add_Task+0xb8>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6053      	str	r3, [r2, #4]
 80013d6:	e00a      	b.n	80013ee <SCH_Add_Task+0x9a>
	}
	else{
		newTask->prev = list.tail;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <SCH_Add_Task+0xb8>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	619a      	str	r2, [r3, #24]
		list.tail->next = newTask;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <SCH_Add_Task+0xb8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	615a      	str	r2, [r3, #20]
		list.tail = newTask;
 80013e8:	4a08      	ldr	r2, [pc, #32]	@ (800140c <SCH_Add_Task+0xb8>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	6053      	str	r3, [r2, #4]
	}
	list.numTask++;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <SCH_Add_Task+0xb8>)
 80013f0:	7a1b      	ldrb	r3, [r3, #8]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <SCH_Add_Task+0xb8>)
 80013f8:	721a      	strb	r2, [r3, #8]
 80013fa:	e002      	b.n	8001402 <SCH_Add_Task+0xae>
		return;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <SCH_Add_Task+0xae>
		return;
 8001400:	bf00      	nop
}
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	cccccccd 	.word	0xcccccccd
 800140c:	20000114 	.word	0x20000114

08001410 <SCH_Update>:

void SCH_Update(void){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
	sTask * temp = list.head;
 8001416:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <SCH_Update+0x50>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 800141c:	e016      	b.n	800144c <SCH_Update+0x3c>
		if(temp->Delay > 0){
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <SCH_Update+0x22>
			temp->Delay --;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	1e5a      	subs	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	e009      	b.n	8001446 <SCH_Update+0x36>
		}
		else{
			temp->RunMe++;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b1b      	ldrb	r3, [r3, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	731a      	strb	r2, [r3, #12]
			temp->Delay = temp->Period;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]
		}
		temp = temp->next;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e5      	bne.n	800141e <SCH_Update+0xe>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000114 	.word	0x20000114

08001464 <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	sTask * temp = list.head;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <SCH_Dispatch_Task+0x60>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001470:	e01f      	b.n	80014b2 <SCH_Dispatch_Task+0x4e>
		if(temp->RunMe > 0){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b1b      	ldrb	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d018      	beq.n	80014ac <SCH_Dispatch_Task+0x48>
			temp->RunMe--;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	731a      	strb	r2, [r3, #12]
			temp->pTask();
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4798      	blx	r3
			if(temp->Period == 0){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10b      	bne.n	80014ac <SCH_Dispatch_Task+0x48>
				sTask * delTask = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
				temp = temp->next;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	607b      	str	r3, [r7, #4]
				SCH_Delete_Task(delTask->TaskID);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f80f 	bl	80014c8 <SCH_Delete_Task>
				continue;
 80014aa:	e002      	b.n	80014b2 <SCH_Dispatch_Task+0x4e>
			}
		}
		temp = temp->next;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1dc      	bne.n	8001472 <SCH_Dispatch_Task+0xe>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000114 	.word	0x20000114

080014c8 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint8_t ID){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	if(list.numTask == 0)
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <SCH_Delete_Task+0x9c>)
 80014d4:	7a1b      	ldrb	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <SCH_Delete_Task+0x16>
		return 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	e03e      	b.n	800155c <SCH_Delete_Task+0x94>
	sTask * temp = list.head;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <SCH_Delete_Task+0x9c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 80014e4:	e036      	b.n	8001554 <SCH_Delete_Task+0x8c>
		if(temp->TaskID == ID){
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d12e      	bne.n	800154e <SCH_Delete_Task+0x86>
			if(temp->prev == NULL){ // delete head
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <SCH_Delete_Task+0x42>
				temp->next->prev = NULL;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
				list.head = temp->next;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <SCH_Delete_Task+0x9c>)
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e016      	b.n	8001538 <SCH_Delete_Task+0x70>
			}
			else if (temp->next == NULL){ //delete tail
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <SCH_Delete_Task+0x5c>
				temp->prev->next = NULL;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
				list.tail = temp->prev;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a11      	ldr	r2, [pc, #68]	@ (8001564 <SCH_Delete_Task+0x9c>)
 8001520:	6053      	str	r3, [r2, #4]
 8001522:	e009      	b.n	8001538 <SCH_Delete_Task+0x70>
			}
			else{
				temp->prev->next = temp->next;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	6952      	ldr	r2, [r2, #20]
 800152c:	615a      	str	r2, [r3, #20]
				temp->next->prev = temp->prev;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6992      	ldr	r2, [r2, #24]
 8001536:	619a      	str	r2, [r3, #24]
			}
			list.numTask--;
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <SCH_Delete_Task+0x9c>)
 800153a:	7a1b      	ldrb	r3, [r3, #8]
 800153c:	3b01      	subs	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <SCH_Delete_Task+0x9c>)
 8001542:	721a      	strb	r2, [r3, #8]
			free(temp);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f001 fc39 	bl	8002dbc <free>
			return 1;
 800154a:	2301      	movs	r3, #1
 800154c:	e006      	b.n	800155c <SCH_Delete_Task+0x94>
		}
		temp = temp->next;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1c5      	bne.n	80014e6 <SCH_Delete_Task+0x1e>
	}
	return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000114 	.word	0x20000114

08001568 <SCH_Is_Task_Exist>:
uint8_t SCH_Is_Task_Exist(void (*function)()){
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0) return 0;
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <SCH_Is_Task_Exist+0x44>)
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <SCH_Is_Task_Exist+0x14>
 8001578:	2300      	movs	r3, #0
 800157a:	e011      	b.n	80015a0 <SCH_Is_Task_Exist+0x38>
	sTask * temp = list.head;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <SCH_Is_Task_Exist+0x44>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001582:	e009      	b.n	8001598 <SCH_Is_Task_Exist+0x30>
		if(temp->pTask == function)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d101      	bne.n	8001592 <SCH_Is_Task_Exist+0x2a>
			return 1;
 800158e:	2301      	movs	r3, #1
 8001590:	e006      	b.n	80015a0 <SCH_Is_Task_Exist+0x38>
		temp = temp->next;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f2      	bne.n	8001584 <SCH_Is_Task_Exist+0x1c>
	}
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000114 	.word	0x20000114

080015b0 <SCH_Delete_Task_By_Function>:
uint8_t SCH_Delete_Task_By_Function(void (*function)() ){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	sTask * temp = list.head;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <SCH_Delete_Task_By_Function+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 80015be:	e00f      	b.n	80015e0 <SCH_Delete_Task_By_Function+0x30>
		if(temp->pTask == function){
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d107      	bne.n	80015da <SCH_Delete_Task_By_Function+0x2a>
			SCH_Delete_Task(temp->TaskID);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff79 	bl	80014c8 <SCH_Delete_Task>
			return 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e006      	b.n	80015e8 <SCH_Delete_Task_By_Function+0x38>
		}
		temp = temp->next;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ec      	bne.n	80015c0 <SCH_Delete_Task_By_Function+0x10>
	}
	return 0;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000114 	.word	0x20000114

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_MspInit+0x5c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0e      	ldr	r2, [pc, #56]	@ (8001650 <HAL_MspInit+0x5c>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_MspInit+0x60>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_MspInit+0x60>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000

08001658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001668:	d113      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_TIM_Base_MspInit+0x44>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_TIM_Base_MspInit+0x44>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_TIM_Base_MspInit+0x44>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201c      	movs	r0, #28
 8001688:	f000 f9db 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168c:	201c      	movs	r0, #28
 800168e:	f000 f9f4 	bl	8001a7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <MemManage_Handler+0x4>

080016b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f8b4 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f001 f815 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000cc 	.word	0x200000cc

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f001 fc0c 	bl	8002f58 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20002800 	.word	0x20002800
 800176c:	00000400 	.word	0x00000400
 8001770:	20000120 	.word	0x20000120
 8001774:	20000270 	.word	0x20000270

08001778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff fff8 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800178a:	490c      	ldr	r1, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800178c:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a0:	4c09      	ldr	r4, [pc, #36]	@ (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f001 fbd9 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b2:	f7ff fc81 	bl	80010b8 <main>
  bx lr
 80017b6:	4770      	bx	lr
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017c0:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 80017c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017c8:	20000270 	.word	0x20000270

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_Init+0x28>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x28>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f923 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff ff02 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f93b 	bl	8001a96 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f903 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000001c 	.word	0x2000001c
 8001854:	20000024 	.word	0x20000024
 8001858:	20000020 	.word	0x20000020

0800185c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_IncTick+0x1c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_IncTick+0x20>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	@ (800187c <HAL_IncTick+0x20>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000024 	.word	0x20000024
 800187c:	20000124 	.word	0x20000124

08001880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b02      	ldr	r3, [pc, #8]	@ (8001890 <HAL_GetTick+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000124 	.word	0x20000124

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4906      	ldr	r1, [pc, #24]	@ (800192c <__NVIC_EnableIRQ+0x34>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	@ (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff90 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff2d 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff42 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff35 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	@ 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e161      	b.n	8001d88 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8150 	bne.w	8001d82 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a97      	ldr	r2, [pc, #604]	@ (8001d44 <HAL_GPIO_Init+0x294>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d05e      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001aec:	4a95      	ldr	r2, [pc, #596]	@ (8001d44 <HAL_GPIO_Init+0x294>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d875      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001af2:	4a95      	ldr	r2, [pc, #596]	@ (8001d48 <HAL_GPIO_Init+0x298>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d058      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001af8:	4a93      	ldr	r2, [pc, #588]	@ (8001d48 <HAL_GPIO_Init+0x298>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d86f      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001afe:	4a93      	ldr	r2, [pc, #588]	@ (8001d4c <HAL_GPIO_Init+0x29c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d052      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b04:	4a91      	ldr	r2, [pc, #580]	@ (8001d4c <HAL_GPIO_Init+0x29c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d869      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b0a:	4a91      	ldr	r2, [pc, #580]	@ (8001d50 <HAL_GPIO_Init+0x2a0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04c      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b10:	4a8f      	ldr	r2, [pc, #572]	@ (8001d50 <HAL_GPIO_Init+0x2a0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d863      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b16:	4a8f      	ldr	r2, [pc, #572]	@ (8001d54 <HAL_GPIO_Init+0x2a4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d046      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b1c:	4a8d      	ldr	r2, [pc, #564]	@ (8001d54 <HAL_GPIO_Init+0x2a4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d85d      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b22:	2b12      	cmp	r3, #18
 8001b24:	d82a      	bhi.n	8001b7c <HAL_GPIO_Init+0xcc>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d859      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b30 <HAL_GPIO_Init+0x80>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b97 	.word	0x08001b97
 8001b3c:	08001bd9 	.word	0x08001bd9
 8001b40:	08001bdf 	.word	0x08001bdf
 8001b44:	08001bdf 	.word	0x08001bdf
 8001b48:	08001bdf 	.word	0x08001bdf
 8001b4c:	08001bdf 	.word	0x08001bdf
 8001b50:	08001bdf 	.word	0x08001bdf
 8001b54:	08001bdf 	.word	0x08001bdf
 8001b58:	08001bdf 	.word	0x08001bdf
 8001b5c:	08001bdf 	.word	0x08001bdf
 8001b60:	08001bdf 	.word	0x08001bdf
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bdf 	.word	0x08001bdf
 8001b6c:	08001bdf 	.word	0x08001bdf
 8001b70:	08001bdf 	.word	0x08001bdf
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001ba1 	.word	0x08001ba1
 8001b7c:	4a76      	ldr	r2, [pc, #472]	@ (8001d58 <HAL_GPIO_Init+0x2a8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b82:	e02c      	b.n	8001bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e029      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	3304      	adds	r3, #4
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e024      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e01f      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	330c      	adds	r3, #12
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e01a      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e013      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	611a      	str	r2, [r3, #16]
          break;
 8001bca:	e009      	b.n	8001be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	615a      	str	r2, [r3, #20]
          break;
 8001bd6:	e003      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          break;
 8001bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	@ 0xff
 8001be4:	d801      	bhi.n	8001bea <HAL_GPIO_Init+0x13a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_Init+0x13e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3304      	adds	r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	@ 0xff
 8001bf4:	d802      	bhi.n	8001bfc <HAL_GPIO_Init+0x14c>
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x152>
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	3b08      	subs	r3, #8
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	210f      	movs	r1, #15
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80a9 	beq.w	8001d82 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c30:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <HAL_GPIO_Init+0x2ac>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a49      	ldr	r2, [pc, #292]	@ (8001d5c <HAL_GPIO_Init+0x2ac>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_GPIO_Init+0x2ac>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c48:	4a45      	ldr	r2, [pc, #276]	@ (8001d60 <HAL_GPIO_Init+0x2b0>)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d64 <HAL_GPIO_Init+0x2b4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <HAL_GPIO_Init+0x2b8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d6c <HAL_GPIO_Init+0x2bc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ca2:	492f      	ldr	r1, [pc, #188]	@ (8001d60 <HAL_GPIO_Init+0x2b0>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	492b      	ldr	r1, [pc, #172]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cca:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4927      	ldr	r1, [pc, #156]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4921      	ldr	r1, [pc, #132]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	491d      	ldr	r1, [pc, #116]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4917      	ldr	r1, [pc, #92]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4913      	ldr	r1, [pc, #76]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01f      	beq.n	8001d74 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	490d      	ldr	r1, [pc, #52]	@ (8001d70 <HAL_GPIO_Init+0x2c0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e01f      	b.n	8001d82 <HAL_GPIO_Init+0x2d2>
 8001d42:	bf00      	nop
 8001d44:	10320000 	.word	0x10320000
 8001d48:	10310000 	.word	0x10310000
 8001d4c:	10220000 	.word	0x10220000
 8001d50:	10210000 	.word	0x10210000
 8001d54:	10120000 	.word	0x10120000
 8001d58:	10110000 	.word	0x10110000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4909      	ldr	r1, [pc, #36]	@ (8001da4 <HAL_GPIO_Init+0x2f4>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f47f ae96 	bne.w	8001ac4 <HAL_GPIO_Init+0x14>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	372c      	adds	r7, #44	@ 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40010400 	.word	0x40010400

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de6:	787b      	ldrb	r3, [r7, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df2:	e003      	b.n	8001dfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	041a      	lsls	r2, r3, #16
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	400b      	ands	r3, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e272      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	4b92      	ldr	r3, [pc, #584]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d112      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
 8001e70:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x12c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d168      	bne.n	8001f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e24c      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	4b80      	ldr	r3, [pc, #512]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7f      	ldr	r2, [pc, #508]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e02e      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7a      	ldr	r2, [pc, #488]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a77      	ldr	r2, [pc, #476]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xbc>
 8001eda:	4b72      	ldr	r3, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a71      	ldr	r2, [pc, #452]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a67      	ldr	r2, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fcb4 	bl	8001880 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fcb0 	bl	8001880 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e200      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe4>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fca0 	bl	8001880 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fc9c 	bl	8001880 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ec      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x10c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7e:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1c0      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4939      	ldr	r1, [pc, #228]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fc55 	bl	8001880 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff fc51 	bl	8001880 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1a1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4927      	ldr	r1, [pc, #156]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fc34 	bl	8001880 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff fc30 	bl	8001880 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e180      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03a      	beq.n	80020bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7ff fc14 	bl	8001880 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fc10 	bl	8001880 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e160      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 fa9c 	bl	80025b8 <RCC_Delay>
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7ff fbfa 	bl	8001880 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff fbf6 	bl	8001880 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d908      	bls.n	80020b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e146      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	42420000 	.word	0x42420000
 80020ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b92      	ldr	r3, [pc, #584]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e9      	bne.n	8002090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a6 	beq.w	8002216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b8b      	ldr	r3, [pc, #556]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a87      	ldr	r2, [pc, #540]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b82      	ldr	r3, [pc, #520]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7e      	ldr	r2, [pc, #504]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7ff fbb7 	bl	8001880 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff fbb3 	bl	8001880 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	@ 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e103      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 800213c:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x334>
 8002152:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a69      	ldr	r2, [pc, #420]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a66      	ldr	r2, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x356>
 8002174:	4b61      	ldr	r3, [pc, #388]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	4b5e      	ldr	r3, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800218e:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a5a      	ldr	r2, [pc, #360]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fb67 	bl	8001880 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff fb63 	bl	8001880 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b4b      	ldr	r3, [pc, #300]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x37e>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff fb51 	bl	8001880 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fb4d 	bl	8001880 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b3c      	ldr	r3, [pc, #240]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d061      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d146      	bne.n	80022c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fb21 	bl	8001880 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff fb1d 	bl	8001880 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e06d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4921      	ldr	r1, [pc, #132]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a19      	ldr	r1, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	430b      	orrs	r3, r1
 800228e:	491b      	ldr	r1, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff faf1 	bl	8001880 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff faed 	bl	8001880 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
 80022c0:	e035      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fada 	bl	8001880 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff fad6 	bl	8001880 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e026      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x498>
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e019      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
 8002304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_OscConfig+0x500>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d0      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b6a      	ldr	r3, [pc, #424]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b67      	ldr	r3, [pc, #412]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4965      	ldr	r1, [pc, #404]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d040      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e073      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b39      	ldr	r3, [pc, #228]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4936      	ldr	r1, [pc, #216]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7ff fa28 	bl	8001880 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff fa24 	bl	8001880 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e053      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4922      	ldr	r1, [pc, #136]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1cc>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f986 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	08003058 	.word	0x08003058
 8002508:	2000001c 	.word	0x2000001c
 800250c:	20000020 	.word	0x20000020

08002510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x30>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x36>
 800253e:	e027      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	e027      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0c5b      	lsrs	r3, r3, #17
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	4a11      	ldr	r2, [pc, #68]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e004      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	693b      	ldr	r3, [r7, #16]
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08003068 	.word	0x08003068
 80025b0:	08003078 	.word	0x08003078
 80025b4:	003d0900 	.word	0x003d0900

080025b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <RCC_Delay+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <RCC_Delay+0x38>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d4:	bf00      	nop
  }
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <RCC_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	2000001c 	.word	0x2000001c
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff f81c 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 fa56 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e035      	b.n	8002718 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <HAL_TIM_Base_Start_IT+0x90>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x4e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x4e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_TIM_Base_Start_IT+0x94>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d111      	bne.n	8002706 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d010      	beq.n	8002716 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	e007      	b.n	8002716 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d020      	beq.n	8002790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f998 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f98b 	bl	8002a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f99a 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0204 	mvn.w	r2, #4
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f972 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f965 	bl	8002a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f974 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d020      	beq.n	8002828 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0208 	mvn.w	r2, #8
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2204      	movs	r2, #4
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f94c 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f93f 	bl	8002a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f94e 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d020      	beq.n	8002874 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01b      	beq.n	8002874 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0210 	mvn.w	r2, #16
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2208      	movs	r2, #8
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f926 	bl	8002aac <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f919 	bl	8002a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f928 	bl	8002abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0201 	mvn.w	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fd3c 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa6f 	bl	8002d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8f8 	bl	8002ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0220 	mvn.w	r2, #32
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa42 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIM_ConfigClockSource+0x1c>
 8002924:	2302      	movs	r3, #2
 8002926:	e0b4      	b.n	8002a92 <HAL_TIM_ConfigClockSource+0x186>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800294e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002960:	d03e      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002966:	f200 8087 	bhi.w	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296e:	f000 8086 	beq.w	8002a7e <HAL_TIM_ConfigClockSource+0x172>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	d87f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b70      	cmp	r3, #112	@ 0x70
 800297a:	d01a      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0xa6>
 800297c:	2b70      	cmp	r3, #112	@ 0x70
 800297e:	d87b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b60      	cmp	r3, #96	@ 0x60
 8002982:	d050      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x11a>
 8002984:	2b60      	cmp	r3, #96	@ 0x60
 8002986:	d877      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b50      	cmp	r3, #80	@ 0x50
 800298a:	d03c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xfa>
 800298c:	2b50      	cmp	r3, #80	@ 0x50
 800298e:	d873      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d058      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x13a>
 8002994:	2b40      	cmp	r3, #64	@ 0x40
 8002996:	d86f      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b30      	cmp	r3, #48	@ 0x30
 800299a:	d064      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b30      	cmp	r3, #48	@ 0x30
 800299e:	d86b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d060      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d867      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d05a      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	e062      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c2:	f000 f96a 	bl	8002c9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
      break;
 80029de:	e04f      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f0:	f000 f953 	bl	8002c9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a02:	609a      	str	r2, [r3, #8]
      break;
 8002a04:	e03c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 f8ca 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2150      	movs	r1, #80	@ 0x50
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f921 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e02c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f8e8 	bl	8002c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2160      	movs	r1, #96	@ 0x60
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f911 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e01c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	461a      	mov	r2, r3
 8002a54:	f000 f8aa 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2140      	movs	r1, #64	@ 0x40
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f901 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a64:	e00c      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f000 f8f8 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a76:	e003      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e000      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <TIM_Base_SetConfig+0xc0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0x28>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0x28>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a28      	ldr	r2, [pc, #160]	@ (8002ba8 <TIM_Base_SetConfig+0xc4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <TIM_Base_SetConfig+0xc0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x52>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x52>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <TIM_Base_SetConfig+0xc4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <TIM_Base_SetConfig+0xc0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0210 	bic.w	r2, r3, #16
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e041      	b.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3c:	d004      	beq.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a10      	ldr	r2, [pc, #64]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40000400 	.word	0x40000400

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <malloc>:
 8002dac:	4b02      	ldr	r3, [pc, #8]	@ (8002db8 <malloc+0xc>)
 8002dae:	4601      	mov	r1, r0
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f000 b82d 	b.w	8002e10 <_malloc_r>
 8002db6:	bf00      	nop
 8002db8:	20000028 	.word	0x20000028

08002dbc <free>:
 8002dbc:	4b02      	ldr	r3, [pc, #8]	@ (8002dc8 <free+0xc>)
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f000 b8f5 	b.w	8002fb0 <_free_r>
 8002dc6:	bf00      	nop
 8002dc8:	20000028 	.word	0x20000028

08002dcc <sbrk_aligned>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	4e0f      	ldr	r6, [pc, #60]	@ (8002e0c <sbrk_aligned+0x40>)
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	6831      	ldr	r1, [r6, #0]
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	b911      	cbnz	r1, 8002dde <sbrk_aligned+0x12>
 8002dd8:	f000 f8ae 	bl	8002f38 <_sbrk_r>
 8002ddc:	6030      	str	r0, [r6, #0]
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f8a9 	bl	8002f38 <_sbrk_r>
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	d103      	bne.n	8002df2 <sbrk_aligned+0x26>
 8002dea:	f04f 34ff 	mov.w	r4, #4294967295
 8002dee:	4620      	mov	r0, r4
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	1cc4      	adds	r4, r0, #3
 8002df4:	f024 0403 	bic.w	r4, r4, #3
 8002df8:	42a0      	cmp	r0, r4
 8002dfa:	d0f8      	beq.n	8002dee <sbrk_aligned+0x22>
 8002dfc:	1a21      	subs	r1, r4, r0
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f89a 	bl	8002f38 <_sbrk_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d1f2      	bne.n	8002dee <sbrk_aligned+0x22>
 8002e08:	e7ef      	b.n	8002dea <sbrk_aligned+0x1e>
 8002e0a:	bf00      	nop
 8002e0c:	20000128 	.word	0x20000128

08002e10 <_malloc_r>:
 8002e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e14:	1ccd      	adds	r5, r1, #3
 8002e16:	f025 0503 	bic.w	r5, r5, #3
 8002e1a:	3508      	adds	r5, #8
 8002e1c:	2d0c      	cmp	r5, #12
 8002e1e:	bf38      	it	cc
 8002e20:	250c      	movcc	r5, #12
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	4606      	mov	r6, r0
 8002e26:	db01      	blt.n	8002e2c <_malloc_r+0x1c>
 8002e28:	42a9      	cmp	r1, r5
 8002e2a:	d904      	bls.n	8002e36 <_malloc_r+0x26>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	6033      	str	r3, [r6, #0]
 8002e30:	2000      	movs	r0, #0
 8002e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f0c <_malloc_r+0xfc>
 8002e3a:	f000 f869 	bl	8002f10 <__malloc_lock>
 8002e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e42:	461c      	mov	r4, r3
 8002e44:	bb44      	cbnz	r4, 8002e98 <_malloc_r+0x88>
 8002e46:	4629      	mov	r1, r5
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f7ff ffbf 	bl	8002dcc <sbrk_aligned>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	4604      	mov	r4, r0
 8002e52:	d158      	bne.n	8002f06 <_malloc_r+0xf6>
 8002e54:	f8d8 4000 	ldr.w	r4, [r8]
 8002e58:	4627      	mov	r7, r4
 8002e5a:	2f00      	cmp	r7, #0
 8002e5c:	d143      	bne.n	8002ee6 <_malloc_r+0xd6>
 8002e5e:	2c00      	cmp	r4, #0
 8002e60:	d04b      	beq.n	8002efa <_malloc_r+0xea>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	4639      	mov	r1, r7
 8002e66:	4630      	mov	r0, r6
 8002e68:	eb04 0903 	add.w	r9, r4, r3
 8002e6c:	f000 f864 	bl	8002f38 <_sbrk_r>
 8002e70:	4581      	cmp	r9, r0
 8002e72:	d142      	bne.n	8002efa <_malloc_r+0xea>
 8002e74:	6821      	ldr	r1, [r4, #0]
 8002e76:	4630      	mov	r0, r6
 8002e78:	1a6d      	subs	r5, r5, r1
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	f7ff ffa6 	bl	8002dcc <sbrk_aligned>
 8002e80:	3001      	adds	r0, #1
 8002e82:	d03a      	beq.n	8002efa <_malloc_r+0xea>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	442b      	add	r3, r5
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	bb62      	cbnz	r2, 8002eec <_malloc_r+0xdc>
 8002e92:	f8c8 7000 	str.w	r7, [r8]
 8002e96:	e00f      	b.n	8002eb8 <_malloc_r+0xa8>
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	1b52      	subs	r2, r2, r5
 8002e9c:	d420      	bmi.n	8002ee0 <_malloc_r+0xd0>
 8002e9e:	2a0b      	cmp	r2, #11
 8002ea0:	d917      	bls.n	8002ed2 <_malloc_r+0xc2>
 8002ea2:	1961      	adds	r1, r4, r5
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	6025      	str	r5, [r4, #0]
 8002ea8:	bf18      	it	ne
 8002eaa:	6059      	strne	r1, [r3, #4]
 8002eac:	6863      	ldr	r3, [r4, #4]
 8002eae:	bf08      	it	eq
 8002eb0:	f8c8 1000 	streq.w	r1, [r8]
 8002eb4:	5162      	str	r2, [r4, r5]
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f000 f82f 	bl	8002f1c <__malloc_unlock>
 8002ebe:	f104 000b 	add.w	r0, r4, #11
 8002ec2:	1d23      	adds	r3, r4, #4
 8002ec4:	f020 0007 	bic.w	r0, r0, #7
 8002ec8:	1ac2      	subs	r2, r0, r3
 8002eca:	bf1c      	itt	ne
 8002ecc:	1a1b      	subne	r3, r3, r0
 8002ece:	50a3      	strne	r3, [r4, r2]
 8002ed0:	e7af      	b.n	8002e32 <_malloc_r+0x22>
 8002ed2:	6862      	ldr	r2, [r4, #4]
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	bf0c      	ite	eq
 8002ed8:	f8c8 2000 	streq.w	r2, [r8]
 8002edc:	605a      	strne	r2, [r3, #4]
 8002ede:	e7eb      	b.n	8002eb8 <_malloc_r+0xa8>
 8002ee0:	4623      	mov	r3, r4
 8002ee2:	6864      	ldr	r4, [r4, #4]
 8002ee4:	e7ae      	b.n	8002e44 <_malloc_r+0x34>
 8002ee6:	463c      	mov	r4, r7
 8002ee8:	687f      	ldr	r7, [r7, #4]
 8002eea:	e7b6      	b.n	8002e5a <_malloc_r+0x4a>
 8002eec:	461a      	mov	r2, r3
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	42a3      	cmp	r3, r4
 8002ef2:	d1fb      	bne.n	8002eec <_malloc_r+0xdc>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6053      	str	r3, [r2, #4]
 8002ef8:	e7de      	b.n	8002eb8 <_malloc_r+0xa8>
 8002efa:	230c      	movs	r3, #12
 8002efc:	4630      	mov	r0, r6
 8002efe:	6033      	str	r3, [r6, #0]
 8002f00:	f000 f80c 	bl	8002f1c <__malloc_unlock>
 8002f04:	e794      	b.n	8002e30 <_malloc_r+0x20>
 8002f06:	6005      	str	r5, [r0, #0]
 8002f08:	e7d6      	b.n	8002eb8 <_malloc_r+0xa8>
 8002f0a:	bf00      	nop
 8002f0c:	2000012c 	.word	0x2000012c

08002f10 <__malloc_lock>:
 8002f10:	4801      	ldr	r0, [pc, #4]	@ (8002f18 <__malloc_lock+0x8>)
 8002f12:	f000 b84b 	b.w	8002fac <__retarget_lock_acquire_recursive>
 8002f16:	bf00      	nop
 8002f18:	2000026c 	.word	0x2000026c

08002f1c <__malloc_unlock>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	@ (8002f24 <__malloc_unlock+0x8>)
 8002f1e:	f000 b846 	b.w	8002fae <__retarget_lock_release_recursive>
 8002f22:	bf00      	nop
 8002f24:	2000026c 	.word	0x2000026c

08002f28 <memset>:
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <_sbrk_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	4d05      	ldr	r5, [pc, #20]	@ (8002f54 <_sbrk_r+0x1c>)
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4608      	mov	r0, r1
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	f7fe fbe2 	bl	800170c <_sbrk>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d102      	bne.n	8002f52 <_sbrk_r+0x1a>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	b103      	cbz	r3, 8002f52 <_sbrk_r+0x1a>
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	20000268 	.word	0x20000268

08002f58 <__errno>:
 8002f58:	4b01      	ldr	r3, [pc, #4]	@ (8002f60 <__errno+0x8>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000028 	.word	0x20000028

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	2600      	movs	r6, #0
 8002f68:	4d0c      	ldr	r5, [pc, #48]	@ (8002f9c <__libc_init_array+0x38>)
 8002f6a:	4c0d      	ldr	r4, [pc, #52]	@ (8002fa0 <__libc_init_array+0x3c>)
 8002f6c:	1b64      	subs	r4, r4, r5
 8002f6e:	10a4      	asrs	r4, r4, #2
 8002f70:	42a6      	cmp	r6, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	f000 f864 	bl	8003040 <_init>
 8002f78:	2600      	movs	r6, #0
 8002f7a:	4d0a      	ldr	r5, [pc, #40]	@ (8002fa4 <__libc_init_array+0x40>)
 8002f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fa8 <__libc_init_array+0x44>)
 8002f7e:	1b64      	subs	r4, r4, r5
 8002f80:	10a4      	asrs	r4, r4, #2
 8002f82:	42a6      	cmp	r6, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8c:	4798      	blx	r3
 8002f8e:	3601      	adds	r6, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f96:	4798      	blx	r3
 8002f98:	3601      	adds	r6, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	0800307c 	.word	0x0800307c
 8002fa0:	0800307c 	.word	0x0800307c
 8002fa4:	0800307c 	.word	0x0800307c
 8002fa8:	08003080 	.word	0x08003080

08002fac <__retarget_lock_acquire_recursive>:
 8002fac:	4770      	bx	lr

08002fae <__retarget_lock_release_recursive>:
 8002fae:	4770      	bx	lr

08002fb0 <_free_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d040      	beq.n	800303a <_free_r+0x8a>
 8002fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fbc:	1f0c      	subs	r4, r1, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfb8      	it	lt
 8002fc2:	18e4      	addlt	r4, r4, r3
 8002fc4:	f7ff ffa4 	bl	8002f10 <__malloc_lock>
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800303c <_free_r+0x8c>)
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	b933      	cbnz	r3, 8002fdc <_free_r+0x2c>
 8002fce:	6063      	str	r3, [r4, #4]
 8002fd0:	6014      	str	r4, [r2, #0]
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fd8:	f7ff bfa0 	b.w	8002f1c <__malloc_unlock>
 8002fdc:	42a3      	cmp	r3, r4
 8002fde:	d908      	bls.n	8002ff2 <_free_r+0x42>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	1821      	adds	r1, r4, r0
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	bf01      	itttt	eq
 8002fe8:	6819      	ldreq	r1, [r3, #0]
 8002fea:	685b      	ldreq	r3, [r3, #4]
 8002fec:	1809      	addeq	r1, r1, r0
 8002fee:	6021      	streq	r1, [r4, #0]
 8002ff0:	e7ed      	b.n	8002fce <_free_r+0x1e>
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b10b      	cbz	r3, 8002ffc <_free_r+0x4c>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d9fa      	bls.n	8002ff2 <_free_r+0x42>
 8002ffc:	6811      	ldr	r1, [r2, #0]
 8002ffe:	1850      	adds	r0, r2, r1
 8003000:	42a0      	cmp	r0, r4
 8003002:	d10b      	bne.n	800301c <_free_r+0x6c>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	4401      	add	r1, r0
 8003008:	1850      	adds	r0, r2, r1
 800300a:	4283      	cmp	r3, r0
 800300c:	6011      	str	r1, [r2, #0]
 800300e:	d1e0      	bne.n	8002fd2 <_free_r+0x22>
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4408      	add	r0, r1
 8003016:	6010      	str	r0, [r2, #0]
 8003018:	6053      	str	r3, [r2, #4]
 800301a:	e7da      	b.n	8002fd2 <_free_r+0x22>
 800301c:	d902      	bls.n	8003024 <_free_r+0x74>
 800301e:	230c      	movs	r3, #12
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	e7d6      	b.n	8002fd2 <_free_r+0x22>
 8003024:	6820      	ldr	r0, [r4, #0]
 8003026:	1821      	adds	r1, r4, r0
 8003028:	428b      	cmp	r3, r1
 800302a:	bf01      	itttt	eq
 800302c:	6819      	ldreq	r1, [r3, #0]
 800302e:	685b      	ldreq	r3, [r3, #4]
 8003030:	1809      	addeq	r1, r1, r0
 8003032:	6021      	streq	r1, [r4, #0]
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6054      	str	r4, [r2, #4]
 8003038:	e7cb      	b.n	8002fd2 <_free_r+0x22>
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	2000012c 	.word	0x2000012c

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
