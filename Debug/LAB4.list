
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000040bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080030c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000078  08003138  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003138  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e1c  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205f  00000000  00000000  0000debd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081e  00000000  00000000  000109f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018414  00000000  00000000  0001120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e88f  00000000  00000000  00029622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b59  00000000  00000000  00037eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bda0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  000bda50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000c0708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800307c 	.word	0x0800307c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800307c 	.word	0x0800307c

0800014c <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};
uint8_t count = 0;
void getKeyinput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (count > 0 ) count--;
 8000150:	4b1f      	ldr	r3, [pc, #124]	@ (80001d0 <getKeyinput+0x84>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d005      	beq.n	8000164 <getKeyinput+0x18>
 8000158:	4b1d      	ldr	r3, [pc, #116]	@ (80001d0 <getKeyinput+0x84>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b1b      	ldr	r3, [pc, #108]	@ (80001d0 <getKeyinput+0x84>)
 8000162:	701a      	strb	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == 0)){
 8000164:	4b1a      	ldr	r3, [pc, #104]	@ (80001d0 <getKeyinput+0x84>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d10c      	bne.n	8000186 <getKeyinput+0x3a>
 800016c:	2101      	movs	r1, #1
 800016e:	4819      	ldr	r0, [pc, #100]	@ (80001d4 <getKeyinput+0x88>)
 8000170:	f001 fe38 	bl	8001de4 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 800017a:	4b17      	ldr	r3, [pc, #92]	@ (80001d8 <getKeyinput+0x8c>)
 800017c:	2201      	movs	r2, #1
 800017e:	601a      	str	r2, [r3, #0]
		count = 20;
 8000180:	4b13      	ldr	r3, [pc, #76]	@ (80001d0 <getKeyinput+0x84>)
 8000182:	2214      	movs	r2, #20
 8000184:	701a      	strb	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == 0)){
 8000186:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <getKeyinput+0x84>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10c      	bne.n	80001a8 <getKeyinput+0x5c>
 800018e:	2102      	movs	r1, #2
 8000190:	4810      	ldr	r0, [pc, #64]	@ (80001d4 <getKeyinput+0x88>)
 8000192:	f001 fe27 	bl	8001de4 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d105      	bne.n	80001a8 <getKeyinput+0x5c>
		buttonFlag[1] = 1;
 800019c:	4b0e      	ldr	r3, [pc, #56]	@ (80001d8 <getKeyinput+0x8c>)
 800019e:	2201      	movs	r2, #1
 80001a0:	605a      	str	r2, [r3, #4]
		count = 20;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <getKeyinput+0x84>)
 80001a4:	2214      	movs	r2, #20
 80001a6:	701a      	strb	r2, [r3, #0]
	}
	// ----- PROCESS BUTTON 3 -----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == 0)){
 80001a8:	4b09      	ldr	r3, [pc, #36]	@ (80001d0 <getKeyinput+0x84>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d10c      	bne.n	80001ca <getKeyinput+0x7e>
 80001b0:	2104      	movs	r1, #4
 80001b2:	4808      	ldr	r0, [pc, #32]	@ (80001d4 <getKeyinput+0x88>)
 80001b4:	f001 fe16 	bl	8001de4 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d105      	bne.n	80001ca <getKeyinput+0x7e>
		buttonFlag[2] = 1;
 80001be:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <getKeyinput+0x8c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	609a      	str	r2, [r3, #8]
		count = 20;
 80001c4:	4b02      	ldr	r3, [pc, #8]	@ (80001d0 <getKeyinput+0x84>)
 80001c6:	2214      	movs	r2, #20
 80001c8:	701a      	strb	r2, [r3, #0]
	}

}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	20000094 	.word	0x20000094

080001dc <isButtonPress>:
int isButtonPress(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <isButtonPress+0x30>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d106      	bne.n	80001fe <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80001f0:	4a06      	ldr	r2, [pc, #24]	@ (800020c <isButtonPress+0x30>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2100      	movs	r1, #0
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e000      	b.n	8000200 <isButtonPress+0x24>
	}
	return 0;
 80001fe:	2300      	movs	r3, #0
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000094 	.word	0x20000094

08000210 <fsm_auto_run>:
 */

#include "fsm_auto.h"

void (*nextTask_Switch_State)() = NULL;
void fsm_auto_run(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 8000214:	4b87      	ldr	r3, [pc, #540]	@ (8000434 <fsm_auto_run+0x224>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b04      	cmp	r3, #4
 800021a:	f200 8109 	bhi.w	8000430 <fsm_auto_run+0x220>
 800021e:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <fsm_auto_run+0x14>)
 8000220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000224:	08000239 	.word	0x08000239
 8000228:	080002c1 	.word	0x080002c1
 800022c:	0800038d 	.word	0x0800038d
 8000230:	08000327 	.word	0x08000327
 8000234:	0800038d 	.word	0x0800038d
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 8000238:	f000 ff3e 	bl	80010b8 <single_LED_off>
			count0 = (time_red_green + time_red_yellow)/1000;
 800023c:	4b7e      	ldr	r3, [pc, #504]	@ (8000438 <fsm_auto_run+0x228>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b7e      	ldr	r3, [pc, #504]	@ (800043c <fsm_auto_run+0x22c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4413      	add	r3, r2
 8000246:	4a7e      	ldr	r2, [pc, #504]	@ (8000440 <fsm_auto_run+0x230>)
 8000248:	fb82 1203 	smull	r1, r2, r2, r3
 800024c:	1192      	asrs	r2, r2, #6
 800024e:	17db      	asrs	r3, r3, #31
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	4a7c      	ldr	r2, [pc, #496]	@ (8000444 <fsm_auto_run+0x234>)
 8000254:	6013      	str	r3, [r2, #0]
			count1 = time_red_green/1000;
 8000256:	4b78      	ldr	r3, [pc, #480]	@ (8000438 <fsm_auto_run+0x228>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a79      	ldr	r2, [pc, #484]	@ (8000440 <fsm_auto_run+0x230>)
 800025c:	fb82 1203 	smull	r1, r2, r2, r3
 8000260:	1192      	asrs	r2, r2, #6
 8000262:	17db      	asrs	r3, r3, #31
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	4a78      	ldr	r2, [pc, #480]	@ (8000448 <fsm_auto_run+0x238>)
 8000268:	6013      	str	r3, [r2, #0]
			updateClockBuffer(count0, count1);
 800026a:	4b76      	ldr	r3, [pc, #472]	@ (8000444 <fsm_auto_run+0x234>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a76      	ldr	r2, [pc, #472]	@ (8000448 <fsm_auto_run+0x238>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fee3 	bl	8001040 <updateClockBuffer>
			status = auto_red_green;
 800027a:	4b6e      	ldr	r3, [pc, #440]	@ (8000434 <fsm_auto_run+0x224>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	4871      	ldr	r0, [pc, #452]	@ (800044c <fsm_auto_run+0x23c>)
 8000286:	f001 fdc4 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800028a:	2200      	movs	r2, #0
 800028c:	2140      	movs	r1, #64	@ 0x40
 800028e:	486f      	ldr	r0, [pc, #444]	@ (800044c <fsm_auto_run+0x23c>)
 8000290:	f001 fdbf 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	486c      	ldr	r0, [pc, #432]	@ (800044c <fsm_auto_run+0x23c>)
 800029a:	f001 fdba 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a4:	4869      	ldr	r0, [pc, #420]	@ (800044c <fsm_auto_run+0x23c>)
 80002a6:	f001 fdb4 	bl	8001e12 <HAL_GPIO_WritePin>
			SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 80002aa:	4b63      	ldr	r3, [pc, #396]	@ (8000438 <fsm_auto_run+0x228>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2200      	movs	r2, #0
 80002b0:	4619      	mov	r1, r3
 80002b2:	4867      	ldr	r0, [pc, #412]	@ (8000450 <fsm_auto_run+0x240>)
 80002b4:	f001 f874 	bl	80013a0 <SCH_Add_Task>
			nextTask_Switch_State = fsm_switch_state_auto_red_yellow;
 80002b8:	4b66      	ldr	r3, [pc, #408]	@ (8000454 <fsm_auto_run+0x244>)
 80002ba:	4a65      	ldr	r2, [pc, #404]	@ (8000450 <fsm_auto_run+0x240>)
 80002bc:	601a      	str	r2, [r3, #0]
			break;
 80002be:	e06a      	b.n	8000396 <fsm_auto_run+0x186>
		case auto_red_green:
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ff8b 	bl	80001dc <isButtonPress>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d161      	bne.n	8000390 <fsm_auto_run+0x180>
				SCH_Delete_Task(nextTask_Switch_State); // DELETE NEXT STATE OF AUTO MODE
 80002cc:	4b61      	ldr	r3, [pc, #388]	@ (8000454 <fsm_auto_run+0x244>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 f949 	bl	8001568 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 80002d6:	4860      	ldr	r0, [pc, #384]	@ (8000458 <fsm_auto_run+0x248>)
 80002d8:	f001 f946 	bl	8001568 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 80002dc:	485f      	ldr	r0, [pc, #380]	@ (800045c <fsm_auto_run+0x24c>)
 80002de:	f001 f943 	bl	8001568 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 100, 10);
 80002e2:	220a      	movs	r2, #10
 80002e4:	2164      	movs	r1, #100	@ 0x64
 80002e6:	485e      	ldr	r0, [pc, #376]	@ (8000460 <fsm_auto_run+0x250>)
 80002e8:	f001 f85a 	bl	80013a0 <SCH_Add_Task>
				status = manual_red_green;
 80002ec:	4b51      	ldr	r3, [pc, #324]	@ (8000434 <fsm_auto_run+0x224>)
 80002ee:	2205      	movs	r2, #5
 80002f0:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80002f2:	f000 fc5f 	bl	8000bb4 <Diable_Led>
				single_LED_off();
 80002f6:	f000 fedf 	bl	80010b8 <single_LED_off>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2108      	movs	r1, #8
 80002fe:	4853      	ldr	r0, [pc, #332]	@ (800044c <fsm_auto_run+0x23c>)
 8000300:	f001 fd87 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800030a:	4850      	ldr	r0, [pc, #320]	@ (800044c <fsm_auto_run+0x23c>)
 800030c:	f001 fd81 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2140      	movs	r1, #64	@ 0x40
 8000314:	484d      	ldr	r0, [pc, #308]	@ (800044c <fsm_auto_run+0x23c>)
 8000316:	f001 fd7c 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	484b      	ldr	r0, [pc, #300]	@ (800044c <fsm_auto_run+0x23c>)
 8000320:	f001 fd77 	bl	8001e12 <HAL_GPIO_WritePin>
				return;
 8000324:	e085      	b.n	8000432 <fsm_auto_run+0x222>
			break;
		case auto_red_yellow:
			break;
		case auto_green_red:
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 8000326:	2001      	movs	r0, #1
 8000328:	f7ff ff58 	bl	80001dc <isButtonPress>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	d130      	bne.n	8000394 <fsm_auto_run+0x184>
				SCH_Delete_Task(nextTask_Switch_State); // DELETE NEXT STATE OF AUTO MODE
 8000332:	4b48      	ldr	r3, [pc, #288]	@ (8000454 <fsm_auto_run+0x244>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f916 	bl	8001568 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 800033c:	4846      	ldr	r0, [pc, #280]	@ (8000458 <fsm_auto_run+0x248>)
 800033e:	f001 f913 	bl	8001568 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 8000342:	4846      	ldr	r0, [pc, #280]	@ (800045c <fsm_auto_run+0x24c>)
 8000344:	f001 f910 	bl	8001568 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 10, 10);
 8000348:	220a      	movs	r2, #10
 800034a:	210a      	movs	r1, #10
 800034c:	4844      	ldr	r0, [pc, #272]	@ (8000460 <fsm_auto_run+0x250>)
 800034e:	f001 f827 	bl	80013a0 <SCH_Add_Task>
				status = manual_green_red;
 8000352:	4b38      	ldr	r3, [pc, #224]	@ (8000434 <fsm_auto_run+0x224>)
 8000354:	2206      	movs	r2, #6
 8000356:	601a      	str	r2, [r3, #0]
				Diable_Led();
 8000358:	f000 fc2c 	bl	8000bb4 <Diable_Led>
				single_LED_off();
 800035c:	f000 feac 	bl	80010b8 <single_LED_off>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	@ 0x40
 8000364:	4839      	ldr	r0, [pc, #228]	@ (800044c <fsm_auto_run+0x23c>)
 8000366:	f001 fd54 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2120      	movs	r1, #32
 800036e:	4837      	ldr	r0, [pc, #220]	@ (800044c <fsm_auto_run+0x23c>)
 8000370:	f001 fd4f 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2108      	movs	r1, #8
 8000378:	4834      	ldr	r0, [pc, #208]	@ (800044c <fsm_auto_run+0x23c>)
 800037a:	f001 fd4a 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000384:	4831      	ldr	r0, [pc, #196]	@ (800044c <fsm_auto_run+0x23c>)
 8000386:	f001 fd44 	bl	8001e12 <HAL_GPIO_WritePin>
				return;
 800038a:	e052      	b.n	8000432 <fsm_auto_run+0x222>
			break;
 800038c:	bf00      	nop
 800038e:	e002      	b.n	8000396 <fsm_auto_run+0x186>
			break;
 8000390:	bf00      	nop
 8000392:	e000      	b.n	8000396 <fsm_auto_run+0x186>
			}
			break;
 8000394:	bf00      	nop
			break;
		default: // ----- MANUAL MODE & SETTING MODE & SLOW MODE---------
			return;
	}
	// -------SWITCHING SLOW MODE ---------------
	if(isButtonPress(0) == 1){
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff ff20 	bl	80001dc <isButtonPress>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d115      	bne.n	80003ce <fsm_auto_run+0x1be>
		SCH_Delete_Task(nextTask_Switch_State); // DELETE TASK SWITCH STATE
 80003a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <fsm_auto_run+0x244>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f8de 	bl	8001568 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 80003ac:	482a      	ldr	r0, [pc, #168]	@ (8000458 <fsm_auto_run+0x248>)
 80003ae:	f001 f8db 	bl	8001568 <SCH_Delete_Task>
		SCH_Delete_Task(Scan7SEG);
 80003b2:	482a      	ldr	r0, [pc, #168]	@ (800045c <fsm_auto_run+0x24c>)
 80003b4:	f001 f8d8 	bl	8001568 <SCH_Delete_Task>
		SCH_Add_Task(fsm_slow_run, 10, 500);
 80003b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003bc:	210a      	movs	r1, #10
 80003be:	4829      	ldr	r0, [pc, #164]	@ (8000464 <fsm_auto_run+0x254>)
 80003c0:	f000 ffee 	bl	80013a0 <SCH_Add_Task>
		single_LED_off();// ------ALL LED OFF----------
 80003c4:	f000 fe78 	bl	80010b8 <single_LED_off>
		Diable_Led(); //--- Disable led 7 segment ------
 80003c8:	f000 fbf4 	bl	8000bb4 <Diable_Led>
		return;
 80003cc:	e031      	b.n	8000432 <fsm_auto_run+0x222>
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 80003ce:	2002      	movs	r0, #2
 80003d0:	f7ff ff04 	bl	80001dc <isButtonPress>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d12b      	bne.n	8000432 <fsm_auto_run+0x222>
		time_red_yellow = 0;
 80003da:	4b18      	ldr	r3, [pc, #96]	@ (800043c <fsm_auto_run+0x22c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <fsm_auto_run+0x228>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 80003e6:	2101      	movs	r1, #1
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fe29 	bl	8001040 <updateClockBuffer>
		status = set_green;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <fsm_auto_run+0x224>)
 80003f0:	2208      	movs	r2, #8
 80003f2:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(nextTask_Switch_State); // DELETE TASK SWITCH STATE
 80003f4:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <fsm_auto_run+0x244>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 f8b5 	bl	8001568 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 80003fe:	4816      	ldr	r0, [pc, #88]	@ (8000458 <fsm_auto_run+0x248>)
 8000400:	f001 f8b2 	bl	8001568 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 8000404:	4818      	ldr	r0, [pc, #96]	@ (8000468 <fsm_auto_run+0x258>)
 8000406:	f001 f8af 	bl	8001568 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 10, 10);
 800040a:	220a      	movs	r2, #10
 800040c:	210a      	movs	r1, #10
 800040e:	4817      	ldr	r0, [pc, #92]	@ (800046c <fsm_auto_run+0x25c>)
 8000410:	f000 ffc6 	bl	80013a0 <SCH_Add_Task>
		single_LED_off();
 8000414:	f000 fe50 	bl	80010b8 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 8000418:	2201      	movs	r2, #1
 800041a:	2120      	movs	r1, #32
 800041c:	480b      	ldr	r0, [pc, #44]	@ (800044c <fsm_auto_run+0x23c>)
 800041e:	f001 fcf8 	bl	8001e12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000428:	4808      	ldr	r0, [pc, #32]	@ (800044c <fsm_auto_run+0x23c>)
 800042a:	f001 fcf2 	bl	8001e12 <HAL_GPIO_WritePin>
 800042e:	e000      	b.n	8000432 <fsm_auto_run+0x222>
			return;
 8000430:	bf00      	nop
	}
}
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200000b0 	.word	0x200000b0
 8000438:	20000014 	.word	0x20000014
 800043c:	20000018 	.word	0x20000018
 8000440:	10624dd3 	.word	0x10624dd3
 8000444:	200000b4 	.word	0x200000b4
 8000448:	200000b8 	.word	0x200000b8
 800044c:	40010800 	.word	0x40010800
 8000450:	08000511 	.word	0x08000511
 8000454:	200000a4 	.word	0x200000a4
 8000458:	08000211 	.word	0x08000211
 800045c:	08000be9 	.word	0x08000be9
 8000460:	080006d9 	.word	0x080006d9
 8000464:	08000b5d 	.word	0x08000b5d
 8000468:	08000695 	.word	0x08000695
 800046c:	080008f9 	.word	0x080008f9

08000470 <fsm_switch_state_auto_red_green>:

void fsm_switch_state_auto_red_green(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 8000474:	2200      	movs	r2, #0
 8000476:	2110      	movs	r1, #16
 8000478:	481c      	ldr	r0, [pc, #112]	@ (80004ec <fsm_switch_state_auto_red_green+0x7c>)
 800047a:	f001 fcca 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	@ 0x40
 8000482:	481a      	ldr	r0, [pc, #104]	@ (80004ec <fsm_switch_state_auto_red_green+0x7c>)
 8000484:	f001 fcc5 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 8000488:	2201      	movs	r2, #1
 800048a:	2108      	movs	r1, #8
 800048c:	4817      	ldr	r0, [pc, #92]	@ (80004ec <fsm_switch_state_auto_red_green+0x7c>)
 800048e:	f001 fcc0 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000498:	4814      	ldr	r0, [pc, #80]	@ (80004ec <fsm_switch_state_auto_red_green+0x7c>)
 800049a:	f001 fcba 	bl	8001e12 <HAL_GPIO_WritePin>
	status = auto_red_green;
 800049e:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <fsm_switch_state_auto_red_green+0x80>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green + time_red_yellow)/1000;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <fsm_switch_state_auto_red_green+0x84>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <fsm_switch_state_auto_red_green+0x88>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4413      	add	r3, r2
 80004ae:	4a13      	ldr	r2, [pc, #76]	@ (80004fc <fsm_switch_state_auto_red_green+0x8c>)
 80004b0:	fb82 1203 	smull	r1, r2, r2, r3
 80004b4:	1192      	asrs	r2, r2, #6
 80004b6:	17db      	asrs	r3, r3, #31
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	4a11      	ldr	r2, [pc, #68]	@ (8000500 <fsm_switch_state_auto_red_green+0x90>)
 80004bc:	6013      	str	r3, [r2, #0]
	count1 = time_red_green/1000;
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <fsm_switch_state_auto_red_green+0x84>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <fsm_switch_state_auto_red_green+0x8c>)
 80004c4:	fb82 1203 	smull	r1, r2, r2, r3
 80004c8:	1192      	asrs	r2, r2, #6
 80004ca:	17db      	asrs	r3, r3, #31
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000504 <fsm_switch_state_auto_red_green+0x94>)
 80004d0:	6013      	str	r3, [r2, #0]
	SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0); // NEXT STATE
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <fsm_switch_state_auto_red_green+0x84>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	480b      	ldr	r0, [pc, #44]	@ (8000508 <fsm_switch_state_auto_red_green+0x98>)
 80004dc:	f000 ff60 	bl	80013a0 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_red_yellow;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <fsm_switch_state_auto_red_green+0x9c>)
 80004e2:	4a09      	ldr	r2, [pc, #36]	@ (8000508 <fsm_switch_state_auto_red_green+0x98>)
 80004e4:	601a      	str	r2, [r3, #0]

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010800 	.word	0x40010800
 80004f0:	200000b0 	.word	0x200000b0
 80004f4:	20000014 	.word	0x20000014
 80004f8:	20000018 	.word	0x20000018
 80004fc:	10624dd3 	.word	0x10624dd3
 8000500:	200000b4 	.word	0x200000b4
 8000504:	200000b8 	.word	0x200000b8
 8000508:	08000511 	.word	0x08000511
 800050c:	200000a4 	.word	0x200000a4

08000510 <fsm_switch_state_auto_red_yellow>:
void fsm_switch_state_auto_red_yellow(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 off
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051a:	4812      	ldr	r0, [pc, #72]	@ (8000564 <fsm_switch_state_auto_red_yellow+0x54>)
 800051c:	f001 fc79 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow1 on
 8000520:	2201      	movs	r2, #1
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	480f      	ldr	r0, [pc, #60]	@ (8000564 <fsm_switch_state_auto_red_yellow+0x54>)
 8000526:	f001 fc74 	bl	8001e12 <HAL_GPIO_WritePin>
	status = auto_red_yellow;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <fsm_switch_state_auto_red_yellow+0x58>)
 800052c:	2202      	movs	r2, #2
 800052e:	601a      	str	r2, [r3, #0]
	count0 = count1 = time_red_yellow/1000;;
 8000530:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <fsm_switch_state_auto_red_yellow+0x5c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <fsm_switch_state_auto_red_yellow+0x60>)
 8000536:	fb82 1203 	smull	r1, r2, r2, r3
 800053a:	1192      	asrs	r2, r2, #6
 800053c:	17db      	asrs	r3, r3, #31
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a0c      	ldr	r2, [pc, #48]	@ (8000574 <fsm_switch_state_auto_red_yellow+0x64>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <fsm_switch_state_auto_red_yellow+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0b      	ldr	r2, [pc, #44]	@ (8000578 <fsm_switch_state_auto_red_yellow+0x68>)
 800054a:	6013      	str	r3, [r2, #0]
	SCH_Add_Task(fsm_switch_state_auto_green_red, time_red_yellow, 0); // NEXT STATE
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <fsm_switch_state_auto_red_yellow+0x5c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <fsm_switch_state_auto_red_yellow+0x6c>)
 8000556:	f000 ff23 	bl	80013a0 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_green_red;
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <fsm_switch_state_auto_red_yellow+0x70>)
 800055c:	4a07      	ldr	r2, [pc, #28]	@ (800057c <fsm_switch_state_auto_red_yellow+0x6c>)
 800055e:	601a      	str	r2, [r3, #0]

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800
 8000568:	200000b0 	.word	0x200000b0
 800056c:	20000018 	.word	0x20000018
 8000570:	10624dd3 	.word	0x10624dd3
 8000574:	200000b8 	.word	0x200000b8
 8000578:	200000b4 	.word	0x200000b4
 800057c:	08000585 	.word	0x08000585
 8000580:	200000a4 	.word	0x200000a4

08000584 <fsm_switch_state_auto_green_red>:
void fsm_switch_state_auto_green_red(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red 0 off
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	481b      	ldr	r0, [pc, #108]	@ (80005fc <fsm_switch_state_auto_green_red+0x78>)
 800058e:	f001 fc40 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow 1 off
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	4819      	ldr	r0, [pc, #100]	@ (80005fc <fsm_switch_state_auto_green_red+0x78>)
 8000598:	f001 fc3b 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 on
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4816      	ldr	r0, [pc, #88]	@ (80005fc <fsm_switch_state_auto_green_red+0x78>)
 80005a2:	f001 fc36 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 80005a6:	2201      	movs	r2, #1
 80005a8:	2140      	movs	r1, #64	@ 0x40
 80005aa:	4814      	ldr	r0, [pc, #80]	@ (80005fc <fsm_switch_state_auto_green_red+0x78>)
 80005ac:	f001 fc31 	bl	8001e12 <HAL_GPIO_WritePin>
	status = auto_green_red;
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <fsm_switch_state_auto_green_red+0x7c>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green)/1000;
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <fsm_switch_state_auto_green_red+0x80>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <fsm_switch_state_auto_green_red+0x84>)
 80005bc:	fb82 1203 	smull	r1, r2, r2, r3
 80005c0:	1192      	asrs	r2, r2, #6
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a11      	ldr	r2, [pc, #68]	@ (800060c <fsm_switch_state_auto_green_red+0x88>)
 80005c8:	6013      	str	r3, [r2, #0]
	count1 = (time_red_green + time_red_yellow)/1000;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <fsm_switch_state_auto_green_red+0x80>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <fsm_switch_state_auto_green_red+0x8c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <fsm_switch_state_auto_green_red+0x84>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	1192      	asrs	r2, r2, #6
 80005dc:	17db      	asrs	r3, r3, #31
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <fsm_switch_state_auto_green_red+0x90>)
 80005e2:	6013      	str	r3, [r2, #0]
	SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);// NEXT STATE
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <fsm_switch_state_auto_green_red+0x80>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	480a      	ldr	r0, [pc, #40]	@ (8000618 <fsm_switch_state_auto_green_red+0x94>)
 80005ee:	f000 fed7 	bl	80013a0 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_yellow_red;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <fsm_switch_state_auto_green_red+0x98>)
 80005f4:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <fsm_switch_state_auto_green_red+0x94>)
 80005f6:	601a      	str	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40010800 	.word	0x40010800
 8000600:	200000b0 	.word	0x200000b0
 8000604:	20000014 	.word	0x20000014
 8000608:	10624dd3 	.word	0x10624dd3
 800060c:	200000b4 	.word	0x200000b4
 8000610:	20000018 	.word	0x20000018
 8000614:	200000b8 	.word	0x200000b8
 8000618:	08000621 	.word	0x08000621
 800061c:	200000a4 	.word	0x200000a4

08000620 <fsm_switch_state_auto_yellow_red>:
void fsm_switch_state_auto_yellow_red(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 on
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	4812      	ldr	r0, [pc, #72]	@ (8000674 <fsm_switch_state_auto_yellow_red+0x54>)
 800062a:	f001 fbf2 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 off
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	4810      	ldr	r0, [pc, #64]	@ (8000674 <fsm_switch_state_auto_yellow_red+0x54>)
 8000634:	f001 fbed 	bl	8001e12 <HAL_GPIO_WritePin>
	status = auto_yellow_red;
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <fsm_switch_state_auto_yellow_red+0x58>)
 800063a:	2204      	movs	r2, #4
 800063c:	601a      	str	r2, [r3, #0]
	count0 = count1 = time_red_yellow/1000;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <fsm_switch_state_auto_yellow_red+0x5c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0f      	ldr	r2, [pc, #60]	@ (8000680 <fsm_switch_state_auto_yellow_red+0x60>)
 8000644:	fb82 1203 	smull	r1, r2, r2, r3
 8000648:	1192      	asrs	r2, r2, #6
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <fsm_switch_state_auto_yellow_red+0x64>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <fsm_switch_state_auto_yellow_red+0x64>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0c      	ldr	r2, [pc, #48]	@ (8000688 <fsm_switch_state_auto_yellow_red+0x68>)
 8000658:	6013      	str	r3, [r2, #0]
	SCH_Add_Task(fsm_switch_state_auto_red_green, time_red_yellow, 0);
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <fsm_switch_state_auto_yellow_red+0x5c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	480a      	ldr	r0, [pc, #40]	@ (800068c <fsm_switch_state_auto_yellow_red+0x6c>)
 8000664:	f000 fe9c 	bl	80013a0 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_red_green;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <fsm_switch_state_auto_yellow_red+0x70>)
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <fsm_switch_state_auto_yellow_red+0x6c>)
 800066c:	601a      	str	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800
 8000678:	200000b0 	.word	0x200000b0
 800067c:	20000018 	.word	0x20000018
 8000680:	10624dd3 	.word	0x10624dd3
 8000684:	200000b8 	.word	0x200000b8
 8000688:	200000b4 	.word	0x200000b4
 800068c:	08000471 	.word	0x08000471
 8000690:	200000a4 	.word	0x200000a4

08000694 <count_1_second>:
void count_1_second(){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	if(count0 > 0)
 8000698:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <count_1_second+0x3c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd04      	ble.n	80006aa <count_1_second+0x16>
		count0 --;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <count_1_second+0x3c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <count_1_second+0x3c>)
 80006a8:	6013      	str	r3, [r2, #0]
	if(count1 > 0)
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <count_1_second+0x40>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd04      	ble.n	80006bc <count_1_second+0x28>
		count1 --;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <count_1_second+0x40>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <count_1_second+0x40>)
 80006ba:	6013      	str	r3, [r2, #0]
	updateClockBuffer(count0, count1);
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <count_1_second+0x3c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <count_1_second+0x40>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fcba 	bl	8001040 <updateClockBuffer>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	200000b8 	.word	0x200000b8

080006d8 <fsm_manual>:
 *  Created on: Nov 19, 2024
 *      Author: HOME
 */
#include "fsm_manual.h"

void fsm_manual(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	switch (status) {
 80006dc:	4b78      	ldr	r3, [pc, #480]	@ (80008c0 <fsm_manual+0x1e8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d002      	beq.n	80006ea <fsm_manual+0x12>
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d05c      	beq.n	80007a2 <fsm_manual+0xca>
				SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);
				return;
			}
			break;
		default:
			return;
 80006e8:	e0e9      	b.n	80008be <fsm_manual+0x1e6>
			if(isButtonPress(1) == 1){
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fd76 	bl	80001dc <isButtonPress>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d117      	bne.n	8000726 <fsm_manual+0x4e>
				status = manual_green_red;
 80006f6:	4b72      	ldr	r3, [pc, #456]	@ (80008c0 <fsm_manual+0x1e8>)
 80006f8:	2206      	movs	r2, #6
 80006fa:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2140      	movs	r1, #64	@ 0x40
 8000700:	4870      	ldr	r0, [pc, #448]	@ (80008c4 <fsm_manual+0x1ec>)
 8000702:	f001 fb86 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2120      	movs	r1, #32
 800070a:	486e      	ldr	r0, [pc, #440]	@ (80008c4 <fsm_manual+0x1ec>)
 800070c:	f001 fb81 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2108      	movs	r1, #8
 8000714:	486b      	ldr	r0, [pc, #428]	@ (80008c4 <fsm_manual+0x1ec>)
 8000716:	f001 fb7c 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000720:	4868      	ldr	r0, [pc, #416]	@ (80008c4 <fsm_manual+0x1ec>)
 8000722:	f001 fb76 	bl	8001e12 <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fd58 	bl	80001dc <isButtonPress>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	f040 8092 	bne.w	8000858 <fsm_manual+0x180>
				SCH_Add_Task(fsm_auto_run, 10, 10);
 8000734:	220a      	movs	r2, #10
 8000736:	210a      	movs	r1, #10
 8000738:	4863      	ldr	r0, [pc, #396]	@ (80008c8 <fsm_manual+0x1f0>)
 800073a:	f000 fe31 	bl	80013a0 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 10, 250);
 800073e:	22fa      	movs	r2, #250	@ 0xfa
 8000740:	210a      	movs	r1, #10
 8000742:	4862      	ldr	r0, [pc, #392]	@ (80008cc <fsm_manual+0x1f4>)
 8000744:	f000 fe2c 	bl	80013a0 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 8000748:	4861      	ldr	r0, [pc, #388]	@ (80008d0 <fsm_manual+0x1f8>)
 800074a:	f000 ff0d 	bl	8001568 <SCH_Delete_Task>
				status = auto_red_green;
 800074e:	4b5c      	ldr	r3, [pc, #368]	@ (80008c0 <fsm_manual+0x1e8>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000754:	4b5f      	ldr	r3, [pc, #380]	@ (80008d4 <fsm_manual+0x1fc>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b5f      	ldr	r3, [pc, #380]	@ (80008d8 <fsm_manual+0x200>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4413      	add	r3, r2
 800075e:	4a5f      	ldr	r2, [pc, #380]	@ (80008dc <fsm_manual+0x204>)
 8000760:	fb82 1203 	smull	r1, r2, r2, r3
 8000764:	1192      	asrs	r2, r2, #6
 8000766:	17db      	asrs	r3, r3, #31
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	4a5d      	ldr	r2, [pc, #372]	@ (80008e0 <fsm_manual+0x208>)
 800076c:	6013      	str	r3, [r2, #0]
				count1 = time_red_green / 1000;
 800076e:	4b59      	ldr	r3, [pc, #356]	@ (80008d4 <fsm_manual+0x1fc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a5a      	ldr	r2, [pc, #360]	@ (80008dc <fsm_manual+0x204>)
 8000774:	fb82 1203 	smull	r1, r2, r2, r3
 8000778:	1192      	asrs	r2, r2, #6
 800077a:	17db      	asrs	r3, r3, #31
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	4a59      	ldr	r2, [pc, #356]	@ (80008e4 <fsm_manual+0x20c>)
 8000780:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 8000782:	4b57      	ldr	r3, [pc, #348]	@ (80008e0 <fsm_manual+0x208>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a57      	ldr	r2, [pc, #348]	@ (80008e4 <fsm_manual+0x20c>)
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fc57 	bl	8001040 <updateClockBuffer>
				SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 8000792:	4b50      	ldr	r3, [pc, #320]	@ (80008d4 <fsm_manual+0x1fc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4853      	ldr	r0, [pc, #332]	@ (80008e8 <fsm_manual+0x210>)
 800079c:	f000 fe00 	bl	80013a0 <SCH_Add_Task>
				return;
 80007a0:	e08d      	b.n	80008be <fsm_manual+0x1e6>
			if(isButtonPress(1) == 1){
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fd1a 	bl	80001dc <isButtonPress>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d117      	bne.n	80007de <fsm_manual+0x106>
				status = manual_red_green;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <fsm_manual+0x1e8>)
 80007b0:	2205      	movs	r2, #5
 80007b2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2108      	movs	r1, #8
 80007b8:	4842      	ldr	r0, [pc, #264]	@ (80008c4 <fsm_manual+0x1ec>)
 80007ba:	f001 fb2a 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c4:	483f      	ldr	r0, [pc, #252]	@ (80008c4 <fsm_manual+0x1ec>)
 80007c6:	f001 fb24 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	@ 0x40
 80007ce:	483d      	ldr	r0, [pc, #244]	@ (80008c4 <fsm_manual+0x1ec>)
 80007d0:	f001 fb1f 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2120      	movs	r1, #32
 80007d8:	483a      	ldr	r0, [pc, #232]	@ (80008c4 <fsm_manual+0x1ec>)
 80007da:	f001 fb1a 	bl	8001e12 <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fcfc 	bl	80001dc <isButtonPress>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d138      	bne.n	800085c <fsm_manual+0x184>
				SCH_Add_Task(fsm_auto_run, 10, 10);
 80007ea:	220a      	movs	r2, #10
 80007ec:	210a      	movs	r1, #10
 80007ee:	4836      	ldr	r0, [pc, #216]	@ (80008c8 <fsm_manual+0x1f0>)
 80007f0:	f000 fdd6 	bl	80013a0 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 10, 250);
 80007f4:	22fa      	movs	r2, #250	@ 0xfa
 80007f6:	210a      	movs	r1, #10
 80007f8:	4834      	ldr	r0, [pc, #208]	@ (80008cc <fsm_manual+0x1f4>)
 80007fa:	f000 fdd1 	bl	80013a0 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 80007fe:	4834      	ldr	r0, [pc, #208]	@ (80008d0 <fsm_manual+0x1f8>)
 8000800:	f000 feb2 	bl	8001568 <SCH_Delete_Task>
				status = auto_green_red;
 8000804:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <fsm_manual+0x1e8>)
 8000806:	2203      	movs	r2, #3
 8000808:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 800080a:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <fsm_manual+0x1fc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a33      	ldr	r2, [pc, #204]	@ (80008dc <fsm_manual+0x204>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	1192      	asrs	r2, r2, #6
 8000816:	17db      	asrs	r3, r3, #31
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	4a31      	ldr	r2, [pc, #196]	@ (80008e0 <fsm_manual+0x208>)
 800081c:	6013      	str	r3, [r2, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <fsm_manual+0x1fc>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <fsm_manual+0x200>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a2c      	ldr	r2, [pc, #176]	@ (80008dc <fsm_manual+0x204>)
 800082a:	fb82 1203 	smull	r1, r2, r2, r3
 800082e:	1192      	asrs	r2, r2, #6
 8000830:	17db      	asrs	r3, r3, #31
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	4a2b      	ldr	r2, [pc, #172]	@ (80008e4 <fsm_manual+0x20c>)
 8000836:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <fsm_manual+0x208>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <fsm_manual+0x20c>)
 800083e:	6812      	ldr	r2, [r2, #0]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fbfc 	bl	8001040 <updateClockBuffer>
				SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);
 8000848:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <fsm_manual+0x1fc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	4826      	ldr	r0, [pc, #152]	@ (80008ec <fsm_manual+0x214>)
 8000852:	f000 fda5 	bl	80013a0 <SCH_Add_Task>
				return;
 8000856:	e032      	b.n	80008be <fsm_manual+0x1e6>
			break;
 8000858:	bf00      	nop
 800085a:	e000      	b.n	800085e <fsm_manual+0x186>
			break;
 800085c:	bf00      	nop
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fcbc 	bl	80001dc <isButtonPress>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d129      	bne.n	80008be <fsm_manual+0x1e6>
		time_red_yellow = 0;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <fsm_manual+0x200>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <fsm_manual+0x1fc>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000876:	2101      	movs	r1, #1
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fbe1 	bl	8001040 <updateClockBuffer>
		status = set_green;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <fsm_manual+0x1e8>)
 8000880:	2208      	movs	r2, #8
 8000882:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(fsm_manual);
 8000884:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <fsm_manual+0x1f8>)
 8000886:	f000 fe6f 	bl	8001568 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 800088a:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <fsm_manual+0x218>)
 800088c:	f000 fe6c 	bl	8001568 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 100, 10);
 8000890:	220a      	movs	r2, #10
 8000892:	2164      	movs	r1, #100	@ 0x64
 8000894:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <fsm_manual+0x21c>)
 8000896:	f000 fd83 	bl	80013a0 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 250);
 800089a:	22fa      	movs	r2, #250	@ 0xfa
 800089c:	210a      	movs	r1, #10
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <fsm_manual+0x1f4>)
 80008a0:	f000 fd7e 	bl	80013a0 <SCH_Add_Task>
		single_LED_off();
 80008a4:	f000 fc08 	bl	80010b8 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2120      	movs	r1, #32
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <fsm_manual+0x1ec>)
 80008ae:	f001 fab0 	bl	8001e12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <fsm_manual+0x1ec>)
 80008ba:	f001 faaa 	bl	8001e12 <HAL_GPIO_WritePin>
	}
}
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	40010800 	.word	0x40010800
 80008c8:	08000211 	.word	0x08000211
 80008cc:	08000be9 	.word	0x08000be9
 80008d0:	080006d9 	.word	0x080006d9
 80008d4:	20000014 	.word	0x20000014
 80008d8:	20000018 	.word	0x20000018
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	200000b4 	.word	0x200000b4
 80008e4:	200000b8 	.word	0x200000b8
 80008e8:	08000511 	.word	0x08000511
 80008ec:	08000621 	.word	0x08000621
 80008f0:	08000695 	.word	0x08000695
 80008f4:	080008f9 	.word	0x080008f9

080008f8 <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;
int temp =0 ;
void fsm_setting(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	switch (status) {
 80008fc:	4b8a      	ldr	r3, [pc, #552]	@ (8000b28 <fsm_setting+0x230>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b07      	cmp	r3, #7
 8000902:	d074      	beq.n	80009ee <fsm_setting+0xf6>
 8000904:	2b08      	cmp	r3, #8
 8000906:	f040 810c 	bne.w	8000b22 <fsm_setting+0x22a>
		case set_green:
			if(isButtonPress(0) == 1){  // TIME INCREASE
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fc66 	bl	80001dc <isButtonPress>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d12b      	bne.n	800096e <fsm_setting+0x76>
				time_red_green += increment[i];
 8000916:	4b85      	ldr	r3, [pc, #532]	@ (8000b2c <fsm_setting+0x234>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a85      	ldr	r2, [pc, #532]	@ (8000b30 <fsm_setting+0x238>)
 800091c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000920:	4b84      	ldr	r3, [pc, #528]	@ (8000b34 <fsm_setting+0x23c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4413      	add	r3, r2
 8000926:	4a83      	ldr	r2, [pc, #524]	@ (8000b34 <fsm_setting+0x23c>)
 8000928:	6013      	str	r3, [r2, #0]
				temp = time_red_green;
 800092a:	4b82      	ldr	r3, [pc, #520]	@ (8000b34 <fsm_setting+0x23c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a82      	ldr	r2, [pc, #520]	@ (8000b38 <fsm_setting+0x240>)
 8000930:	6013      	str	r3, [r2, #0]
				if(time_red_green > 98000){
 8000932:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <fsm_setting+0x23c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a81      	ldr	r2, [pc, #516]	@ (8000b3c <fsm_setting+0x244>)
 8000938:	4293      	cmp	r3, r2
 800093a:	dd02      	ble.n	8000942 <fsm_setting+0x4a>
					time_red_green = 0;
 800093c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b34 <fsm_setting+0x23c>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
				}
				updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000942:	4b7c      	ldr	r3, [pc, #496]	@ (8000b34 <fsm_setting+0x23c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a7e      	ldr	r2, [pc, #504]	@ (8000b40 <fsm_setting+0x248>)
 8000948:	fb82 1203 	smull	r1, r2, r2, r3
 800094c:	1192      	asrs	r2, r2, #6
 800094e:	17db      	asrs	r3, r3, #31
 8000950:	1ad0      	subs	r0, r2, r3
 8000952:	4b76      	ldr	r3, [pc, #472]	@ (8000b2c <fsm_setting+0x234>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a76      	ldr	r2, [pc, #472]	@ (8000b30 <fsm_setting+0x238>)
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	4a78      	ldr	r2, [pc, #480]	@ (8000b40 <fsm_setting+0x248>)
 800095e:	fb82 1203 	smull	r1, r2, r2, r3
 8000962:	1192      	asrs	r2, r2, #6
 8000964:	17db      	asrs	r3, r3, #31
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	4619      	mov	r1, r3
 800096a:	f000 fb69 	bl	8001040 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fc34 	bl	80001dc <isButtonPress>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	f040 80a7 	bne.w	8000aca <fsm_setting+0x1d2>
				i = 0;
 800097c:	4b6b      	ldr	r3, [pc, #428]	@ (8000b2c <fsm_setting+0x234>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000982:	4b70      	ldr	r3, [pc, #448]	@ (8000b44 <fsm_setting+0x24c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a6e      	ldr	r2, [pc, #440]	@ (8000b40 <fsm_setting+0x248>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	1192      	asrs	r2, r2, #6
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad0      	subs	r0, r2, r3
 8000992:	4b66      	ldr	r3, [pc, #408]	@ (8000b2c <fsm_setting+0x234>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a66      	ldr	r2, [pc, #408]	@ (8000b30 <fsm_setting+0x238>)
 8000998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099c:	4a68      	ldr	r2, [pc, #416]	@ (8000b40 <fsm_setting+0x248>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	1192      	asrs	r2, r2, #6
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 fb49 	bl	8001040 <updateClockBuffer>
				temp = time_red_yellow;
 80009ae:	4b65      	ldr	r3, [pc, #404]	@ (8000b44 <fsm_setting+0x24c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a61      	ldr	r2, [pc, #388]	@ (8000b38 <fsm_setting+0x240>)
 80009b4:	6013      	str	r3, [r2, #0]
				status = set_yellow;
 80009b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b28 <fsm_setting+0x230>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2120      	movs	r1, #32
 80009c0:	4861      	ldr	r0, [pc, #388]	@ (8000b48 <fsm_setting+0x250>)
 80009c2:	f001 fa26 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009cc:	485e      	ldr	r0, [pc, #376]	@ (8000b48 <fsm_setting+0x250>)
 80009ce:	f001 fa20 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	485c      	ldr	r0, [pc, #368]	@ (8000b48 <fsm_setting+0x250>)
 80009d8:	f001 fa1b 	bl	8001e12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	@ 0x80
 80009e0:	4859      	ldr	r0, [pc, #356]	@ (8000b48 <fsm_setting+0x250>)
 80009e2:	f001 fa16 	bl	8001e12 <HAL_GPIO_WritePin>
				i = 0;
 80009e6:	4b51      	ldr	r3, [pc, #324]	@ (8000b2c <fsm_setting+0x234>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			}
			break;
 80009ec:	e06d      	b.n	8000aca <fsm_setting+0x1d2>
		case set_yellow:
			if(isButtonPress(0) == 1){
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fbf4 	bl	80001dc <isButtonPress>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d123      	bne.n	8000a42 <fsm_setting+0x14a>
				time_red_yellow += increment[i];
 80009fa:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <fsm_setting+0x234>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000b30 <fsm_setting+0x238>)
 8000a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a04:	4b4f      	ldr	r3, [pc, #316]	@ (8000b44 <fsm_setting+0x24c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b44 <fsm_setting+0x24c>)
 8000a0c:	6013      	str	r3, [r2, #0]
				temp = time_red_yellow;
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b44 <fsm_setting+0x24c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a49      	ldr	r2, [pc, #292]	@ (8000b38 <fsm_setting+0x240>)
 8000a14:	6013      	str	r3, [r2, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000a16:	4b4b      	ldr	r3, [pc, #300]	@ (8000b44 <fsm_setting+0x24c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a49      	ldr	r2, [pc, #292]	@ (8000b40 <fsm_setting+0x248>)
 8000a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a20:	1192      	asrs	r2, r2, #6
 8000a22:	17db      	asrs	r3, r3, #31
 8000a24:	1ad0      	subs	r0, r2, r3
 8000a26:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <fsm_setting+0x234>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a41      	ldr	r2, [pc, #260]	@ (8000b30 <fsm_setting+0x238>)
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	4a43      	ldr	r2, [pc, #268]	@ (8000b40 <fsm_setting+0x248>)
 8000a32:	fb82 1203 	smull	r1, r2, r2, r3
 8000a36:	1192      	asrs	r2, r2, #6
 8000a38:	17db      	asrs	r3, r3, #31
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f000 faff 	bl	8001040 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff fbca 	bl	80001dc <isButtonPress>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d13f      	bne.n	8000ace <fsm_setting+0x1d6>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b44 <fsm_setting+0x24c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <fsm_setting+0x23c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a3c      	ldr	r2, [pc, #240]	@ (8000b4c <fsm_setting+0x254>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	dd1f      	ble.n	8000a9e <fsm_setting+0x1a6>
 8000a5e:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <fsm_setting+0x23c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d11b      	bne.n	8000a9e <fsm_setting+0x1a6>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4837      	ldr	r0, [pc, #220]	@ (8000b48 <fsm_setting+0x250>)
 8000a6c:	f001 f9d1 	bl	8001e12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	@ 0x80
 8000a74:	4834      	ldr	r0, [pc, #208]	@ (8000b48 <fsm_setting+0x250>)
 8000a76:	f001 f9cc 	bl	8001e12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4832      	ldr	r0, [pc, #200]	@ (8000b48 <fsm_setting+0x250>)
 8000a80:	f001 f9c7 	bl	8001e12 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a8a:	482f      	ldr	r0, [pc, #188]	@ (8000b48 <fsm_setting+0x250>)
 8000a8c:	f001 f9c1 	bl	8001e12 <HAL_GPIO_WritePin>
					status = set_green;
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <fsm_setting+0x230>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	601a      	str	r2, [r3, #0]
					i = 0;
 8000a96:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <fsm_setting+0x234>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
					SCH_Add_Task(fsm_auto_run, 10, 10);
					SCH_Add_Task(count_1_second, 1000, 1000);
					return;
				}
			}
			break;
 8000a9c:	e017      	b.n	8000ace <fsm_setting+0x1d6>
					i = 0;
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <fsm_setting+0x234>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
					status = auto_init;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <fsm_setting+0x230>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(fsm_setting);
 8000aaa:	4829      	ldr	r0, [pc, #164]	@ (8000b50 <fsm_setting+0x258>)
 8000aac:	f000 fd5c 	bl	8001568 <SCH_Delete_Task>
					SCH_Add_Task(fsm_auto_run, 10, 10);
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <fsm_setting+0x25c>)
 8000ab6:	f000 fc73 	bl	80013a0 <SCH_Add_Task>
					SCH_Add_Task(count_1_second, 1000, 1000);
 8000aba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000abe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ac2:	4825      	ldr	r0, [pc, #148]	@ (8000b58 <fsm_setting+0x260>)
 8000ac4:	f000 fc6c 	bl	80013a0 <SCH_Add_Task>
					return;
 8000ac8:	e02c      	b.n	8000b24 <fsm_setting+0x22c>
			break;
 8000aca:	bf00      	nop
 8000acc:	e000      	b.n	8000ad0 <fsm_setting+0x1d8>
			break;
 8000ace:	bf00      	nop
		default:
			return;
	}
	if(isButtonPress(1) == 1){
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fb83 	bl	80001dc <isButtonPress>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d123      	bne.n	8000b24 <fsm_setting+0x22c>
		 ++i;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <fsm_setting+0x234>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <fsm_setting+0x234>)
 8000ae4:	6013      	str	r3, [r2, #0]
		 if(i >= 5) i = 0;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <fsm_setting+0x234>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	dd02      	ble.n	8000af4 <fsm_setting+0x1fc>
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <fsm_setting+0x234>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
		 updateClockBuffer(temp/1000, increment[i]/1000);
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <fsm_setting+0x240>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <fsm_setting+0x248>)
 8000afa:	fb82 1203 	smull	r1, r2, r2, r3
 8000afe:	1192      	asrs	r2, r2, #6
 8000b00:	17db      	asrs	r3, r3, #31
 8000b02:	1ad0      	subs	r0, r2, r3
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <fsm_setting+0x234>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <fsm_setting+0x238>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <fsm_setting+0x248>)
 8000b10:	fb82 1203 	smull	r1, r2, r2, r3
 8000b14:	1192      	asrs	r2, r2, #6
 8000b16:	17db      	asrs	r3, r3, #31
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f000 fa90 	bl	8001040 <updateClockBuffer>
 8000b20:	e000      	b.n	8000b24 <fsm_setting+0x22c>
			return;
 8000b22:	bf00      	nop
	}
}
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000b0 	.word	0x200000b0
 8000b2c:	200000a8 	.word	0x200000a8
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000014 	.word	0x20000014
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	00017ed0 	.word	0x00017ed0
 8000b40:	10624dd3 	.word	0x10624dd3
 8000b44:	20000018 	.word	0x20000018
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	0001869f 	.word	0x0001869f
 8000b50:	080008f9 	.word	0x080008f9
 8000b54:	08000211 	.word	0x08000211
 8000b58:	08000695 	.word	0x08000695

08000b5c <fsm_slow_run>:
 *      Author: HOME
 */

#include "fsm_slow.h"

void fsm_slow_run(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000b60:	2110      	movs	r1, #16
 8000b62:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <fsm_slow_run+0x44>)
 8000b64:	f001 f96d 	bl	8001e42 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <fsm_slow_run+0x44>)
 8000b6c:	f001 f969 	bl	8001e42 <HAL_GPIO_TogglePin>
	if(isButtonPress(0) == 1){
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fb33 	bl	80001dc <isButtonPress>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10f      	bne.n	8000b9c <fsm_slow_run+0x40>
		SCH_Add_Task(fsm_auto_run, 10, 10);
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	210a      	movs	r1, #10
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <fsm_slow_run+0x48>)
 8000b82:	f000 fc0d 	bl	80013a0 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 250);
 8000b86:	22fa      	movs	r2, #250	@ 0xfa
 8000b88:	210a      	movs	r1, #10
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <fsm_slow_run+0x4c>)
 8000b8c:	f000 fc08 	bl	80013a0 <SCH_Add_Task>
		SCH_Delete_Task(fsm_slow_run);
 8000b90:	4806      	ldr	r0, [pc, #24]	@ (8000bac <fsm_slow_run+0x50>)
 8000b92:	f000 fce9 	bl	8001568 <SCH_Delete_Task>
		status = auto_init;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <fsm_slow_run+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	08000211 	.word	0x08000211
 8000ba8:	08000be9 	.word	0x08000be9
 8000bac:	08000b5d 	.word	0x08000b5d
 8000bb0:	200000b0 	.word	0x200000b0

08000bb4 <Diable_Led>:

#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <Diable_Led+0x30>)
 8000bbe:	f001 f928 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <Diable_Led+0x30>)
 8000bc8:	f001 f923 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <Diable_Led+0x30>)
 8000bd2:	f001 f91e 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2140      	movs	r1, #64	@ 0x40
 8000bda:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <Diable_Led+0x30>)
 8000bdc:	f001 f919 	bl	8001e12 <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <Scan7SEG>:
void Scan7SEG(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	Diable_Led();
 8000bec:	f7ff ffe2 	bl	8000bb4 <Diable_Led>
	switch(led_index){
 8000bf0:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <Scan7SEG+0xa0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d837      	bhi.n	8000c68 <Scan7SEG+0x80>
 8000bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <Scan7SEG+0x18>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c27 	.word	0x08000c27
 8000c08:	08000c3d 	.word	0x08000c3d
 8000c0c:	08000c53 	.word	0x08000c53
		case 0:
			//Display the first 7SEG with led_buffer[0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <Scan7SEG+0xa4>)
 8000c16:	f001 f8fc 	bl	8001e12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <Scan7SEG+0xa8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f838 	bl	8000c94 <display7SEG>
			break;
 8000c24:	e021      	b.n	8000c6a <Scan7SEG+0x82>
		case 1:
			//Display the second 7SEG with led_buffer[1]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4818      	ldr	r0, [pc, #96]	@ (8000c8c <Scan7SEG+0xa4>)
 8000c2c:	f001 f8f1 	bl	8001e12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <Scan7SEG+0xa8>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f82d 	bl	8000c94 <display7SEG>
			break;
 8000c3a:	e016      	b.n	8000c6a <Scan7SEG+0x82>
		case 2:
			//Display the third 7SEG with led_buffer[2]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <Scan7SEG+0xa4>)
 8000c42:	f001 f8e6 	bl	8001e12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <Scan7SEG+0xa8>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f822 	bl	8000c94 <display7SEG>
			break;
 8000c50:	e00b      	b.n	8000c6a <Scan7SEG+0x82>
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2140      	movs	r1, #64	@ 0x40
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <Scan7SEG+0xa4>)
 8000c58:	f001 f8db 	bl	8001e12 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <Scan7SEG+0xa8>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f817 	bl	8000c94 <display7SEG>
			break;
 8000c66:	e000      	b.n	8000c6a <Scan7SEG+0x82>
		default:
			break;
 8000c68:	bf00      	nop
	}
	if((++led_index) >= 4) led_index = 0;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <Scan7SEG+0xa0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <Scan7SEG+0xa0>)
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <Scan7SEG+0xa0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	dd02      	ble.n	8000c82 <Scan7SEG+0x9a>
 8000c7c:	4b02      	ldr	r3, [pc, #8]	@ (8000c88 <Scan7SEG+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000cc 	.word	0x200000cc
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	200000bc 	.word	0x200000bc

08000c94 <display7SEG>:
void display7SEG(int num){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	switch(num){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b09      	cmp	r3, #9
 8000ca0:	f200 81c8 	bhi.w	8001034 <display7SEG+0x3a0>
 8000ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cac <display7SEG+0x18>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000cd5 	.word	0x08000cd5
 8000cb0:	08000d2b 	.word	0x08000d2b
 8000cb4:	08000d81 	.word	0x08000d81
 8000cb8:	08000dd7 	.word	0x08000dd7
 8000cbc:	08000e2d 	.word	0x08000e2d
 8000cc0:	08000e83 	.word	0x08000e83
 8000cc4:	08000ed9 	.word	0x08000ed9
 8000cc8:	08000f2f 	.word	0x08000f2f
 8000ccc:	08000f85 	.word	0x08000f85
 8000cd0:	08000fdb 	.word	0x08000fdb
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	48d5      	ldr	r0, [pc, #852]	@ (8001030 <display7SEG+0x39c>)
 8000cdc:	f001 f899 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ce6:	48d2      	ldr	r0, [pc, #840]	@ (8001030 <display7SEG+0x39c>)
 8000ce8:	f001 f893 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cf2:	48cf      	ldr	r0, [pc, #828]	@ (8001030 <display7SEG+0x39c>)
 8000cf4:	f001 f88d 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfe:	48cc      	ldr	r0, [pc, #816]	@ (8001030 <display7SEG+0x39c>)
 8000d00:	f001 f887 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0a:	48c9      	ldr	r0, [pc, #804]	@ (8001030 <display7SEG+0x39c>)
 8000d0c:	f001 f881 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d16:	48c6      	ldr	r0, [pc, #792]	@ (8001030 <display7SEG+0x39c>)
 8000d18:	f001 f87b 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d22:	48c3      	ldr	r0, [pc, #780]	@ (8001030 <display7SEG+0x39c>)
 8000d24:	f001 f875 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000d28:	e185      	b.n	8001036 <display7SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d30:	48bf      	ldr	r0, [pc, #764]	@ (8001030 <display7SEG+0x39c>)
 8000d32:	f001 f86e 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	48bc      	ldr	r0, [pc, #752]	@ (8001030 <display7SEG+0x39c>)
 8000d3e:	f001 f868 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d48:	48b9      	ldr	r0, [pc, #740]	@ (8001030 <display7SEG+0x39c>)
 8000d4a:	f001 f862 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d54:	48b6      	ldr	r0, [pc, #728]	@ (8001030 <display7SEG+0x39c>)
 8000d56:	f001 f85c 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d60:	48b3      	ldr	r0, [pc, #716]	@ (8001030 <display7SEG+0x39c>)
 8000d62:	f001 f856 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6c:	48b0      	ldr	r0, [pc, #704]	@ (8001030 <display7SEG+0x39c>)
 8000d6e:	f001 f850 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d78:	48ad      	ldr	r0, [pc, #692]	@ (8001030 <display7SEG+0x39c>)
 8000d7a:	f001 f84a 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000d7e:	e15a      	b.n	8001036 <display7SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d86:	48aa      	ldr	r0, [pc, #680]	@ (8001030 <display7SEG+0x39c>)
 8000d88:	f001 f843 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d92:	48a7      	ldr	r0, [pc, #668]	@ (8001030 <display7SEG+0x39c>)
 8000d94:	f001 f83d 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d9e:	48a4      	ldr	r0, [pc, #656]	@ (8001030 <display7SEG+0x39c>)
 8000da0:	f001 f837 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000daa:	48a1      	ldr	r0, [pc, #644]	@ (8001030 <display7SEG+0x39c>)
 8000dac:	f001 f831 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000db6:	489e      	ldr	r0, [pc, #632]	@ (8001030 <display7SEG+0x39c>)
 8000db8:	f001 f82b 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc2:	489b      	ldr	r0, [pc, #620]	@ (8001030 <display7SEG+0x39c>)
 8000dc4:	f001 f825 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dce:	4898      	ldr	r0, [pc, #608]	@ (8001030 <display7SEG+0x39c>)
 8000dd0:	f001 f81f 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000dd4:	e12f      	b.n	8001036 <display7SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	4894      	ldr	r0, [pc, #592]	@ (8001030 <display7SEG+0x39c>)
 8000dde:	f001 f818 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	4891      	ldr	r0, [pc, #580]	@ (8001030 <display7SEG+0x39c>)
 8000dea:	f001 f812 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000df4:	488e      	ldr	r0, [pc, #568]	@ (8001030 <display7SEG+0x39c>)
 8000df6:	f001 f80c 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e00:	488b      	ldr	r0, [pc, #556]	@ (8001030 <display7SEG+0x39c>)
 8000e02:	f001 f806 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	4888      	ldr	r0, [pc, #544]	@ (8001030 <display7SEG+0x39c>)
 8000e0e:	f001 f800 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e18:	4885      	ldr	r0, [pc, #532]	@ (8001030 <display7SEG+0x39c>)
 8000e1a:	f000 fffa 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e24:	4882      	ldr	r0, [pc, #520]	@ (8001030 <display7SEG+0x39c>)
 8000e26:	f000 fff4 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000e2a:	e104      	b.n	8001036 <display7SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e32:	487f      	ldr	r0, [pc, #508]	@ (8001030 <display7SEG+0x39c>)
 8000e34:	f000 ffed 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3e:	487c      	ldr	r0, [pc, #496]	@ (8001030 <display7SEG+0x39c>)
 8000e40:	f000 ffe7 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e4a:	4879      	ldr	r0, [pc, #484]	@ (8001030 <display7SEG+0x39c>)
 8000e4c:	f000 ffe1 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e56:	4876      	ldr	r0, [pc, #472]	@ (8001030 <display7SEG+0x39c>)
 8000e58:	f000 ffdb 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e62:	4873      	ldr	r0, [pc, #460]	@ (8001030 <display7SEG+0x39c>)
 8000e64:	f000 ffd5 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e6e:	4870      	ldr	r0, [pc, #448]	@ (8001030 <display7SEG+0x39c>)
 8000e70:	f000 ffcf 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e7a:	486d      	ldr	r0, [pc, #436]	@ (8001030 <display7SEG+0x39c>)
 8000e7c:	f000 ffc9 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000e80:	e0d9      	b.n	8001036 <display7SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e88:	4869      	ldr	r0, [pc, #420]	@ (8001030 <display7SEG+0x39c>)
 8000e8a:	f000 ffc2 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e94:	4866      	ldr	r0, [pc, #408]	@ (8001030 <display7SEG+0x39c>)
 8000e96:	f000 ffbc 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea0:	4863      	ldr	r0, [pc, #396]	@ (8001030 <display7SEG+0x39c>)
 8000ea2:	f000 ffb6 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eac:	4860      	ldr	r0, [pc, #384]	@ (8001030 <display7SEG+0x39c>)
 8000eae:	f000 ffb0 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb8:	485d      	ldr	r0, [pc, #372]	@ (8001030 <display7SEG+0x39c>)
 8000eba:	f000 ffaa 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec4:	485a      	ldr	r0, [pc, #360]	@ (8001030 <display7SEG+0x39c>)
 8000ec6:	f000 ffa4 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed0:	4857      	ldr	r0, [pc, #348]	@ (8001030 <display7SEG+0x39c>)
 8000ed2:	f000 ff9e 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000ed6:	e0ae      	b.n	8001036 <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ede:	4854      	ldr	r0, [pc, #336]	@ (8001030 <display7SEG+0x39c>)
 8000ee0:	f000 ff97 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eea:	4851      	ldr	r0, [pc, #324]	@ (8001030 <display7SEG+0x39c>)
 8000eec:	f000 ff91 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef6:	484e      	ldr	r0, [pc, #312]	@ (8001030 <display7SEG+0x39c>)
 8000ef8:	f000 ff8b 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f02:	484b      	ldr	r0, [pc, #300]	@ (8001030 <display7SEG+0x39c>)
 8000f04:	f000 ff85 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0e:	4848      	ldr	r0, [pc, #288]	@ (8001030 <display7SEG+0x39c>)
 8000f10:	f000 ff7f 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f1a:	4845      	ldr	r0, [pc, #276]	@ (8001030 <display7SEG+0x39c>)
 8000f1c:	f000 ff79 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f26:	4842      	ldr	r0, [pc, #264]	@ (8001030 <display7SEG+0x39c>)
 8000f28:	f000 ff73 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000f2c:	e083      	b.n	8001036 <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f34:	483e      	ldr	r0, [pc, #248]	@ (8001030 <display7SEG+0x39c>)
 8000f36:	f000 ff6c 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f40:	483b      	ldr	r0, [pc, #236]	@ (8001030 <display7SEG+0x39c>)
 8000f42:	f000 ff66 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4c:	4838      	ldr	r0, [pc, #224]	@ (8001030 <display7SEG+0x39c>)
 8000f4e:	f000 ff60 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f58:	4835      	ldr	r0, [pc, #212]	@ (8001030 <display7SEG+0x39c>)
 8000f5a:	f000 ff5a 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f64:	4832      	ldr	r0, [pc, #200]	@ (8001030 <display7SEG+0x39c>)
 8000f66:	f000 ff54 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f70:	482f      	ldr	r0, [pc, #188]	@ (8001030 <display7SEG+0x39c>)
 8000f72:	f000 ff4e 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f7c:	482c      	ldr	r0, [pc, #176]	@ (8001030 <display7SEG+0x39c>)
 8000f7e:	f000 ff48 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000f82:	e058      	b.n	8001036 <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f8a:	4829      	ldr	r0, [pc, #164]	@ (8001030 <display7SEG+0x39c>)
 8000f8c:	f000 ff41 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f96:	4826      	ldr	r0, [pc, #152]	@ (8001030 <display7SEG+0x39c>)
 8000f98:	f000 ff3b 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <display7SEG+0x39c>)
 8000fa4:	f000 ff35 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fae:	4820      	ldr	r0, [pc, #128]	@ (8001030 <display7SEG+0x39c>)
 8000fb0:	f000 ff2f 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fba:	481d      	ldr	r0, [pc, #116]	@ (8001030 <display7SEG+0x39c>)
 8000fbc:	f000 ff29 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc6:	481a      	ldr	r0, [pc, #104]	@ (8001030 <display7SEG+0x39c>)
 8000fc8:	f000 ff23 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	4817      	ldr	r0, [pc, #92]	@ (8001030 <display7SEG+0x39c>)
 8000fd4:	f000 ff1d 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 8000fd8:	e02d      	b.n	8001036 <display7SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe0:	4813      	ldr	r0, [pc, #76]	@ (8001030 <display7SEG+0x39c>)
 8000fe2:	f000 ff16 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <display7SEG+0x39c>)
 8000fee:	f000 ff10 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <display7SEG+0x39c>)
 8000ffa:	f000 ff0a 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001004:	480a      	ldr	r0, [pc, #40]	@ (8001030 <display7SEG+0x39c>)
 8001006:	f000 ff04 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <display7SEG+0x39c>)
 8001012:	f000 fefe 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <display7SEG+0x39c>)
 800101e:	f000 fef8 	bl	8001e12 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <display7SEG+0x39c>)
 800102a:	f000 fef2 	bl	8001e12 <HAL_GPIO_WritePin>
			break;
 800102e:	e002      	b.n	8001036 <display7SEG+0x3a2>
 8001030:	40010800 	.word	0x40010800
		default:
			break;
 8001034:	bf00      	nop
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop

08001040 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <updateClockBuffer+0x70>)
 800104e:	fb82 1203 	smull	r1, r2, r2, r3
 8001052:	1092      	asrs	r2, r2, #2
 8001054:	17db      	asrs	r3, r3, #31
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <updateClockBuffer+0x74>)
 800105a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <updateClockBuffer+0x70>)
 8001060:	fb83 2301 	smull	r2, r3, r3, r1
 8001064:	109a      	asrs	r2, r3, #2
 8001066:	17cb      	asrs	r3, r1, #31
 8001068:	1ad2      	subs	r2, r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	1aca      	subs	r2, r1, r3
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <updateClockBuffer+0x74>)
 8001076:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <updateClockBuffer+0x70>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <updateClockBuffer+0x74>)
 8001088:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <updateClockBuffer+0x70>)
 800108e:	fb83 2301 	smull	r2, r3, r3, r1
 8001092:	109a      	asrs	r2, r3, #2
 8001094:	17cb      	asrs	r3, r1, #31
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	1aca      	subs	r2, r1, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <updateClockBuffer+0x74>)
 80010a4:	60da      	str	r2, [r3, #12]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	66666667 	.word	0x66666667
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <single_LED_off>:
void single_LED_off(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	480f      	ldr	r0, [pc, #60]	@ (8001100 <single_LED_off+0x48>)
 80010c2:	f000 fea6 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <single_LED_off+0x48>)
 80010cc:	f000 fea1 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	480a      	ldr	r0, [pc, #40]	@ (8001100 <single_LED_off+0x48>)
 80010d6:	f000 fe9c 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <single_LED_off+0x48>)
 80010e0:	f000 fe97 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <single_LED_off+0x48>)
 80010ea:	f000 fe92 	bl	8001e12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <single_LED_off+0x48>)
 80010f6:	f000 fe8c 	bl	8001e12 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fb80 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f834 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 f8ba 	bl	8001288 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001114:	f000 f86c 	bl	80011f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8001118:	4811      	ldr	r0, [pc, #68]	@ (8001160 <main+0x5c>)
 800111a:	f001 fad9 	bl	80026d0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800111e:	f000 f92d 	bl	800137c <SCH_Init>
  SCH_Add_Task(led_debug, 1000, 1000);
 8001122:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001126:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <main+0x60>)
 800112c:	f000 f938 	bl	80013a0 <SCH_Add_Task>
  //SCH_Add_Task(led_test, 500, 500);
  SCH_Add_Task(getKeyinput, 0, 10);
 8001130:	220a      	movs	r2, #10
 8001132:	2100      	movs	r1, #0
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <main+0x64>)
 8001136:	f000 f933 	bl	80013a0 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 10, 10);
 800113a:	220a      	movs	r2, #10
 800113c:	210a      	movs	r1, #10
 800113e:	480b      	ldr	r0, [pc, #44]	@ (800116c <main+0x68>)
 8001140:	f000 f92e 	bl	80013a0 <SCH_Add_Task>
  SCH_Add_Task(Scan7SEG, 10, 250);
 8001144:	22fa      	movs	r2, #250	@ 0xfa
 8001146:	210a      	movs	r1, #10
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <main+0x6c>)
 800114a:	f000 f929 	bl	80013a0 <SCH_Add_Task>
  SCH_Add_Task(count_1_second, 10, 1000);
 800114e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001152:	210a      	movs	r1, #10
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <main+0x70>)
 8001156:	f000 f923 	bl	80013a0 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 800115a:	f000 f9c7 	bl	80014ec <SCH_Dispatch_Task>
 800115e:	e7fc      	b.n	800115a <main+0x56>
 8001160:	200000d0 	.word	0x200000d0
 8001164:	08001349 	.word	0x08001349
 8001168:	0800014d 	.word	0x0800014d
 800116c:	08000211 	.word	0x08000211
 8001170:	08000be9 	.word	0x08000be9
 8001174:	08000695 	.word	0x08000695

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	@ 0x40
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2228      	movs	r2, #40	@ 0x28
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f001 feec 	bl	8002f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a2:	2310      	movs	r3, #16
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fe60 	bl	8001e74 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011ba:	f000 f8d9 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f8ce 	bl	8002378 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f8c5 	bl	8001370 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3740      	adds	r7, #64	@ 0x40
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM2_Init+0x94>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_TIM2_Init+0x94>)
 8001216:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800121a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_TIM2_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_TIM2_Init+0x94>)
 8001224:	2209      	movs	r2, #9
 8001226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_TIM2_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_TIM2_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_TIM2_Init+0x94>)
 8001236:	f001 f9fb 	bl	8002630 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001240:	f000 f896 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <MX_TIM2_Init+0x94>)
 8001252:	f001 fb79 	bl	8002948 <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800125c:	f000 f888 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_TIM2_Init+0x94>)
 800126e:	f001 fd51 	bl	8002d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f87a 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000d0 	.word	0x200000d0

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_GPIO_Init+0xb4>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a26      	ldr	r2, [pc, #152]	@ (800133c <MX_GPIO_Init+0xb4>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_GPIO_Init+0xb4>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_GPIO_Init+0xb4>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a20      	ldr	r2, [pc, #128]	@ (800133c <MX_GPIO_Init+0xb4>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_GPIO_Init+0xb4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 80012cc:	2200      	movs	r2, #0
 80012ce:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80012d2:	481b      	ldr	r0, [pc, #108]	@ (8001340 <MX_GPIO_Init+0xb8>)
 80012d4:	f000 fd9d 	bl	8001e12 <HAL_GPIO_WritePin>
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2178      	movs	r1, #120	@ 0x78
 80012dc:	4819      	ldr	r0, [pc, #100]	@ (8001344 <MX_GPIO_Init+0xbc>)
 80012de:	f000 fd98 	bl	8001e12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 R0_Pin Y0_Pin G0_Pin
                           R1_Pin Y1_Pin G1_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 80012e2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80012e6:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	4811      	ldr	r0, [pc, #68]	@ (8001340 <MX_GPIO_Init+0xb8>)
 80012fc:	f000 fbf6 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001300:	2307      	movs	r3, #7
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_GPIO_Init+0xbc>)
 8001314:	f000 fbea 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8001318:	2378      	movs	r3, #120	@ 0x78
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_GPIO_Init+0xbc>)
 8001330:	f000 fbdc 	bl	8001aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00

08001348 <led_debug>:

/* USER CODE BEGIN 4 */
void led_debug(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800134c:	2104      	movs	r1, #4
 800134e:	4802      	ldr	r0, [pc, #8]	@ (8001358 <led_debug+0x10>)
 8001350:	f000 fd77 	bl	8001e42 <HAL_GPIO_TogglePin>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010800 	.word	0x40010800

0800135c <HAL_TIM_PeriodElapsedCallback>:
void led_test(){
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001364:	f000 f8b0 	bl	80014c8 <SCH_Update>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <SCH_Init>:
 */
#include "scheduler.h"

List list;

void SCH_Init(void) {
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	list.head = NULL;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <SCH_Init+0x20>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	list.tail = NULL;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SCH_Init+0x20>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
    list.numTask = 0;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SCH_Init+0x20>)
 800138e:	2200      	movs	r2, #0
 8001390:	721a      	strb	r2, [r3, #8]
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000118 	.word	0x20000118

080013a0 <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 80013ac:	2014      	movs	r0, #20
 80013ae:	f001 fd1b 	bl	8002de8 <malloc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	613b      	str	r3, [r7, #16]
	if (newTask == NULL)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07d      	beq.n	80014b8 <SCH_Add_Task+0x118>
		return;
	newTask->pTask = function;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	4a3e      	ldr	r2, [pc, #248]	@ (80014c0 <SCH_Add_Task+0x120>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3b      	ldr	r2, [pc, #236]	@ (80014c0 <SCH_Add_Task+0x120>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
	newTask->next = NULL;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]

	if(list.head == NULL){
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <SCH_Add_Task+0x124>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <SCH_Add_Task+0x60>
		list.head = newTask;
 80013f2:	4a34      	ldr	r2, [pc, #208]	@ (80014c4 <SCH_Add_Task+0x124>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6013      	str	r3, [r2, #0]
		list.tail = newTask;
 80013f8:	4a32      	ldr	r2, [pc, #200]	@ (80014c4 <SCH_Add_Task+0x124>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6053      	str	r3, [r2, #4]
 80013fe:	e054      	b.n	80014aa <SCH_Add_Task+0x10a>
	}
	else{
		sTask * cur = list.head;
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <SCH_Add_Task+0x124>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	617b      	str	r3, [r7, #20]
		//--------- FINDING LOCATE FOR NEWTASK-----------
		while(cur != NULL && newTask->Delay >= cur->Delay){
 8001406:	e009      	b.n	800141c <SCH_Add_Task+0x7c>
			newTask->Delay = newTask->Delay - cur->Delay;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
			cur = cur->next;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	617b      	str	r3, [r7, #20]
		while(cur != NULL && newTask->Delay >= cur->Delay){
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <SCH_Add_Task+0x8e>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d2ec      	bcs.n	8001408 <SCH_Add_Task+0x68>
		}
		if(cur == list.head){ // Add To First List
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <SCH_Add_Task+0x124>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d114      	bne.n	8001462 <SCH_Add_Task+0xc2>
			newTask->next = list.head;
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <SCH_Add_Task+0x124>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	60da      	str	r2, [r3, #12]
			list.head->prev = newTask;
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <SCH_Add_Task+0x124>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	611a      	str	r2, [r3, #16]
			list.head->Delay = list.head->Delay - newTask->Delay;
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <SCH_Add_Task+0x124>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <SCH_Add_Task+0x124>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1a8a      	subs	r2, r1, r2
 8001458:	605a      	str	r2, [r3, #4]
			list.head = newTask;
 800145a:	4a1a      	ldr	r2, [pc, #104]	@ (80014c4 <SCH_Add_Task+0x124>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e023      	b.n	80014aa <SCH_Add_Task+0x10a>
		}
		else if(cur == NULL){ // Add to Last List -- Add After Cur
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10b      	bne.n	8001480 <SCH_Add_Task+0xe0>
			newTask->prev = list.tail;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <SCH_Add_Task+0x124>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	611a      	str	r2, [r3, #16]
			list.tail->next = newTask;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <SCH_Add_Task+0x124>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	60da      	str	r2, [r3, #12]
			list.tail = newTask;
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <SCH_Add_Task+0x124>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6053      	str	r3, [r2, #4]
 800147e:	e014      	b.n	80014aa <SCH_Add_Task+0x10a>
		}
		else{ // Add to Mid list -- Add before Cur
			newTask->next = cur;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	60da      	str	r2, [r3, #12]
			newTask->prev = cur->prev;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	611a      	str	r2, [r3, #16]
			cur->prev->next = newTask;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
			cur->prev = newTask;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	611a      	str	r2, [r3, #16]
			cur->Delay = cur->Delay - newTask->Delay;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	1ad2      	subs	r2, r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	605a      	str	r2, [r3, #4]
		}
	}
	list.numTask++;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SCH_Add_Task+0x124>)
 80014ac:	7a1b      	ldrb	r3, [r3, #8]
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SCH_Add_Task+0x124>)
 80014b4:	721a      	strb	r2, [r3, #8]
 80014b6:	e000      	b.n	80014ba <SCH_Add_Task+0x11a>
		return;
 80014b8:	bf00      	nop
}
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	cccccccd 	.word	0xcccccccd
 80014c4:	20000118 	.word	0x20000118

080014c8 <SCH_Update>:

void SCH_Update(void){ // TIM involked every 10ms
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SCH_Update+0x20>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <SCH_Update+0x18>
		return;
	}
	list.head->Delay--;
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SCH_Update+0x20>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	3a01      	subs	r2, #1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e000      	b.n	80014e2 <SCH_Update+0x1a>
		return;
 80014e0:	bf00      	nop
}
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000118 	.word	0x20000118

080014ec <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d030      	beq.n	800155c <SCH_Dispatch_Task+0x70>
		return;
	}
	if(list.head->Delay <= 0){
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12c      	bne.n	800155e <SCH_Dispatch_Task+0x72>
		list.head->pTask();
 8001504:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4798      	blx	r3
		sTask * temp = list.head;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	607b      	str	r3, [r7, #4]
		list.head = list.head->next;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 800151a:	6013      	str	r3, [r2, #0]
		if(temp->Period > 0){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d011      	beq.n	8001548 <SCH_Dispatch_Task+0x5c>
			SCH_Add_Task(temp->pTask, temp->Period * 10, temp->Period * 10);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4619      	mov	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	461a      	mov	r2, r3
 8001544:	f7ff ff2c 	bl	80013a0 <SCH_Add_Task>
		}
		free(temp);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f001 fc55 	bl	8002df8 <free>
		list.numTask--;
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 8001550:	7a1b      	ldrb	r3, [r3, #8]
 8001552:	3b01      	subs	r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <SCH_Dispatch_Task+0x78>)
 8001558:	721a      	strb	r2, [r3, #8]
 800155a:	e000      	b.n	800155e <SCH_Dispatch_Task+0x72>
		return;
 800155c:	bf00      	nop
	}
}
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000118 	.word	0x20000118

08001568 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(void (*function)()){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0)
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <SCH_Delete_Task+0xc4>)
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <SCH_Delete_Task+0x14>
		return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e052      	b.n	8001622 <SCH_Delete_Task+0xba>
	sTask * temp = list.head;
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <SCH_Delete_Task+0xc4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8001582:	e04a      	b.n	800161a <SCH_Delete_Task+0xb2>
		if(temp->pTask == function){
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d142      	bne.n	8001614 <SCH_Delete_Task+0xac>
			if(temp == list.head){ // Delete head
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <SCH_Delete_Task+0xc4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d111      	bne.n	80015bc <SCH_Delete_Task+0x54>
				temp->next->prev = NULL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
				list.head = temp->next;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <SCH_Delete_Task+0xc4>)
 80015a6:	6013      	str	r3, [r2, #0]
				list.head->Delay = list.head->Delay + temp->Delay;
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <SCH_Delete_Task+0xc4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <SCH_Delete_Task+0xc4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	440a      	add	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e020      	b.n	80015fe <SCH_Delete_Task+0x96>
			}
			else if (temp == list.tail){ // Delete tail
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <SCH_Delete_Task+0xc4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d108      	bne.n	80015d8 <SCH_Delete_Task+0x70>
				temp->prev->next = NULL;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
				list.tail = temp->prev;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <SCH_Delete_Task+0xc4>)
 80015d4:	6053      	str	r3, [r2, #4]
 80015d6:	e012      	b.n	80015fe <SCH_Delete_Task+0x96>
			}
			else{
				temp->prev->next = temp->next;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	68d2      	ldr	r2, [r2, #12]
 80015e0:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6912      	ldr	r2, [r2, #16]
 80015ea:	611a      	str	r2, [r3, #16]
				temp->next->Delay = temp->next->Delay + temp->Delay;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	440a      	add	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]
			}
			list.numTask--;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <SCH_Delete_Task+0xc4>)
 8001600:	7a1b      	ldrb	r3, [r3, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <SCH_Delete_Task+0xc4>)
 8001608:	721a      	strb	r2, [r3, #8]
			free(temp);
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f001 fbf4 	bl	8002df8 <free>
			return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e006      	b.n	8001622 <SCH_Delete_Task+0xba>
		}
		temp = temp->next;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1b1      	bne.n	8001584 <SCH_Delete_Task+0x1c>
	}
	return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000118 	.word	0x20000118

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	@ (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a4:	d113      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	201c      	movs	r0, #28
 80016c4:	f000 f9db 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c8:	201c      	movs	r0, #28
 80016ca:	f000 f9f4 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8b4 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f001 f815 	bl	8002768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000d0 	.word	0x200000d0

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f001 fc0c 	bl	8002f94 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20002800 	.word	0x20002800
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000124 	.word	0x20000124
 80017b0:	20000278 	.word	0x20000278

080017b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff fff8 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c6:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017dc:	4c09      	ldr	r4, [pc, #36]	@ (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 fbd9 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fc89 	bl	8001104 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017fc:	080030c0 	.word	0x080030c0
  ldr r2, =_sbss
 8001800:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001804:	20000274 	.word	0x20000274

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f923 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff ff02 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f93b 	bl	8001ad2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f903 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000001c 	.word	0x2000001c
 8001890:	20000024 	.word	0x20000024
 8001894:	20000020 	.word	0x20000020

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000024 	.word	0x20000024
 80018b8:	20000128 	.word	0x20000128

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000128 	.word	0x20000128

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	@ (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	@ 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e161      	b.n	8001dc4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8150 	bne.w	8001dbe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a97      	ldr	r2, [pc, #604]	@ (8001d80 <HAL_GPIO_Init+0x294>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a95      	ldr	r2, [pc, #596]	@ (8001d80 <HAL_GPIO_Init+0x294>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a95      	ldr	r2, [pc, #596]	@ (8001d84 <HAL_GPIO_Init+0x298>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a93      	ldr	r2, [pc, #588]	@ (8001d84 <HAL_GPIO_Init+0x298>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a93      	ldr	r2, [pc, #588]	@ (8001d88 <HAL_GPIO_Init+0x29c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a91      	ldr	r2, [pc, #580]	@ (8001d88 <HAL_GPIO_Init+0x29c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a91      	ldr	r2, [pc, #580]	@ (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a8f      	ldr	r2, [pc, #572]	@ (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a8f      	ldr	r2, [pc, #572]	@ (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a8d      	ldr	r2, [pc, #564]	@ (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	@ (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a76      	ldr	r2, [pc, #472]	@ (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	@ 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	@ 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80a9 	beq.w	8001dbe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a49      	ldr	r2, [pc, #292]	@ (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a45      	ldr	r2, [pc, #276]	@ (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3d      	ldr	r2, [pc, #244]	@ (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1dc>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3b      	ldr	r2, [pc, #236]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1d8>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e004      	b.n	8001cce <HAL_GPIO_Init+0x1e2>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_Init+0x1e2>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_GPIO_Init+0x1e2>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd0:	f002 0203 	and.w	r2, r2, #3
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4093      	lsls	r3, r2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cde:	492f      	ldr	r1, [pc, #188]	@ (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	492b      	ldr	r1, [pc, #172]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d06:	4b29      	ldr	r3, [pc, #164]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4927      	ldr	r1, [pc, #156]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4921      	ldr	r1, [pc, #132]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	491d      	ldr	r1, [pc, #116]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4917      	ldr	r1, [pc, #92]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4913      	ldr	r1, [pc, #76]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01f      	beq.n	8001db0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	490d      	ldr	r1, [pc, #52]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e01f      	b.n	8001dbe <HAL_GPIO_Init+0x2d2>
 8001d7e:	bf00      	nop
 8001d80:	10320000 	.word	0x10320000
 8001d84:	10310000 	.word	0x10310000
 8001d88:	10220000 	.word	0x10220000
 8001d8c:	10210000 	.word	0x10210000
 8001d90:	10120000 	.word	0x10120000
 8001d94:	10110000 	.word	0x10110000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4909      	ldr	r1, [pc, #36]	@ (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f47f ae96 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	@ 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e001      	b.n	8001e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e22:	787b      	ldrb	r3, [r7, #1]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e28:	887a      	ldrh	r2, [r7, #2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	041a      	lsls	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	611a      	str	r2, [r3, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	041a      	lsls	r2, r3, #16
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e272      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e94:	4b92      	ldr	r3, [pc, #584]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00c      	beq.n	8001eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
 8001eac:	4b8c      	ldr	r3, [pc, #560]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b89      	ldr	r3, [pc, #548]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d168      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e24c      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x76>
 8001edc:	4b80      	ldr	r3, [pc, #512]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7f      	ldr	r2, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7a      	ldr	r2, [pc, #488]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b78      	ldr	r3, [pc, #480]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a77      	ldr	r2, [pc, #476]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0xbc>
 8001f16:	4b72      	ldr	r3, [pc, #456]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a71      	ldr	r2, [pc, #452]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6f      	ldr	r3, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f30:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6a      	ldr	r2, [pc, #424]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a67      	ldr	r2, [pc, #412]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fcb4 	bl	80018bc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fcb0 	bl	80018bc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e200      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe4>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fca0 	bl	80018bc <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fc9c 	bl	80018bc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1ec      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x10c>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fae:	4b4c      	ldr	r3, [pc, #304]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fba:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c0      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4939      	ldr	r1, [pc, #228]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fc55 	bl	80018bc <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fc51 	bl	80018bc <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a1      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4927      	ldr	r1, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <HAL_RCC_OscConfig+0x270>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fc34 	bl	80018bc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff fc30 	bl	80018bc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e180      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03a      	beq.n	80020f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_RCC_OscConfig+0x274>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fc14 	bl	80018bc <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fc10 	bl	80018bc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e160      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 fa9c 	bl	80025f4 <RCC_Delay>
 80020bc:	e01c      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fbfa 	bl	80018bc <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fbf6 	bl	80018bc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e146      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	42420000 	.word	0x42420000
 80020e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a6 	beq.w	8002252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b8b      	ldr	r3, [pc, #556]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b88      	ldr	r3, [pc, #544]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a87      	ldr	r2, [pc, #540]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b85      	ldr	r3, [pc, #532]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b82      	ldr	r3, [pc, #520]	@ (800233c <HAL_RCC_OscConfig+0x4c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x4c8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7e      	ldr	r2, [pc, #504]	@ (800233c <HAL_RCC_OscConfig+0x4c8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fbb7 	bl	80018bc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff fbb3 	bl	80018bc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	@ 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e103      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b75      	ldr	r3, [pc, #468]	@ (800233c <HAL_RCC_OscConfig+0x4c8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 8002178:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x334>
 800218e:	4b6a      	ldr	r3, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a69      	ldr	r2, [pc, #420]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b67      	ldr	r3, [pc, #412]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a66      	ldr	r2, [pc, #408]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x356>
 80021b0:	4b61      	ldr	r3, [pc, #388]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a60      	ldr	r2, [pc, #384]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b58      	ldr	r3, [pc, #352]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a57      	ldr	r2, [pc, #348]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fb67 	bl	80018bc <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7ff fb63 	bl	80018bc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0b1      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b4b      	ldr	r3, [pc, #300]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x37e>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fb51 	bl	80018bc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fb4d 	bl	80018bc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e09b      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a3b      	ldr	r2, [pc, #236]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8087 	beq.w	800236a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d061      	beq.n	800232c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d146      	bne.n	80022fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fb21 	bl	80018bc <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fb1d 	bl	80018bc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e06d      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a4:	d108      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a6:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4921      	ldr	r1, [pc, #132]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a19      	ldr	r1, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	430b      	orrs	r3, r1
 80022ca:	491b      	ldr	r1, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff faf1 	bl	80018bc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff faed 	bl	80018bc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e03d      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x46a>
 80022fc:	e035      	b.n	800236a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_RCC_OscConfig+0x4cc>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fada 	bl	80018bc <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff fad6 	bl	80018bc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e026      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x498>
 800232a:	e01e      	b.n	800236a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e019      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_OscConfig+0x500>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0d0      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b67      	ldr	r3, [pc, #412]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4965      	ldr	r1, [pc, #404]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b8      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b50      	ldr	r3, [pc, #320]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494d      	ldr	r1, [pc, #308]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d040      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07f      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e073      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4936      	ldr	r1, [pc, #216]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7ff fa28 	bl	80018bc <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7ff fa24 	bl	80018bc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e053      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d210      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4922      	ldr	r1, [pc, #136]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e032      	b.n	800252e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4916      	ldr	r1, [pc, #88]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490e      	ldr	r1, [pc, #56]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f821 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	490a      	ldr	r1, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	5ccb      	ldrb	r3, [r1, r3]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1cc>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1d0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f986 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40022000 	.word	0x40022000
 800253c:	40021000 	.word	0x40021000
 8002540:	08003094 	.word	0x08003094
 8002544:	2000001c 	.word	0x2000001c
 8002548:	20000020 	.word	0x20000020

0800254c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x30>
 8002576:	2b08      	cmp	r3, #8
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x36>
 800257a:	e027      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800257c:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800257e:	613b      	str	r3, [r7, #16]
      break;
 8002580:	e027      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259a:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c5b      	lsrs	r3, r3, #17
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ae:	fb03 f202 	mul.w	r2, r3, r2
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e004      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0c      	ldr	r2, [pc, #48]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	613b      	str	r3, [r7, #16]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ce:	613b      	str	r3, [r7, #16]
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	693b      	ldr	r3, [r7, #16]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	080030a4 	.word	0x080030a4
 80025ec:	080030b4 	.word	0x080030b4
 80025f0:	003d0900 	.word	0x003d0900

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	2000001c 	.word	0x2000001c
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e041      	b.n	80026c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff f81c 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f000 fa56 	bl	8002b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e035      	b.n	8002754 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_TIM_Base_Start_IT+0x90>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x4e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002712:	d004      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x4e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <HAL_TIM_Base_Start_IT+0x94>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d111      	bne.n	8002742 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d010      	beq.n	8002752 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002740:	e007      	b.n	8002752 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400

08002768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d020      	beq.n	80027cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0202 	mvn.w	r2, #2
 800279c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f998 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f98b 	bl	8002ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f99a 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0204 	mvn.w	r2, #4
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f972 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f965 	bl	8002ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f974 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0208 	mvn.w	r2, #8
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2204      	movs	r2, #4
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f94c 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f93f 	bl	8002ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f94e 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f926 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f919 	bl	8002ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f928 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0201 	mvn.w	r2, #1
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fd44 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa6f 	bl	8002dd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8f8 	bl	8002b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0220 	mvn.w	r2, #32
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa42 	bl	8002dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_TIM_ConfigClockSource+0x1c>
 8002960:	2302      	movs	r3, #2
 8002962:	e0b4      	b.n	8002ace <HAL_TIM_ConfigClockSource+0x186>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800298a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299c:	d03e      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0xd4>
 800299e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a2:	f200 8087 	bhi.w	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029aa:	f000 8086 	beq.w	8002aba <HAL_TIM_ConfigClockSource+0x172>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029b2:	d87f      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b70      	cmp	r3, #112	@ 0x70
 80029b6:	d01a      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xa6>
 80029b8:	2b70      	cmp	r3, #112	@ 0x70
 80029ba:	d87b      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b60      	cmp	r3, #96	@ 0x60
 80029be:	d050      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x11a>
 80029c0:	2b60      	cmp	r3, #96	@ 0x60
 80029c2:	d877      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b50      	cmp	r3, #80	@ 0x50
 80029c6:	d03c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0xfa>
 80029c8:	2b50      	cmp	r3, #80	@ 0x50
 80029ca:	d873      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029cc:	2b40      	cmp	r3, #64	@ 0x40
 80029ce:	d058      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x13a>
 80029d0:	2b40      	cmp	r3, #64	@ 0x40
 80029d2:	d86f      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b30      	cmp	r3, #48	@ 0x30
 80029d6:	d064      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80029d8:	2b30      	cmp	r3, #48	@ 0x30
 80029da:	d86b      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d060      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d867      	bhi.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05c      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d05a      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80029ec:	e062      	b.n	8002ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029fe:	f000 f96a 	bl	8002cd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	609a      	str	r2, [r3, #8]
      break;
 8002a1a:	e04f      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a2c:	f000 f953 	bl	8002cd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3e:	609a      	str	r2, [r3, #8]
      break;
 8002a40:	e03c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 f8ca 	bl	8002be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2150      	movs	r1, #80	@ 0x50
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f921 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e02c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 f8e8 	bl	8002c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2160      	movs	r1, #96	@ 0x60
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f911 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 8002a80:	e01c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f000 f8aa 	bl	8002be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2140      	movs	r1, #64	@ 0x40
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f901 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 8002aa0:	e00c      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f000 f8f8 	bl	8002ca2 <TIM_ITRx_SetConfig>
      break;
 8002ab2:	e003      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e000      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a2b      	ldr	r2, [pc, #172]	@ (8002be0 <TIM_Base_SetConfig+0xc0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <TIM_Base_SetConfig+0x28>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0x28>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a28      	ldr	r2, [pc, #160]	@ (8002be4 <TIM_Base_SetConfig+0xc4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d108      	bne.n	8002b5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <TIM_Base_SetConfig+0xc0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <TIM_Base_SetConfig+0x52>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b68:	d003      	beq.n	8002b72 <TIM_Base_SetConfig+0x52>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <TIM_Base_SetConfig+0xc4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d108      	bne.n	8002b84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <TIM_Base_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d103      	bne.n	8002bb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40000400 	.word	0x40000400

08002be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f023 0201 	bic.w	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 030a 	bic.w	r3, r3, #10
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	621a      	str	r2, [r3, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0210 	bic.w	r2, r3, #16
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	031b      	lsls	r3, r3, #12
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f043 0307 	orr.w	r3, r3, #7
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	021a      	lsls	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	609a      	str	r2, [r3, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e041      	b.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	@ (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d78:	d004      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10c      	bne.n	8002d9e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400

08002dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <malloc>:
 8002de8:	4b02      	ldr	r3, [pc, #8]	@ (8002df4 <malloc+0xc>)
 8002dea:	4601      	mov	r1, r0
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	f000 b82d 	b.w	8002e4c <_malloc_r>
 8002df2:	bf00      	nop
 8002df4:	20000028 	.word	0x20000028

08002df8 <free>:
 8002df8:	4b02      	ldr	r3, [pc, #8]	@ (8002e04 <free+0xc>)
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	f000 b8f5 	b.w	8002fec <_free_r>
 8002e02:	bf00      	nop
 8002e04:	20000028 	.word	0x20000028

08002e08 <sbrk_aligned>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8002e48 <sbrk_aligned+0x40>)
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6831      	ldr	r1, [r6, #0]
 8002e10:	4605      	mov	r5, r0
 8002e12:	b911      	cbnz	r1, 8002e1a <sbrk_aligned+0x12>
 8002e14:	f000 f8ae 	bl	8002f74 <_sbrk_r>
 8002e18:	6030      	str	r0, [r6, #0]
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f8a9 	bl	8002f74 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d103      	bne.n	8002e2e <sbrk_aligned+0x26>
 8002e26:	f04f 34ff 	mov.w	r4, #4294967295
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d0f8      	beq.n	8002e2a <sbrk_aligned+0x22>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f89a 	bl	8002f74 <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d1f2      	bne.n	8002e2a <sbrk_aligned+0x22>
 8002e44:	e7ef      	b.n	8002e26 <sbrk_aligned+0x1e>
 8002e46:	bf00      	nop
 8002e48:	2000012c 	.word	0x2000012c

08002e4c <_malloc_r>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	1ccd      	adds	r5, r1, #3
 8002e52:	f025 0503 	bic.w	r5, r5, #3
 8002e56:	3508      	adds	r5, #8
 8002e58:	2d0c      	cmp	r5, #12
 8002e5a:	bf38      	it	cc
 8002e5c:	250c      	movcc	r5, #12
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	4606      	mov	r6, r0
 8002e62:	db01      	blt.n	8002e68 <_malloc_r+0x1c>
 8002e64:	42a9      	cmp	r1, r5
 8002e66:	d904      	bls.n	8002e72 <_malloc_r+0x26>
 8002e68:	230c      	movs	r3, #12
 8002e6a:	6033      	str	r3, [r6, #0]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f48 <_malloc_r+0xfc>
 8002e76:	f000 f869 	bl	8002f4c <__malloc_lock>
 8002e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7e:	461c      	mov	r4, r3
 8002e80:	bb44      	cbnz	r4, 8002ed4 <_malloc_r+0x88>
 8002e82:	4629      	mov	r1, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ffbf 	bl	8002e08 <sbrk_aligned>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	d158      	bne.n	8002f42 <_malloc_r+0xf6>
 8002e90:	f8d8 4000 	ldr.w	r4, [r8]
 8002e94:	4627      	mov	r7, r4
 8002e96:	2f00      	cmp	r7, #0
 8002e98:	d143      	bne.n	8002f22 <_malloc_r+0xd6>
 8002e9a:	2c00      	cmp	r4, #0
 8002e9c:	d04b      	beq.n	8002f36 <_malloc_r+0xea>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	eb04 0903 	add.w	r9, r4, r3
 8002ea8:	f000 f864 	bl	8002f74 <_sbrk_r>
 8002eac:	4581      	cmp	r9, r0
 8002eae:	d142      	bne.n	8002f36 <_malloc_r+0xea>
 8002eb0:	6821      	ldr	r1, [r4, #0]
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	1a6d      	subs	r5, r5, r1
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7ff ffa6 	bl	8002e08 <sbrk_aligned>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d03a      	beq.n	8002f36 <_malloc_r+0xea>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	442b      	add	r3, r5
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	bb62      	cbnz	r2, 8002f28 <_malloc_r+0xdc>
 8002ece:	f8c8 7000 	str.w	r7, [r8]
 8002ed2:	e00f      	b.n	8002ef4 <_malloc_r+0xa8>
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	1b52      	subs	r2, r2, r5
 8002ed8:	d420      	bmi.n	8002f1c <_malloc_r+0xd0>
 8002eda:	2a0b      	cmp	r2, #11
 8002edc:	d917      	bls.n	8002f0e <_malloc_r+0xc2>
 8002ede:	1961      	adds	r1, r4, r5
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	6025      	str	r5, [r4, #0]
 8002ee4:	bf18      	it	ne
 8002ee6:	6059      	strne	r1, [r3, #4]
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	bf08      	it	eq
 8002eec:	f8c8 1000 	streq.w	r1, [r8]
 8002ef0:	5162      	str	r2, [r4, r5]
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f82f 	bl	8002f58 <__malloc_unlock>
 8002efa:	f104 000b 	add.w	r0, r4, #11
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	f020 0007 	bic.w	r0, r0, #7
 8002f04:	1ac2      	subs	r2, r0, r3
 8002f06:	bf1c      	itt	ne
 8002f08:	1a1b      	subne	r3, r3, r0
 8002f0a:	50a3      	strne	r3, [r4, r2]
 8002f0c:	e7af      	b.n	8002e6e <_malloc_r+0x22>
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	bf0c      	ite	eq
 8002f14:	f8c8 2000 	streq.w	r2, [r8]
 8002f18:	605a      	strne	r2, [r3, #4]
 8002f1a:	e7eb      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	6864      	ldr	r4, [r4, #4]
 8002f20:	e7ae      	b.n	8002e80 <_malloc_r+0x34>
 8002f22:	463c      	mov	r4, r7
 8002f24:	687f      	ldr	r7, [r7, #4]
 8002f26:	e7b6      	b.n	8002e96 <_malloc_r+0x4a>
 8002f28:	461a      	mov	r2, r3
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	d1fb      	bne.n	8002f28 <_malloc_r+0xdc>
 8002f30:	2300      	movs	r3, #0
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	e7de      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f36:	230c      	movs	r3, #12
 8002f38:	4630      	mov	r0, r6
 8002f3a:	6033      	str	r3, [r6, #0]
 8002f3c:	f000 f80c 	bl	8002f58 <__malloc_unlock>
 8002f40:	e794      	b.n	8002e6c <_malloc_r+0x20>
 8002f42:	6005      	str	r5, [r0, #0]
 8002f44:	e7d6      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f46:	bf00      	nop
 8002f48:	20000130 	.word	0x20000130

08002f4c <__malloc_lock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	@ (8002f54 <__malloc_lock+0x8>)
 8002f4e:	f000 b84b 	b.w	8002fe8 <__retarget_lock_acquire_recursive>
 8002f52:	bf00      	nop
 8002f54:	20000270 	.word	0x20000270

08002f58 <__malloc_unlock>:
 8002f58:	4801      	ldr	r0, [pc, #4]	@ (8002f60 <__malloc_unlock+0x8>)
 8002f5a:	f000 b846 	b.w	8002fea <__retarget_lock_release_recursive>
 8002f5e:	bf00      	nop
 8002f60:	20000270 	.word	0x20000270

08002f64 <memset>:
 8002f64:	4603      	mov	r3, r0
 8002f66:	4402      	add	r2, r0
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <memset+0xa>
 8002f6c:	4770      	bx	lr
 8002f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f72:	e7f9      	b.n	8002f68 <memset+0x4>

08002f74 <_sbrk_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	2300      	movs	r3, #0
 8002f78:	4d05      	ldr	r5, [pc, #20]	@ (8002f90 <_sbrk_r+0x1c>)
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	f7fe fbe2 	bl	8001748 <_sbrk>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d102      	bne.n	8002f8e <_sbrk_r+0x1a>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	b103      	cbz	r3, 8002f8e <_sbrk_r+0x1a>
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
 8002f90:	2000026c 	.word	0x2000026c

08002f94 <__errno>:
 8002f94:	4b01      	ldr	r3, [pc, #4]	@ (8002f9c <__errno+0x8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000028 	.word	0x20000028

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	@ (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	@ (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	f000 f864 	bl	800307c <_init>
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	@ (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	080030b8 	.word	0x080030b8
 8002fdc:	080030b8 	.word	0x080030b8
 8002fe0:	080030b8 	.word	0x080030b8
 8002fe4:	080030bc 	.word	0x080030bc

08002fe8 <__retarget_lock_acquire_recursive>:
 8002fe8:	4770      	bx	lr

08002fea <__retarget_lock_release_recursive>:
 8002fea:	4770      	bx	lr

08002fec <_free_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4605      	mov	r5, r0
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d040      	beq.n	8003076 <_free_r+0x8a>
 8002ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff8:	1f0c      	subs	r4, r1, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfb8      	it	lt
 8002ffe:	18e4      	addlt	r4, r4, r3
 8003000:	f7ff ffa4 	bl	8002f4c <__malloc_lock>
 8003004:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <_free_r+0x8c>)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	b933      	cbnz	r3, 8003018 <_free_r+0x2c>
 800300a:	6063      	str	r3, [r4, #4]
 800300c:	6014      	str	r4, [r2, #0]
 800300e:	4628      	mov	r0, r5
 8003010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003014:	f7ff bfa0 	b.w	8002f58 <__malloc_unlock>
 8003018:	42a3      	cmp	r3, r4
 800301a:	d908      	bls.n	800302e <_free_r+0x42>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	1821      	adds	r1, r4, r0
 8003020:	428b      	cmp	r3, r1
 8003022:	bf01      	itttt	eq
 8003024:	6819      	ldreq	r1, [r3, #0]
 8003026:	685b      	ldreq	r3, [r3, #4]
 8003028:	1809      	addeq	r1, r1, r0
 800302a:	6021      	streq	r1, [r4, #0]
 800302c:	e7ed      	b.n	800300a <_free_r+0x1e>
 800302e:	461a      	mov	r2, r3
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	b10b      	cbz	r3, 8003038 <_free_r+0x4c>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d9fa      	bls.n	800302e <_free_r+0x42>
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	1850      	adds	r0, r2, r1
 800303c:	42a0      	cmp	r0, r4
 800303e:	d10b      	bne.n	8003058 <_free_r+0x6c>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	4401      	add	r1, r0
 8003044:	1850      	adds	r0, r2, r1
 8003046:	4283      	cmp	r3, r0
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	d1e0      	bne.n	800300e <_free_r+0x22>
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4408      	add	r0, r1
 8003052:	6010      	str	r0, [r2, #0]
 8003054:	6053      	str	r3, [r2, #4]
 8003056:	e7da      	b.n	800300e <_free_r+0x22>
 8003058:	d902      	bls.n	8003060 <_free_r+0x74>
 800305a:	230c      	movs	r3, #12
 800305c:	602b      	str	r3, [r5, #0]
 800305e:	e7d6      	b.n	800300e <_free_r+0x22>
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	1821      	adds	r1, r4, r0
 8003064:	428b      	cmp	r3, r1
 8003066:	bf01      	itttt	eq
 8003068:	6819      	ldreq	r1, [r3, #0]
 800306a:	685b      	ldreq	r3, [r3, #4]
 800306c:	1809      	addeq	r1, r1, r0
 800306e:	6021      	streq	r1, [r4, #0]
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	6054      	str	r4, [r2, #4]
 8003074:	e7cb      	b.n	800300e <_free_r+0x22>
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	20000130 	.word	0x20000130

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
