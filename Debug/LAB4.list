
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00004154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003158  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000078  080031d0  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080031d0  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f69  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  0000e00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  000100b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000831  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018414  00000000  00000000  000113c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ea  00000000  00000000  000297dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b8c  00000000  00000000  000380c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdc53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000bdc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000c09bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003114 	.word	0x08003114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003114 	.word	0x08003114

0800014c <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};
uint8_t count = 0;
void getKeyinput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (count > 0 ) count--;
 8000150:	4b1f      	ldr	r3, [pc, #124]	@ (80001d0 <getKeyinput+0x84>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d005      	beq.n	8000164 <getKeyinput+0x18>
 8000158:	4b1d      	ldr	r3, [pc, #116]	@ (80001d0 <getKeyinput+0x84>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b1b      	ldr	r3, [pc, #108]	@ (80001d0 <getKeyinput+0x84>)
 8000162:	701a      	strb	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin) == 0)){
 8000164:	4b1a      	ldr	r3, [pc, #104]	@ (80001d0 <getKeyinput+0x84>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d10c      	bne.n	8000186 <getKeyinput+0x3a>
 800016c:	2101      	movs	r1, #1
 800016e:	4819      	ldr	r0, [pc, #100]	@ (80001d4 <getKeyinput+0x88>)
 8000170:	f001 fe84 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 800017a:	4b17      	ldr	r3, [pc, #92]	@ (80001d8 <getKeyinput+0x8c>)
 800017c:	2201      	movs	r2, #1
 800017e:	601a      	str	r2, [r3, #0]
		count = 20;
 8000180:	4b13      	ldr	r3, [pc, #76]	@ (80001d0 <getKeyinput+0x84>)
 8000182:	2214      	movs	r2, #20
 8000184:	701a      	strb	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin) == 0)){
 8000186:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <getKeyinput+0x84>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10c      	bne.n	80001a8 <getKeyinput+0x5c>
 800018e:	2102      	movs	r1, #2
 8000190:	4810      	ldr	r0, [pc, #64]	@ (80001d4 <getKeyinput+0x88>)
 8000192:	f001 fe73 	bl	8001e7c <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d105      	bne.n	80001a8 <getKeyinput+0x5c>
		buttonFlag[1] = 1;
 800019c:	4b0e      	ldr	r3, [pc, #56]	@ (80001d8 <getKeyinput+0x8c>)
 800019e:	2201      	movs	r2, #1
 80001a0:	605a      	str	r2, [r3, #4]
		count = 20;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <getKeyinput+0x84>)
 80001a4:	2214      	movs	r2, #20
 80001a6:	701a      	strb	r2, [r3, #0]
	}
	// ----- PROCESS BUTTON 3 -----------
	if((count <= 0) && (HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin) == 0)){
 80001a8:	4b09      	ldr	r3, [pc, #36]	@ (80001d0 <getKeyinput+0x84>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d10c      	bne.n	80001ca <getKeyinput+0x7e>
 80001b0:	2104      	movs	r1, #4
 80001b2:	4808      	ldr	r0, [pc, #32]	@ (80001d4 <getKeyinput+0x88>)
 80001b4:	f001 fe62 	bl	8001e7c <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d105      	bne.n	80001ca <getKeyinput+0x7e>
		buttonFlag[2] = 1;
 80001be:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <getKeyinput+0x8c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	609a      	str	r2, [r3, #8]
		count = 20;
 80001c4:	4b02      	ldr	r3, [pc, #8]	@ (80001d0 <getKeyinput+0x84>)
 80001c6:	2214      	movs	r2, #20
 80001c8:	701a      	strb	r2, [r3, #0]
	}

}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	20000094 	.word	0x20000094

080001dc <isButtonPress>:
int isButtonPress(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <isButtonPress+0x30>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d106      	bne.n	80001fe <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80001f0:	4a06      	ldr	r2, [pc, #24]	@ (800020c <isButtonPress+0x30>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2100      	movs	r1, #0
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e000      	b.n	8000200 <isButtonPress+0x24>
	}
	return 0;
 80001fe:	2300      	movs	r3, #0
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000094 	.word	0x20000094

08000210 <fsm_auto_run>:
 */

#include "fsm_auto.h"

uint8_t temp_task;
void fsm_auto_run(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 8000214:	4b8f      	ldr	r3, [pc, #572]	@ (8000454 <fsm_auto_run+0x244>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b04      	cmp	r3, #4
 800021a:	f200 8119 	bhi.w	8000450 <fsm_auto_run+0x240>
 800021e:	a201      	add	r2, pc, #4	@ (adr r2, 8000224 <fsm_auto_run+0x14>)
 8000220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000224:	08000239 	.word	0x08000239
 8000228:	080002ad 	.word	0x080002ad
 800022c:	0800031d 	.word	0x0800031d
 8000230:	0800032d 	.word	0x0800032d
 8000234:	0800039d 	.word	0x0800039d
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 8000238:	f000 ff16 	bl	8001068 <single_LED_off>
			count0 = (time_red_green + time_red_yellow)/1000;
 800023c:	4b86      	ldr	r3, [pc, #536]	@ (8000458 <fsm_auto_run+0x248>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b86      	ldr	r3, [pc, #536]	@ (800045c <fsm_auto_run+0x24c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4413      	add	r3, r2
 8000246:	4a86      	ldr	r2, [pc, #536]	@ (8000460 <fsm_auto_run+0x250>)
 8000248:	fb82 1203 	smull	r1, r2, r2, r3
 800024c:	1192      	asrs	r2, r2, #6
 800024e:	17db      	asrs	r3, r3, #31
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	4a84      	ldr	r2, [pc, #528]	@ (8000464 <fsm_auto_run+0x254>)
 8000254:	6013      	str	r3, [r2, #0]
			count1 = time_red_green/1000;
 8000256:	4b80      	ldr	r3, [pc, #512]	@ (8000458 <fsm_auto_run+0x248>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a81      	ldr	r2, [pc, #516]	@ (8000460 <fsm_auto_run+0x250>)
 800025c:	fb82 1203 	smull	r1, r2, r2, r3
 8000260:	1192      	asrs	r2, r2, #6
 8000262:	17db      	asrs	r3, r3, #31
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	4a80      	ldr	r2, [pc, #512]	@ (8000468 <fsm_auto_run+0x258>)
 8000268:	6013      	str	r3, [r2, #0]
			updateClockBuffer(count0, count1);
 800026a:	4b7e      	ldr	r3, [pc, #504]	@ (8000464 <fsm_auto_run+0x254>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a7e      	ldr	r2, [pc, #504]	@ (8000468 <fsm_auto_run+0x258>)
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	4611      	mov	r1, r2
 8000274:	4618      	mov	r0, r3
 8000276:	f000 febb 	bl	8000ff0 <updateClockBuffer>
			status = auto_red_green;
 800027a:	4b76      	ldr	r3, [pc, #472]	@ (8000454 <fsm_auto_run+0x244>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	4879      	ldr	r0, [pc, #484]	@ (800046c <fsm_auto_run+0x25c>)
 8000286:	f001 fe10 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800028a:	2200      	movs	r2, #0
 800028c:	2140      	movs	r1, #64	@ 0x40
 800028e:	4877      	ldr	r0, [pc, #476]	@ (800046c <fsm_auto_run+0x25c>)
 8000290:	f001 fe0b 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	4874      	ldr	r0, [pc, #464]	@ (800046c <fsm_auto_run+0x25c>)
 800029a:	f001 fe06 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a4:	4871      	ldr	r0, [pc, #452]	@ (800046c <fsm_auto_run+0x25c>)
 80002a6:	f001 fe00 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 80002aa:	e082      	b.n	80003b2 <fsm_auto_run+0x1a2>
		case auto_red_green:
			SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 80002ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000458 <fsm_auto_run+0x248>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	4619      	mov	r1, r3
 80002b4:	486e      	ldr	r0, [pc, #440]	@ (8000470 <fsm_auto_run+0x260>)
 80002b6:	f001 f855 	bl	8001364 <SCH_Add_Task>
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80002ba:	2001      	movs	r0, #1
 80002bc:	f7ff ff8e 	bl	80001dc <isButtonPress>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d172      	bne.n	80003ac <fsm_auto_run+0x19c>
				SCH_Delete_Task(fsm_switch_state_auto_red_yellow);
 80002c6:	486a      	ldr	r0, [pc, #424]	@ (8000470 <fsm_auto_run+0x260>)
 80002c8:	f001 f98a 	bl	80015e0 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 80002cc:	4869      	ldr	r0, [pc, #420]	@ (8000474 <fsm_auto_run+0x264>)
 80002ce:	f001 f987 	bl	80015e0 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 80002d2:	4869      	ldr	r0, [pc, #420]	@ (8000478 <fsm_auto_run+0x268>)
 80002d4:	f001 f984 	bl	80015e0 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 100, 10);
 80002d8:	220a      	movs	r2, #10
 80002da:	2164      	movs	r1, #100	@ 0x64
 80002dc:	4867      	ldr	r0, [pc, #412]	@ (800047c <fsm_auto_run+0x26c>)
 80002de:	f001 f841 	bl	8001364 <SCH_Add_Task>
				status = manual_red_green;
 80002e2:	4b5c      	ldr	r3, [pc, #368]	@ (8000454 <fsm_auto_run+0x244>)
 80002e4:	2205      	movs	r2, #5
 80002e6:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80002e8:	f000 fc3c 	bl	8000b64 <Diable_Led>
				single_LED_off();
 80002ec:	f000 febc 	bl	8001068 <single_LED_off>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2108      	movs	r1, #8
 80002f4:	485d      	ldr	r0, [pc, #372]	@ (800046c <fsm_auto_run+0x25c>)
 80002f6:	f001 fdd8 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000300:	485a      	ldr	r0, [pc, #360]	@ (800046c <fsm_auto_run+0x25c>)
 8000302:	f001 fdd2 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2140      	movs	r1, #64	@ 0x40
 800030a:	4858      	ldr	r0, [pc, #352]	@ (800046c <fsm_auto_run+0x25c>)
 800030c:	f001 fdcd 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2120      	movs	r1, #32
 8000314:	4855      	ldr	r0, [pc, #340]	@ (800046c <fsm_auto_run+0x25c>)
 8000316:	f001 fdc8 	bl	8001eaa <HAL_GPIO_WritePin>
				return;
 800031a:	e09a      	b.n	8000452 <fsm_auto_run+0x242>
			}
			break;
		case auto_red_yellow:
			SCH_Add_Task(fsm_switch_state_auto_green_red, time_red_yellow, 0);
 800031c:	4b4f      	ldr	r3, [pc, #316]	@ (800045c <fsm_auto_run+0x24c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2200      	movs	r2, #0
 8000322:	4619      	mov	r1, r3
 8000324:	4856      	ldr	r0, [pc, #344]	@ (8000480 <fsm_auto_run+0x270>)
 8000326:	f001 f81d 	bl	8001364 <SCH_Add_Task>
			break;
 800032a:	e042      	b.n	80003b2 <fsm_auto_run+0x1a2>
		case auto_green_red:
			SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);
 800032c:	4b4a      	ldr	r3, [pc, #296]	@ (8000458 <fsm_auto_run+0x248>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2200      	movs	r2, #0
 8000332:	4619      	mov	r1, r3
 8000334:	4853      	ldr	r0, [pc, #332]	@ (8000484 <fsm_auto_run+0x274>)
 8000336:	f001 f815 	bl	8001364 <SCH_Add_Task>
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff4e 	bl	80001dc <isButtonPress>
 8000340:	4603      	mov	r3, r0
 8000342:	2b01      	cmp	r3, #1
 8000344:	d134      	bne.n	80003b0 <fsm_auto_run+0x1a0>
				SCH_Delete_Task(fsm_switch_state_auto_yellow_red);
 8000346:	484f      	ldr	r0, [pc, #316]	@ (8000484 <fsm_auto_run+0x274>)
 8000348:	f001 f94a 	bl	80015e0 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 800034c:	4849      	ldr	r0, [pc, #292]	@ (8000474 <fsm_auto_run+0x264>)
 800034e:	f001 f947 	bl	80015e0 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 8000352:	4849      	ldr	r0, [pc, #292]	@ (8000478 <fsm_auto_run+0x268>)
 8000354:	f001 f944 	bl	80015e0 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 100, 10);
 8000358:	220a      	movs	r2, #10
 800035a:	2164      	movs	r1, #100	@ 0x64
 800035c:	4847      	ldr	r0, [pc, #284]	@ (800047c <fsm_auto_run+0x26c>)
 800035e:	f001 f801 	bl	8001364 <SCH_Add_Task>
				status = manual_green_red;
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <fsm_auto_run+0x244>)
 8000364:	2206      	movs	r2, #6
 8000366:	601a      	str	r2, [r3, #0]
				Diable_Led();
 8000368:	f000 fbfc 	bl	8000b64 <Diable_Led>
				single_LED_off();
 800036c:	f000 fe7c 	bl	8001068 <single_LED_off>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2140      	movs	r1, #64	@ 0x40
 8000374:	483d      	ldr	r0, [pc, #244]	@ (800046c <fsm_auto_run+0x25c>)
 8000376:	f001 fd98 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 800037a:	2201      	movs	r2, #1
 800037c:	2120      	movs	r1, #32
 800037e:	483b      	ldr	r0, [pc, #236]	@ (800046c <fsm_auto_run+0x25c>)
 8000380:	f001 fd93 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	4838      	ldr	r0, [pc, #224]	@ (800046c <fsm_auto_run+0x25c>)
 800038a:	f001 fd8e 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000394:	4835      	ldr	r0, [pc, #212]	@ (800046c <fsm_auto_run+0x25c>)
 8000396:	f001 fd88 	bl	8001eaa <HAL_GPIO_WritePin>
				return;
 800039a:	e05a      	b.n	8000452 <fsm_auto_run+0x242>
			}
			break;
		case auto_yellow_red:
			SCH_Add_Task(fsm_switch_state_auto_red_green, time_red_yellow, 0);
 800039c:	4b2f      	ldr	r3, [pc, #188]	@ (800045c <fsm_auto_run+0x24c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4838      	ldr	r0, [pc, #224]	@ (8000488 <fsm_auto_run+0x278>)
 80003a6:	f000 ffdd 	bl	8001364 <SCH_Add_Task>
			break;
 80003aa:	e002      	b.n	80003b2 <fsm_auto_run+0x1a2>
			break;
 80003ac:	bf00      	nop
 80003ae:	e000      	b.n	80003b2 <fsm_auto_run+0x1a2>
			break;
 80003b0:	bf00      	nop
		default: // ----- MANUAL MODE & SETTING MODE & SLOW MODE---------
			return;
	}
	// -------SWITCHING SLOW MODE ---------------
	if(isButtonPress(0) == 1){
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ff12 	bl	80001dc <isButtonPress>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d116      	bne.n	80003ec <fsm_auto_run+0x1dc>
		SCH_Delete_Task(list.tail->pTask); // DELETE TASK SWITCH STATE
 80003be:	4b33      	ldr	r3, [pc, #204]	@ (800048c <fsm_auto_run+0x27c>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 f90b 	bl	80015e0 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 80003ca:	482a      	ldr	r0, [pc, #168]	@ (8000474 <fsm_auto_run+0x264>)
 80003cc:	f001 f908 	bl	80015e0 <SCH_Delete_Task>
		SCH_Delete_Task(Scan7SEG);
 80003d0:	4829      	ldr	r0, [pc, #164]	@ (8000478 <fsm_auto_run+0x268>)
 80003d2:	f001 f905 	bl	80015e0 <SCH_Delete_Task>
		SCH_Add_Task(fsm_slow_run, 0, 500);
 80003d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003da:	2100      	movs	r1, #0
 80003dc:	482c      	ldr	r0, [pc, #176]	@ (8000490 <fsm_auto_run+0x280>)
 80003de:	f000 ffc1 	bl	8001364 <SCH_Add_Task>
		single_LED_off();// ------ALL LED OFF----------
 80003e2:	f000 fe41 	bl	8001068 <single_LED_off>
		Diable_Led(); //--- Disable led 7 segment ------
 80003e6:	f000 fbbd 	bl	8000b64 <Diable_Led>
		return;
 80003ea:	e032      	b.n	8000452 <fsm_auto_run+0x242>
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 80003ec:	2002      	movs	r0, #2
 80003ee:	f7ff fef5 	bl	80001dc <isButtonPress>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d12c      	bne.n	8000452 <fsm_auto_run+0x242>
		time_red_yellow = 0;
 80003f8:	4b18      	ldr	r3, [pc, #96]	@ (800045c <fsm_auto_run+0x24c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <fsm_auto_run+0x248>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000404:	2101      	movs	r1, #1
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fdf2 	bl	8000ff0 <updateClockBuffer>
		status = set_green;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <fsm_auto_run+0x244>)
 800040e:	2208      	movs	r2, #8
 8000410:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(list.tail->pTask); // DELETE TASK SWITCH STATE
 8000412:	4b1e      	ldr	r3, [pc, #120]	@ (800048c <fsm_auto_run+0x27c>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f001 f8e1 	bl	80015e0 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 800041e:	4815      	ldr	r0, [pc, #84]	@ (8000474 <fsm_auto_run+0x264>)
 8000420:	f001 f8de 	bl	80015e0 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 8000424:	481b      	ldr	r0, [pc, #108]	@ (8000494 <fsm_auto_run+0x284>)
 8000426:	f001 f8db 	bl	80015e0 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 100, 10);
 800042a:	220a      	movs	r2, #10
 800042c:	2164      	movs	r1, #100	@ 0x64
 800042e:	481a      	ldr	r0, [pc, #104]	@ (8000498 <fsm_auto_run+0x288>)
 8000430:	f000 ff98 	bl	8001364 <SCH_Add_Task>
		single_LED_off();
 8000434:	f000 fe18 	bl	8001068 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	2120      	movs	r1, #32
 800043c:	480b      	ldr	r0, [pc, #44]	@ (800046c <fsm_auto_run+0x25c>)
 800043e:	f001 fd34 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000448:	4808      	ldr	r0, [pc, #32]	@ (800046c <fsm_auto_run+0x25c>)
 800044a:	f001 fd2e 	bl	8001eaa <HAL_GPIO_WritePin>
 800044e:	e000      	b.n	8000452 <fsm_auto_run+0x242>
			return;
 8000450:	bf00      	nop
	}
}
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000ac 	.word	0x200000ac
 8000458:	20000014 	.word	0x20000014
 800045c:	20000018 	.word	0x20000018
 8000460:	10624dd3 	.word	0x10624dd3
 8000464:	200000b0 	.word	0x200000b0
 8000468:	200000b4 	.word	0x200000b4
 800046c:	40010800 	.word	0x40010800
 8000470:	08000521 	.word	0x08000521
 8000474:	08000211 	.word	0x08000211
 8000478:	08000b99 	.word	0x08000b99
 800047c:	080006ad 	.word	0x080006ad
 8000480:	08000585 	.word	0x08000585
 8000484:	08000605 	.word	0x08000605
 8000488:	0800049d 	.word	0x0800049d
 800048c:	20000114 	.word	0x20000114
 8000490:	08000b0d 	.word	0x08000b0d
 8000494:	08000669 	.word	0x08000669
 8000498:	080008a9 	.word	0x080008a9

0800049c <fsm_switch_state_auto_red_green>:
void fsm_switch_state_auto_init(){
	status = auto_init;
}
void fsm_switch_state_auto_red_green(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 off
 80004a0:	2200      	movs	r2, #0
 80004a2:	2110      	movs	r1, #16
 80004a4:	4817      	ldr	r0, [pc, #92]	@ (8000504 <fsm_switch_state_auto_red_green+0x68>)
 80004a6:	f001 fd00 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 80004aa:	2200      	movs	r2, #0
 80004ac:	2140      	movs	r1, #64	@ 0x40
 80004ae:	4815      	ldr	r0, [pc, #84]	@ (8000504 <fsm_switch_state_auto_red_green+0x68>)
 80004b0:	f001 fcfb 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red0 on
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	4812      	ldr	r0, [pc, #72]	@ (8000504 <fsm_switch_state_auto_red_green+0x68>)
 80004ba:	f001 fcf6 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 on
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004c4:	480f      	ldr	r0, [pc, #60]	@ (8000504 <fsm_switch_state_auto_red_green+0x68>)
 80004c6:	f001 fcf0 	bl	8001eaa <HAL_GPIO_WritePin>
	status = auto_red_green;
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <fsm_switch_state_auto_red_green+0x6c>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green + time_red_yellow)/1000;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <fsm_switch_state_auto_red_green+0x70>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <fsm_switch_state_auto_red_green+0x74>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4413      	add	r3, r2
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <fsm_switch_state_auto_red_green+0x78>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1192      	asrs	r2, r2, #6
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <fsm_switch_state_auto_red_green+0x7c>)
 80004e8:	6013      	str	r3, [r2, #0]
	count1 = time_red_green/1000;
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <fsm_switch_state_auto_red_green+0x70>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <fsm_switch_state_auto_red_green+0x78>)
 80004f0:	fb82 1203 	smull	r1, r2, r2, r3
 80004f4:	1192      	asrs	r2, r2, #6
 80004f6:	17db      	asrs	r3, r3, #31
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	4a08      	ldr	r2, [pc, #32]	@ (800051c <fsm_switch_state_auto_red_green+0x80>)
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010800 	.word	0x40010800
 8000508:	200000ac 	.word	0x200000ac
 800050c:	20000014 	.word	0x20000014
 8000510:	20000018 	.word	0x20000018
 8000514:	10624dd3 	.word	0x10624dd3
 8000518:	200000b0 	.word	0x200000b0
 800051c:	200000b4 	.word	0x200000b4

08000520 <fsm_switch_state_auto_red_yellow>:
void fsm_switch_state_auto_red_yellow(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 off
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052a:	4810      	ldr	r0, [pc, #64]	@ (800056c <fsm_switch_state_auto_red_yellow+0x4c>)
 800052c:	f001 fcbd 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow1 on
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	480d      	ldr	r0, [pc, #52]	@ (800056c <fsm_switch_state_auto_red_yellow+0x4c>)
 8000536:	f001 fcb8 	bl	8001eaa <HAL_GPIO_WritePin>
	status = auto_red_yellow;
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <fsm_switch_state_auto_red_yellow+0x50>)
 800053c:	2202      	movs	r2, #2
 800053e:	601a      	str	r2, [r3, #0]
	count0 = time_red_yellow/1000;;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <fsm_switch_state_auto_red_yellow+0x54>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <fsm_switch_state_auto_red_yellow+0x58>)
 8000546:	fb82 1203 	smull	r1, r2, r2, r3
 800054a:	1192      	asrs	r2, r2, #6
 800054c:	17db      	asrs	r3, r3, #31
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <fsm_switch_state_auto_red_yellow+0x5c>)
 8000552:	6013      	str	r3, [r2, #0]
	count1 = time_red_yellow/1000;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <fsm_switch_state_auto_red_yellow+0x54>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <fsm_switch_state_auto_red_yellow+0x58>)
 800055a:	fb82 1203 	smull	r1, r2, r2, r3
 800055e:	1192      	asrs	r2, r2, #6
 8000560:	17db      	asrs	r3, r3, #31
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <fsm_switch_state_auto_red_yellow+0x60>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40010800 	.word	0x40010800
 8000570:	200000ac 	.word	0x200000ac
 8000574:	20000018 	.word	0x20000018
 8000578:	10624dd3 	.word	0x10624dd3
 800057c:	200000b0 	.word	0x200000b0
 8000580:	200000b4 	.word	0x200000b4

08000584 <fsm_switch_state_auto_green_red>:
void fsm_switch_state_auto_green_red(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red 0 off
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	4816      	ldr	r0, [pc, #88]	@ (80005e8 <fsm_switch_state_auto_green_red+0x64>)
 800058e:	f001 fc8c 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow 1 off
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <fsm_switch_state_auto_green_red+0x64>)
 8000598:	f001 fc87 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 on
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4811      	ldr	r0, [pc, #68]	@ (80005e8 <fsm_switch_state_auto_green_red+0x64>)
 80005a2:	f001 fc82 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 80005a6:	2201      	movs	r2, #1
 80005a8:	2140      	movs	r1, #64	@ 0x40
 80005aa:	480f      	ldr	r0, [pc, #60]	@ (80005e8 <fsm_switch_state_auto_green_red+0x64>)
 80005ac:	f001 fc7d 	bl	8001eaa <HAL_GPIO_WritePin>
	status = auto_green_red;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <fsm_switch_state_auto_green_red+0x68>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green)/1000;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <fsm_switch_state_auto_green_red+0x6c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <fsm_switch_state_auto_green_red+0x70>)
 80005bc:	fb82 1203 	smull	r1, r2, r2, r3
 80005c0:	1192      	asrs	r2, r2, #6
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <fsm_switch_state_auto_green_red+0x74>)
 80005c8:	6013      	str	r3, [r2, #0]
	count1 = (time_red_green + time_red_yellow)/1000;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <fsm_switch_state_auto_green_red+0x6c>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <fsm_switch_state_auto_green_red+0x78>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a07      	ldr	r2, [pc, #28]	@ (80005f4 <fsm_switch_state_auto_green_red+0x70>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	1192      	asrs	r2, r2, #6
 80005dc:	17db      	asrs	r3, r3, #31
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <fsm_switch_state_auto_green_red+0x7c>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010800 	.word	0x40010800
 80005ec:	200000ac 	.word	0x200000ac
 80005f0:	20000014 	.word	0x20000014
 80005f4:	10624dd3 	.word	0x10624dd3
 80005f8:	200000b0 	.word	0x200000b0
 80005fc:	20000018 	.word	0x20000018
 8000600:	200000b4 	.word	0x200000b4

08000604 <fsm_switch_state_auto_yellow_red>:
void fsm_switch_state_auto_yellow_red(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 on
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	4810      	ldr	r0, [pc, #64]	@ (8000650 <fsm_switch_state_auto_yellow_red+0x4c>)
 800060e:	f001 fc4c 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 off
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	480e      	ldr	r0, [pc, #56]	@ (8000650 <fsm_switch_state_auto_yellow_red+0x4c>)
 8000618:	f001 fc47 	bl	8001eaa <HAL_GPIO_WritePin>
	status = auto_yellow_red;
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <fsm_switch_state_auto_yellow_red+0x50>)
 800061e:	2204      	movs	r2, #4
 8000620:	601a      	str	r2, [r3, #0]
	count0 = time_red_yellow/1000;
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <fsm_switch_state_auto_yellow_red+0x54>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <fsm_switch_state_auto_yellow_red+0x58>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	1192      	asrs	r2, r2, #6
 800062e:	17db      	asrs	r3, r3, #31
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <fsm_switch_state_auto_yellow_red+0x5c>)
 8000634:	6013      	str	r3, [r2, #0]
	count1 = time_red_yellow/1000;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <fsm_switch_state_auto_yellow_red+0x54>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <fsm_switch_state_auto_yellow_red+0x58>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1192      	asrs	r2, r2, #6
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	4a07      	ldr	r2, [pc, #28]	@ (8000664 <fsm_switch_state_auto_yellow_red+0x60>)
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010800 	.word	0x40010800
 8000654:	200000ac 	.word	0x200000ac
 8000658:	20000018 	.word	0x20000018
 800065c:	10624dd3 	.word	0x10624dd3
 8000660:	200000b0 	.word	0x200000b0
 8000664:	200000b4 	.word	0x200000b4

08000668 <count_1_second>:
void count_1_second(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if(count0 > 0)
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <count_1_second+0x3c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	dd04      	ble.n	800067e <count_1_second+0x16>
		count0 --;
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <count_1_second+0x3c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <count_1_second+0x3c>)
 800067c:	6013      	str	r3, [r2, #0]
	if(count1 > 0)
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <count_1_second+0x40>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	dd04      	ble.n	8000690 <count_1_second+0x28>
		count1 --;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <count_1_second+0x40>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <count_1_second+0x40>)
 800068e:	6013      	str	r3, [r2, #0]
	updateClockBuffer(count0, count1);
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <count_1_second+0x3c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <count_1_second+0x40>)
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fca8 	bl	8000ff0 <updateClockBuffer>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000b0 	.word	0x200000b0
 80006a8:	200000b4 	.word	0x200000b4

080006ac <fsm_manual>:
 *  Created on: Nov 19, 2024
 *      Author: HOME
 */
#include "fsm_manual.h"

void fsm_manual(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	switch (status) {
 80006b0:	4b71      	ldr	r3, [pc, #452]	@ (8000878 <fsm_manual+0x1cc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	d002      	beq.n	80006be <fsm_manual+0x12>
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d055      	beq.n	8000768 <fsm_manual+0xbc>
				updateClockBuffer(count0, count1);
				return;
			}
			break;
		default:
			return;
 80006bc:	e0db      	b.n	8000876 <fsm_manual+0x1ca>
			if(isButtonPress(1) == 1){
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fd8c 	bl	80001dc <isButtonPress>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d117      	bne.n	80006fa <fsm_manual+0x4e>
				status = manual_green_red;
 80006ca:	4b6b      	ldr	r3, [pc, #428]	@ (8000878 <fsm_manual+0x1cc>)
 80006cc:	2206      	movs	r2, #6
 80006ce:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2140      	movs	r1, #64	@ 0x40
 80006d4:	4869      	ldr	r0, [pc, #420]	@ (800087c <fsm_manual+0x1d0>)
 80006d6:	f001 fbe8 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4867      	ldr	r0, [pc, #412]	@ (800087c <fsm_manual+0x1d0>)
 80006e0:	f001 fbe3 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	4864      	ldr	r0, [pc, #400]	@ (800087c <fsm_manual+0x1d0>)
 80006ea:	f001 fbde 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f4:	4861      	ldr	r0, [pc, #388]	@ (800087c <fsm_manual+0x1d0>)
 80006f6:	f001 fbd8 	bl	8001eaa <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fd6e 	bl	80001dc <isButtonPress>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	f040 8084 	bne.w	8000810 <fsm_manual+0x164>
				SCH_Add_Task(fsm_auto_run, 100, 10);
 8000708:	220a      	movs	r2, #10
 800070a:	2164      	movs	r1, #100	@ 0x64
 800070c:	485c      	ldr	r0, [pc, #368]	@ (8000880 <fsm_manual+0x1d4>)
 800070e:	f000 fe29 	bl	8001364 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 100, 250);
 8000712:	22fa      	movs	r2, #250	@ 0xfa
 8000714:	2164      	movs	r1, #100	@ 0x64
 8000716:	485b      	ldr	r0, [pc, #364]	@ (8000884 <fsm_manual+0x1d8>)
 8000718:	f000 fe24 	bl	8001364 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 800071c:	485a      	ldr	r0, [pc, #360]	@ (8000888 <fsm_manual+0x1dc>)
 800071e:	f000 ff5f 	bl	80015e0 <SCH_Delete_Task>
				status = auto_red_green;
 8000722:	4b55      	ldr	r3, [pc, #340]	@ (8000878 <fsm_manual+0x1cc>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000728:	4b58      	ldr	r3, [pc, #352]	@ (800088c <fsm_manual+0x1e0>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <fsm_manual+0x1e4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	4a58      	ldr	r2, [pc, #352]	@ (8000894 <fsm_manual+0x1e8>)
 8000734:	fb82 1203 	smull	r1, r2, r2, r3
 8000738:	1192      	asrs	r2, r2, #6
 800073a:	17db      	asrs	r3, r3, #31
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	4a56      	ldr	r2, [pc, #344]	@ (8000898 <fsm_manual+0x1ec>)
 8000740:	6013      	str	r3, [r2, #0]
				count1 = time_red_green / 1000;
 8000742:	4b52      	ldr	r3, [pc, #328]	@ (800088c <fsm_manual+0x1e0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a53      	ldr	r2, [pc, #332]	@ (8000894 <fsm_manual+0x1e8>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1192      	asrs	r2, r2, #6
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4a52      	ldr	r2, [pc, #328]	@ (800089c <fsm_manual+0x1f0>)
 8000754:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 8000756:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <fsm_manual+0x1ec>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a50      	ldr	r2, [pc, #320]	@ (800089c <fsm_manual+0x1f0>)
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fc45 	bl	8000ff0 <updateClockBuffer>
				return;
 8000766:	e086      	b.n	8000876 <fsm_manual+0x1ca>
			if(isButtonPress(1) == 1){
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fd37 	bl	80001dc <isButtonPress>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d117      	bne.n	80007a4 <fsm_manual+0xf8>
				status = manual_red_green;
 8000774:	4b40      	ldr	r3, [pc, #256]	@ (8000878 <fsm_manual+0x1cc>)
 8000776:	2205      	movs	r2, #5
 8000778:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2108      	movs	r1, #8
 800077e:	483f      	ldr	r0, [pc, #252]	@ (800087c <fsm_manual+0x1d0>)
 8000780:	f001 fb93 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800078a:	483c      	ldr	r0, [pc, #240]	@ (800087c <fsm_manual+0x1d0>)
 800078c:	f001 fb8d 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	@ 0x40
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <fsm_manual+0x1d0>)
 8000796:	f001 fb88 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4837      	ldr	r0, [pc, #220]	@ (800087c <fsm_manual+0x1d0>)
 80007a0:	f001 fb83 	bl	8001eaa <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fd19 	bl	80001dc <isButtonPress>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d131      	bne.n	8000814 <fsm_manual+0x168>
				SCH_Add_Task(fsm_auto_run, 100, 10);
 80007b0:	220a      	movs	r2, #10
 80007b2:	2164      	movs	r1, #100	@ 0x64
 80007b4:	4832      	ldr	r0, [pc, #200]	@ (8000880 <fsm_manual+0x1d4>)
 80007b6:	f000 fdd5 	bl	8001364 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 100, 250);
 80007ba:	22fa      	movs	r2, #250	@ 0xfa
 80007bc:	2164      	movs	r1, #100	@ 0x64
 80007be:	4831      	ldr	r0, [pc, #196]	@ (8000884 <fsm_manual+0x1d8>)
 80007c0:	f000 fdd0 	bl	8001364 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 80007c4:	4830      	ldr	r0, [pc, #192]	@ (8000888 <fsm_manual+0x1dc>)
 80007c6:	f000 ff0b 	bl	80015e0 <SCH_Delete_Task>
				status = auto_green_red;
 80007ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000878 <fsm_manual+0x1cc>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <fsm_manual+0x1e0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000894 <fsm_manual+0x1e8>)
 80007d6:	fb82 1203 	smull	r1, r2, r2, r3
 80007da:	1192      	asrs	r2, r2, #6
 80007dc:	17db      	asrs	r3, r3, #31
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <fsm_manual+0x1ec>)
 80007e2:	6013      	str	r3, [r2, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <fsm_manual+0x1e0>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <fsm_manual+0x1e4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a29      	ldr	r2, [pc, #164]	@ (8000894 <fsm_manual+0x1e8>)
 80007f0:	fb82 1203 	smull	r1, r2, r2, r3
 80007f4:	1192      	asrs	r2, r2, #6
 80007f6:	17db      	asrs	r3, r3, #31
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a28      	ldr	r2, [pc, #160]	@ (800089c <fsm_manual+0x1f0>)
 80007fc:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <fsm_manual+0x1ec>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a26      	ldr	r2, [pc, #152]	@ (800089c <fsm_manual+0x1f0>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fbf1 	bl	8000ff0 <updateClockBuffer>
				return;
 800080e:	e032      	b.n	8000876 <fsm_manual+0x1ca>
			break;
 8000810:	bf00      	nop
 8000812:	e000      	b.n	8000816 <fsm_manual+0x16a>
			break;
 8000814:	bf00      	nop
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fce0 	bl	80001dc <isButtonPress>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d129      	bne.n	8000876 <fsm_manual+0x1ca>
		time_red_yellow = 0;
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <fsm_manual+0x1e4>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <fsm_manual+0x1e0>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 800082e:	2101      	movs	r1, #1
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fbdd 	bl	8000ff0 <updateClockBuffer>
		status = set_green;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <fsm_manual+0x1cc>)
 8000838:	2208      	movs	r2, #8
 800083a:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(fsm_manual);
 800083c:	4812      	ldr	r0, [pc, #72]	@ (8000888 <fsm_manual+0x1dc>)
 800083e:	f000 fecf 	bl	80015e0 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 8000842:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <fsm_manual+0x1f4>)
 8000844:	f000 fecc 	bl	80015e0 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 100, 10);
 8000848:	220a      	movs	r2, #10
 800084a:	2164      	movs	r1, #100	@ 0x64
 800084c:	4815      	ldr	r0, [pc, #84]	@ (80008a4 <fsm_manual+0x1f8>)
 800084e:	f000 fd89 	bl	8001364 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 250);
 8000852:	22fa      	movs	r2, #250	@ 0xfa
 8000854:	210a      	movs	r1, #10
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <fsm_manual+0x1d8>)
 8000858:	f000 fd84 	bl	8001364 <SCH_Add_Task>
		single_LED_off();
 800085c:	f000 fc04 	bl	8001068 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	2120      	movs	r1, #32
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <fsm_manual+0x1d0>)
 8000866:	f001 fb20 	bl	8001eaa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <fsm_manual+0x1d0>)
 8000872:	f001 fb1a 	bl	8001eaa <HAL_GPIO_WritePin>
	}
}
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000ac 	.word	0x200000ac
 800087c:	40010800 	.word	0x40010800
 8000880:	08000211 	.word	0x08000211
 8000884:	08000b99 	.word	0x08000b99
 8000888:	080006ad 	.word	0x080006ad
 800088c:	20000014 	.word	0x20000014
 8000890:	20000018 	.word	0x20000018
 8000894:	10624dd3 	.word	0x10624dd3
 8000898:	200000b0 	.word	0x200000b0
 800089c:	200000b4 	.word	0x200000b4
 80008a0:	08000669 	.word	0x08000669
 80008a4:	080008a9 	.word	0x080008a9

080008a8 <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;
int temp =0 ;
void fsm_setting(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	switch (status) {
 80008ac:	4b8a      	ldr	r3, [pc, #552]	@ (8000ad8 <fsm_setting+0x230>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b07      	cmp	r3, #7
 80008b2:	d074      	beq.n	800099e <fsm_setting+0xf6>
 80008b4:	2b08      	cmp	r3, #8
 80008b6:	f040 810c 	bne.w	8000ad2 <fsm_setting+0x22a>
		case set_green:
			if(isButtonPress(0) == 1){  // TIME INCREASE
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fc8e 	bl	80001dc <isButtonPress>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12b      	bne.n	800091e <fsm_setting+0x76>
				time_red_green += increment[i];
 80008c6:	4b85      	ldr	r3, [pc, #532]	@ (8000adc <fsm_setting+0x234>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a85      	ldr	r2, [pc, #532]	@ (8000ae0 <fsm_setting+0x238>)
 80008cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d0:	4b84      	ldr	r3, [pc, #528]	@ (8000ae4 <fsm_setting+0x23c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a83      	ldr	r2, [pc, #524]	@ (8000ae4 <fsm_setting+0x23c>)
 80008d8:	6013      	str	r3, [r2, #0]
				temp = time_red_green;
 80008da:	4b82      	ldr	r3, [pc, #520]	@ (8000ae4 <fsm_setting+0x23c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a82      	ldr	r2, [pc, #520]	@ (8000ae8 <fsm_setting+0x240>)
 80008e0:	6013      	str	r3, [r2, #0]
				if(time_red_green > 98000){
 80008e2:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <fsm_setting+0x23c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a81      	ldr	r2, [pc, #516]	@ (8000aec <fsm_setting+0x244>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	dd02      	ble.n	80008f2 <fsm_setting+0x4a>
					time_red_green = 0;
 80008ec:	4b7d      	ldr	r3, [pc, #500]	@ (8000ae4 <fsm_setting+0x23c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
				}
				updateClockBuffer(time_red_green/1000, increment[i]/1000);
 80008f2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ae4 <fsm_setting+0x23c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a7e      	ldr	r2, [pc, #504]	@ (8000af0 <fsm_setting+0x248>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1192      	asrs	r2, r2, #6
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad0      	subs	r0, r2, r3
 8000902:	4b76      	ldr	r3, [pc, #472]	@ (8000adc <fsm_setting+0x234>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a76      	ldr	r2, [pc, #472]	@ (8000ae0 <fsm_setting+0x238>)
 8000908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090c:	4a78      	ldr	r2, [pc, #480]	@ (8000af0 <fsm_setting+0x248>)
 800090e:	fb82 1203 	smull	r1, r2, r2, r3
 8000912:	1192      	asrs	r2, r2, #6
 8000914:	17db      	asrs	r3, r3, #31
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	4619      	mov	r1, r3
 800091a:	f000 fb69 	bl	8000ff0 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fc5c 	bl	80001dc <isButtonPress>
 8000924:	4603      	mov	r3, r0
 8000926:	2b01      	cmp	r3, #1
 8000928:	f040 80a7 	bne.w	8000a7a <fsm_setting+0x1d2>
				i = 0;
 800092c:	4b6b      	ldr	r3, [pc, #428]	@ (8000adc <fsm_setting+0x234>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000932:	4b70      	ldr	r3, [pc, #448]	@ (8000af4 <fsm_setting+0x24c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a6e      	ldr	r2, [pc, #440]	@ (8000af0 <fsm_setting+0x248>)
 8000938:	fb82 1203 	smull	r1, r2, r2, r3
 800093c:	1192      	asrs	r2, r2, #6
 800093e:	17db      	asrs	r3, r3, #31
 8000940:	1ad0      	subs	r0, r2, r3
 8000942:	4b66      	ldr	r3, [pc, #408]	@ (8000adc <fsm_setting+0x234>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a66      	ldr	r2, [pc, #408]	@ (8000ae0 <fsm_setting+0x238>)
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	4a68      	ldr	r2, [pc, #416]	@ (8000af0 <fsm_setting+0x248>)
 800094e:	fb82 1203 	smull	r1, r2, r2, r3
 8000952:	1192      	asrs	r2, r2, #6
 8000954:	17db      	asrs	r3, r3, #31
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	4619      	mov	r1, r3
 800095a:	f000 fb49 	bl	8000ff0 <updateClockBuffer>
				temp = time_red_yellow;
 800095e:	4b65      	ldr	r3, [pc, #404]	@ (8000af4 <fsm_setting+0x24c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a61      	ldr	r2, [pc, #388]	@ (8000ae8 <fsm_setting+0x240>)
 8000964:	6013      	str	r3, [r2, #0]
				status = set_yellow;
 8000966:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad8 <fsm_setting+0x230>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2120      	movs	r1, #32
 8000970:	4861      	ldr	r0, [pc, #388]	@ (8000af8 <fsm_setting+0x250>)
 8000972:	f001 fa9a 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800097c:	485e      	ldr	r0, [pc, #376]	@ (8000af8 <fsm_setting+0x250>)
 800097e:	f001 fa94 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	2110      	movs	r1, #16
 8000986:	485c      	ldr	r0, [pc, #368]	@ (8000af8 <fsm_setting+0x250>)
 8000988:	f001 fa8f 	bl	8001eaa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	@ 0x80
 8000990:	4859      	ldr	r0, [pc, #356]	@ (8000af8 <fsm_setting+0x250>)
 8000992:	f001 fa8a 	bl	8001eaa <HAL_GPIO_WritePin>
				i = 0;
 8000996:	4b51      	ldr	r3, [pc, #324]	@ (8000adc <fsm_setting+0x234>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
			}
			break;
 800099c:	e06d      	b.n	8000a7a <fsm_setting+0x1d2>
		case set_yellow:
			if(isButtonPress(0) == 1){
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fc1c 	bl	80001dc <isButtonPress>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d123      	bne.n	80009f2 <fsm_setting+0x14a>
				time_red_yellow += increment[i];
 80009aa:	4b4c      	ldr	r3, [pc, #304]	@ (8000adc <fsm_setting+0x234>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a4c      	ldr	r2, [pc, #304]	@ (8000ae0 <fsm_setting+0x238>)
 80009b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b4:	4b4f      	ldr	r3, [pc, #316]	@ (8000af4 <fsm_setting+0x24c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a4e      	ldr	r2, [pc, #312]	@ (8000af4 <fsm_setting+0x24c>)
 80009bc:	6013      	str	r3, [r2, #0]
				temp = time_red_yellow;
 80009be:	4b4d      	ldr	r3, [pc, #308]	@ (8000af4 <fsm_setting+0x24c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a49      	ldr	r2, [pc, #292]	@ (8000ae8 <fsm_setting+0x240>)
 80009c4:	6013      	str	r3, [r2, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 80009c6:	4b4b      	ldr	r3, [pc, #300]	@ (8000af4 <fsm_setting+0x24c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a49      	ldr	r2, [pc, #292]	@ (8000af0 <fsm_setting+0x248>)
 80009cc:	fb82 1203 	smull	r1, r2, r2, r3
 80009d0:	1192      	asrs	r2, r2, #6
 80009d2:	17db      	asrs	r3, r3, #31
 80009d4:	1ad0      	subs	r0, r2, r3
 80009d6:	4b41      	ldr	r3, [pc, #260]	@ (8000adc <fsm_setting+0x234>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a41      	ldr	r2, [pc, #260]	@ (8000ae0 <fsm_setting+0x238>)
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	4a43      	ldr	r2, [pc, #268]	@ (8000af0 <fsm_setting+0x248>)
 80009e2:	fb82 1203 	smull	r1, r2, r2, r3
 80009e6:	1192      	asrs	r2, r2, #6
 80009e8:	17db      	asrs	r3, r3, #31
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	f000 faff 	bl	8000ff0 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fbf2 	bl	80001dc <isButtonPress>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d13f      	bne.n	8000a7e <fsm_setting+0x1d6>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 80009fe:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <fsm_setting+0x24c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <fsm_setting+0x23c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a3c      	ldr	r2, [pc, #240]	@ (8000afc <fsm_setting+0x254>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dd1f      	ble.n	8000a4e <fsm_setting+0x1a6>
 8000a0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ae4 <fsm_setting+0x23c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d11b      	bne.n	8000a4e <fsm_setting+0x1a6>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2110      	movs	r1, #16
 8000a1a:	4837      	ldr	r0, [pc, #220]	@ (8000af8 <fsm_setting+0x250>)
 8000a1c:	f001 fa45 	bl	8001eaa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	4834      	ldr	r0, [pc, #208]	@ (8000af8 <fsm_setting+0x250>)
 8000a26:	f001 fa40 	bl	8001eaa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4832      	ldr	r0, [pc, #200]	@ (8000af8 <fsm_setting+0x250>)
 8000a30:	f001 fa3b 	bl	8001eaa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3a:	482f      	ldr	r0, [pc, #188]	@ (8000af8 <fsm_setting+0x250>)
 8000a3c:	f001 fa35 	bl	8001eaa <HAL_GPIO_WritePin>
					status = set_green;
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <fsm_setting+0x230>)
 8000a42:	2208      	movs	r2, #8
 8000a44:	601a      	str	r2, [r3, #0]
					i = 0;
 8000a46:	4b25      	ldr	r3, [pc, #148]	@ (8000adc <fsm_setting+0x234>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
					SCH_Add_Task(fsm_auto_run, 100, 10);
					SCH_Add_Task(count_1_second, 1000, 1000);
					return;
				}
			}
			break;
 8000a4c:	e017      	b.n	8000a7e <fsm_setting+0x1d6>
					i = 0;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <fsm_setting+0x234>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
					status = auto_init;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <fsm_setting+0x230>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(fsm_setting);
 8000a5a:	4829      	ldr	r0, [pc, #164]	@ (8000b00 <fsm_setting+0x258>)
 8000a5c:	f000 fdc0 	bl	80015e0 <SCH_Delete_Task>
					SCH_Add_Task(fsm_auto_run, 100, 10);
 8000a60:	220a      	movs	r2, #10
 8000a62:	2164      	movs	r1, #100	@ 0x64
 8000a64:	4827      	ldr	r0, [pc, #156]	@ (8000b04 <fsm_setting+0x25c>)
 8000a66:	f000 fc7d 	bl	8001364 <SCH_Add_Task>
					SCH_Add_Task(count_1_second, 1000, 1000);
 8000a6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a72:	4825      	ldr	r0, [pc, #148]	@ (8000b08 <fsm_setting+0x260>)
 8000a74:	f000 fc76 	bl	8001364 <SCH_Add_Task>
					return;
 8000a78:	e02c      	b.n	8000ad4 <fsm_setting+0x22c>
			break;
 8000a7a:	bf00      	nop
 8000a7c:	e000      	b.n	8000a80 <fsm_setting+0x1d8>
			break;
 8000a7e:	bf00      	nop
		default:
			return;
	}
	if(isButtonPress(1) == 1){
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fbab 	bl	80001dc <isButtonPress>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d123      	bne.n	8000ad4 <fsm_setting+0x22c>
		 ++i;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <fsm_setting+0x234>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <fsm_setting+0x234>)
 8000a94:	6013      	str	r3, [r2, #0]
		 if(i >= 5) i = 0;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <fsm_setting+0x234>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	dd02      	ble.n	8000aa4 <fsm_setting+0x1fc>
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <fsm_setting+0x234>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		 updateClockBuffer(temp/1000, increment[i]/1000);
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <fsm_setting+0x240>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	@ (8000af0 <fsm_setting+0x248>)
 8000aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000aae:	1192      	asrs	r2, r2, #6
 8000ab0:	17db      	asrs	r3, r3, #31
 8000ab2:	1ad0      	subs	r0, r2, r3
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <fsm_setting+0x234>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <fsm_setting+0x238>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <fsm_setting+0x248>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1192      	asrs	r2, r2, #6
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	f000 fa90 	bl	8000ff0 <updateClockBuffer>
 8000ad0:	e000      	b.n	8000ad4 <fsm_setting+0x22c>
			return;
 8000ad2:	bf00      	nop
	}
}
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000014 	.word	0x20000014
 8000ae8:	200000a8 	.word	0x200000a8
 8000aec:	00017ed0 	.word	0x00017ed0
 8000af0:	10624dd3 	.word	0x10624dd3
 8000af4:	20000018 	.word	0x20000018
 8000af8:	40010800 	.word	0x40010800
 8000afc:	0001869f 	.word	0x0001869f
 8000b00:	080008a9 	.word	0x080008a9
 8000b04:	08000211 	.word	0x08000211
 8000b08:	08000669 	.word	0x08000669

08000b0c <fsm_slow_run>:
 *      Author: HOME
 */

#include "fsm_slow.h"

void fsm_slow_run(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000b10:	2110      	movs	r1, #16
 8000b12:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <fsm_slow_run+0x44>)
 8000b14:	f001 f9e1 	bl	8001eda <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <fsm_slow_run+0x44>)
 8000b1c:	f001 f9dd 	bl	8001eda <HAL_GPIO_TogglePin>
	if(isButtonPress(0)==1){
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fb5b 	bl	80001dc <isButtonPress>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10f      	bne.n	8000b4c <fsm_slow_run+0x40>
		SCH_Add_Task(fsm_auto_run, 100, 10);
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	2164      	movs	r1, #100	@ 0x64
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <fsm_slow_run+0x48>)
 8000b32:	f000 fc17 	bl	8001364 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 0, 250);
 8000b36:	22fa      	movs	r2, #250	@ 0xfa
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <fsm_slow_run+0x4c>)
 8000b3c:	f000 fc12 	bl	8001364 <SCH_Add_Task>
		SCH_Delete_Task(fsm_slow_run);
 8000b40:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <fsm_slow_run+0x50>)
 8000b42:	f000 fd4d 	bl	80015e0 <SCH_Delete_Task>
		status = auto_init;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <fsm_slow_run+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800
 8000b54:	08000211 	.word	0x08000211
 8000b58:	08000b99 	.word	0x08000b99
 8000b5c:	08000b0d 	.word	0x08000b0d
 8000b60:	200000ac 	.word	0x200000ac

08000b64 <Diable_Led>:

#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4809      	ldr	r0, [pc, #36]	@ (8000b94 <Diable_Led+0x30>)
 8000b6e:	f001 f99c 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2110      	movs	r1, #16
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <Diable_Led+0x30>)
 8000b78:	f001 f997 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2120      	movs	r1, #32
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <Diable_Led+0x30>)
 8000b82:	f001 f992 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	@ 0x40
 8000b8a:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <Diable_Led+0x30>)
 8000b8c:	f001 f98d 	bl	8001eaa <HAL_GPIO_WritePin>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <Scan7SEG>:
void Scan7SEG(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	Diable_Led();
 8000b9c:	f7ff ffe2 	bl	8000b64 <Diable_Led>
	switch(led_index){
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <Scan7SEG+0xa0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d837      	bhi.n	8000c18 <Scan7SEG+0x80>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <Scan7SEG+0x18>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000bd7 	.word	0x08000bd7
 8000bb8:	08000bed 	.word	0x08000bed
 8000bbc:	08000c03 	.word	0x08000c03
		case 0:
			//Display the first 7SEG with led_buffer[0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <Scan7SEG+0xa4>)
 8000bc6:	f001 f970 	bl	8001eaa <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <Scan7SEG+0xa8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f838 	bl	8000c44 <display7SEG>
			break;
 8000bd4:	e021      	b.n	8000c1a <Scan7SEG+0x82>
		case 1:
			//Display the second 7SEG with led_buffer[1]
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	4818      	ldr	r0, [pc, #96]	@ (8000c3c <Scan7SEG+0xa4>)
 8000bdc:	f001 f965 	bl	8001eaa <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <Scan7SEG+0xa8>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f82d 	bl	8000c44 <display7SEG>
			break;
 8000bea:	e016      	b.n	8000c1a <Scan7SEG+0x82>
		case 2:
			//Display the third 7SEG with led_buffer[2]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <Scan7SEG+0xa4>)
 8000bf2:	f001 f95a 	bl	8001eaa <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <Scan7SEG+0xa8>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f822 	bl	8000c44 <display7SEG>
			break;
 8000c00:	e00b      	b.n	8000c1a <Scan7SEG+0x82>
		case 3:
			//Display the forth 7SEG with led_buffer[3]
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2140      	movs	r1, #64	@ 0x40
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <Scan7SEG+0xa4>)
 8000c08:	f001 f94f 	bl	8001eaa <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <Scan7SEG+0xa8>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f817 	bl	8000c44 <display7SEG>
			break;
 8000c16:	e000      	b.n	8000c1a <Scan7SEG+0x82>
		default:
			break;
 8000c18:	bf00      	nop
	}
	if((++led_index) >= 4) led_index = 0;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Scan7SEG+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <Scan7SEG+0xa0>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <Scan7SEG+0xa0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	dd02      	ble.n	8000c32 <Scan7SEG+0x9a>
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <Scan7SEG+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000c8 	.word	0x200000c8
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	200000b8 	.word	0x200000b8

08000c44 <display7SEG>:
void display7SEG(int num){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	switch(num){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	f200 81c8 	bhi.w	8000fe4 <display7SEG+0x3a0>
 8000c54:	a201      	add	r2, pc, #4	@ (adr r2, 8000c5c <display7SEG+0x18>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000c85 	.word	0x08000c85
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000d31 	.word	0x08000d31
 8000c68:	08000d87 	.word	0x08000d87
 8000c6c:	08000ddd 	.word	0x08000ddd
 8000c70:	08000e33 	.word	0x08000e33
 8000c74:	08000e89 	.word	0x08000e89
 8000c78:	08000edf 	.word	0x08000edf
 8000c7c:	08000f35 	.word	0x08000f35
 8000c80:	08000f8b 	.word	0x08000f8b
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c8a:	48d5      	ldr	r0, [pc, #852]	@ (8000fe0 <display7SEG+0x39c>)
 8000c8c:	f001 f90d 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c96:	48d2      	ldr	r0, [pc, #840]	@ (8000fe0 <display7SEG+0x39c>)
 8000c98:	f001 f907 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca2:	48cf      	ldr	r0, [pc, #828]	@ (8000fe0 <display7SEG+0x39c>)
 8000ca4:	f001 f901 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cae:	48cc      	ldr	r0, [pc, #816]	@ (8000fe0 <display7SEG+0x39c>)
 8000cb0:	f001 f8fb 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cba:	48c9      	ldr	r0, [pc, #804]	@ (8000fe0 <display7SEG+0x39c>)
 8000cbc:	f001 f8f5 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc6:	48c6      	ldr	r0, [pc, #792]	@ (8000fe0 <display7SEG+0x39c>)
 8000cc8:	f001 f8ef 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd2:	48c3      	ldr	r0, [pc, #780]	@ (8000fe0 <display7SEG+0x39c>)
 8000cd4:	f001 f8e9 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000cd8:	e185      	b.n	8000fe6 <display7SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce0:	48bf      	ldr	r0, [pc, #764]	@ (8000fe0 <display7SEG+0x39c>)
 8000ce2:	f001 f8e2 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cec:	48bc      	ldr	r0, [pc, #752]	@ (8000fe0 <display7SEG+0x39c>)
 8000cee:	f001 f8dc 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cf8:	48b9      	ldr	r0, [pc, #740]	@ (8000fe0 <display7SEG+0x39c>)
 8000cfa:	f001 f8d6 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d04:	48b6      	ldr	r0, [pc, #728]	@ (8000fe0 <display7SEG+0x39c>)
 8000d06:	f001 f8d0 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d10:	48b3      	ldr	r0, [pc, #716]	@ (8000fe0 <display7SEG+0x39c>)
 8000d12:	f001 f8ca 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d1c:	48b0      	ldr	r0, [pc, #704]	@ (8000fe0 <display7SEG+0x39c>)
 8000d1e:	f001 f8c4 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d28:	48ad      	ldr	r0, [pc, #692]	@ (8000fe0 <display7SEG+0x39c>)
 8000d2a:	f001 f8be 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000d2e:	e15a      	b.n	8000fe6 <display7SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d36:	48aa      	ldr	r0, [pc, #680]	@ (8000fe0 <display7SEG+0x39c>)
 8000d38:	f001 f8b7 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d42:	48a7      	ldr	r0, [pc, #668]	@ (8000fe0 <display7SEG+0x39c>)
 8000d44:	f001 f8b1 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d4e:	48a4      	ldr	r0, [pc, #656]	@ (8000fe0 <display7SEG+0x39c>)
 8000d50:	f001 f8ab 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5a:	48a1      	ldr	r0, [pc, #644]	@ (8000fe0 <display7SEG+0x39c>)
 8000d5c:	f001 f8a5 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d66:	489e      	ldr	r0, [pc, #632]	@ (8000fe0 <display7SEG+0x39c>)
 8000d68:	f001 f89f 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d72:	489b      	ldr	r0, [pc, #620]	@ (8000fe0 <display7SEG+0x39c>)
 8000d74:	f001 f899 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7e:	4898      	ldr	r0, [pc, #608]	@ (8000fe0 <display7SEG+0x39c>)
 8000d80:	f001 f893 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000d84:	e12f      	b.n	8000fe6 <display7SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	4894      	ldr	r0, [pc, #592]	@ (8000fe0 <display7SEG+0x39c>)
 8000d8e:	f001 f88c 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d98:	4891      	ldr	r0, [pc, #580]	@ (8000fe0 <display7SEG+0x39c>)
 8000d9a:	f001 f886 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da4:	488e      	ldr	r0, [pc, #568]	@ (8000fe0 <display7SEG+0x39c>)
 8000da6:	f001 f880 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db0:	488b      	ldr	r0, [pc, #556]	@ (8000fe0 <display7SEG+0x39c>)
 8000db2:	f001 f87a 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbc:	4888      	ldr	r0, [pc, #544]	@ (8000fe0 <display7SEG+0x39c>)
 8000dbe:	f001 f874 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc8:	4885      	ldr	r0, [pc, #532]	@ (8000fe0 <display7SEG+0x39c>)
 8000dca:	f001 f86e 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dd4:	4882      	ldr	r0, [pc, #520]	@ (8000fe0 <display7SEG+0x39c>)
 8000dd6:	f001 f868 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000dda:	e104      	b.n	8000fe6 <display7SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de2:	487f      	ldr	r0, [pc, #508]	@ (8000fe0 <display7SEG+0x39c>)
 8000de4:	f001 f861 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dee:	487c      	ldr	r0, [pc, #496]	@ (8000fe0 <display7SEG+0x39c>)
 8000df0:	f001 f85b 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dfa:	4879      	ldr	r0, [pc, #484]	@ (8000fe0 <display7SEG+0x39c>)
 8000dfc:	f001 f855 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e06:	4876      	ldr	r0, [pc, #472]	@ (8000fe0 <display7SEG+0x39c>)
 8000e08:	f001 f84f 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e12:	4873      	ldr	r0, [pc, #460]	@ (8000fe0 <display7SEG+0x39c>)
 8000e14:	f001 f849 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e1e:	4870      	ldr	r0, [pc, #448]	@ (8000fe0 <display7SEG+0x39c>)
 8000e20:	f001 f843 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2a:	486d      	ldr	r0, [pc, #436]	@ (8000fe0 <display7SEG+0x39c>)
 8000e2c:	f001 f83d 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000e30:	e0d9      	b.n	8000fe6 <display7SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e38:	4869      	ldr	r0, [pc, #420]	@ (8000fe0 <display7SEG+0x39c>)
 8000e3a:	f001 f836 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e44:	4866      	ldr	r0, [pc, #408]	@ (8000fe0 <display7SEG+0x39c>)
 8000e46:	f001 f830 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e50:	4863      	ldr	r0, [pc, #396]	@ (8000fe0 <display7SEG+0x39c>)
 8000e52:	f001 f82a 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e5c:	4860      	ldr	r0, [pc, #384]	@ (8000fe0 <display7SEG+0x39c>)
 8000e5e:	f001 f824 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e68:	485d      	ldr	r0, [pc, #372]	@ (8000fe0 <display7SEG+0x39c>)
 8000e6a:	f001 f81e 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e74:	485a      	ldr	r0, [pc, #360]	@ (8000fe0 <display7SEG+0x39c>)
 8000e76:	f001 f818 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e80:	4857      	ldr	r0, [pc, #348]	@ (8000fe0 <display7SEG+0x39c>)
 8000e82:	f001 f812 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000e86:	e0ae      	b.n	8000fe6 <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4854      	ldr	r0, [pc, #336]	@ (8000fe0 <display7SEG+0x39c>)
 8000e90:	f001 f80b 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9a:	4851      	ldr	r0, [pc, #324]	@ (8000fe0 <display7SEG+0x39c>)
 8000e9c:	f001 f805 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea6:	484e      	ldr	r0, [pc, #312]	@ (8000fe0 <display7SEG+0x39c>)
 8000ea8:	f000 ffff 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb2:	484b      	ldr	r0, [pc, #300]	@ (8000fe0 <display7SEG+0x39c>)
 8000eb4:	f000 fff9 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ebe:	4848      	ldr	r0, [pc, #288]	@ (8000fe0 <display7SEG+0x39c>)
 8000ec0:	f000 fff3 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eca:	4845      	ldr	r0, [pc, #276]	@ (8000fe0 <display7SEG+0x39c>)
 8000ecc:	f000 ffed 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed6:	4842      	ldr	r0, [pc, #264]	@ (8000fe0 <display7SEG+0x39c>)
 8000ed8:	f000 ffe7 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000edc:	e083      	b.n	8000fe6 <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee4:	483e      	ldr	r0, [pc, #248]	@ (8000fe0 <display7SEG+0x39c>)
 8000ee6:	f000 ffe0 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef0:	483b      	ldr	r0, [pc, #236]	@ (8000fe0 <display7SEG+0x39c>)
 8000ef2:	f000 ffda 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000efc:	4838      	ldr	r0, [pc, #224]	@ (8000fe0 <display7SEG+0x39c>)
 8000efe:	f000 ffd4 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f08:	4835      	ldr	r0, [pc, #212]	@ (8000fe0 <display7SEG+0x39c>)
 8000f0a:	f000 ffce 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f14:	4832      	ldr	r0, [pc, #200]	@ (8000fe0 <display7SEG+0x39c>)
 8000f16:	f000 ffc8 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f20:	482f      	ldr	r0, [pc, #188]	@ (8000fe0 <display7SEG+0x39c>)
 8000f22:	f000 ffc2 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2c:	482c      	ldr	r0, [pc, #176]	@ (8000fe0 <display7SEG+0x39c>)
 8000f2e:	f000 ffbc 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000f32:	e058      	b.n	8000fe6 <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3a:	4829      	ldr	r0, [pc, #164]	@ (8000fe0 <display7SEG+0x39c>)
 8000f3c:	f000 ffb5 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f46:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <display7SEG+0x39c>)
 8000f48:	f000 ffaf 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f52:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <display7SEG+0x39c>)
 8000f54:	f000 ffa9 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5e:	4820      	ldr	r0, [pc, #128]	@ (8000fe0 <display7SEG+0x39c>)
 8000f60:	f000 ffa3 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	481d      	ldr	r0, [pc, #116]	@ (8000fe0 <display7SEG+0x39c>)
 8000f6c:	f000 ff9d 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f76:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <display7SEG+0x39c>)
 8000f78:	f000 ff97 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f82:	4817      	ldr	r0, [pc, #92]	@ (8000fe0 <display7SEG+0x39c>)
 8000f84:	f000 ff91 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000f88:	e02d      	b.n	8000fe6 <display7SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f90:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <display7SEG+0x39c>)
 8000f92:	f000 ff8a 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9c:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <display7SEG+0x39c>)
 8000f9e:	f000 ff84 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <display7SEG+0x39c>)
 8000faa:	f000 ff7e 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb4:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <display7SEG+0x39c>)
 8000fb6:	f000 ff78 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <display7SEG+0x39c>)
 8000fc2:	f000 ff72 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <display7SEG+0x39c>)
 8000fce:	f000 ff6c 	bl	8001eaa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd8:	4801      	ldr	r0, [pc, #4]	@ (8000fe0 <display7SEG+0x39c>)
 8000fda:	f000 ff66 	bl	8001eaa <HAL_GPIO_WritePin>
			break;
 8000fde:	e002      	b.n	8000fe6 <display7SEG+0x3a2>
 8000fe0:	40010800 	.word	0x40010800
		default:
			break;
 8000fe4:	bf00      	nop
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop

08000ff0 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <updateClockBuffer+0x70>)
 8000ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8001002:	1092      	asrs	r2, r2, #2
 8001004:	17db      	asrs	r3, r3, #31
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <updateClockBuffer+0x74>)
 800100a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <updateClockBuffer+0x70>)
 8001010:	fb83 2301 	smull	r2, r3, r3, r1
 8001014:	109a      	asrs	r2, r3, #2
 8001016:	17cb      	asrs	r3, r1, #31
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	1aca      	subs	r2, r1, r3
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <updateClockBuffer+0x74>)
 8001026:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <updateClockBuffer+0x70>)
 800102c:	fb82 1203 	smull	r1, r2, r2, r3
 8001030:	1092      	asrs	r2, r2, #2
 8001032:	17db      	asrs	r3, r3, #31
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <updateClockBuffer+0x74>)
 8001038:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <updateClockBuffer+0x70>)
 800103e:	fb83 2301 	smull	r2, r3, r3, r1
 8001042:	109a      	asrs	r2, r3, #2
 8001044:	17cb      	asrs	r3, r1, #31
 8001046:	1ad2      	subs	r2, r2, r3
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1aca      	subs	r2, r1, r3
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <updateClockBuffer+0x74>)
 8001054:	60da      	str	r2, [r3, #12]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	66666667 	.word	0x66666667
 8001064:	200000b8 	.word	0x200000b8

08001068 <single_LED_off>:
void single_LED_off(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <single_LED_off+0x48>)
 8001072:	f000 ff1a 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2110      	movs	r1, #16
 800107a:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <single_LED_off+0x48>)
 800107c:	f000 ff15 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2120      	movs	r1, #32
 8001084:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <single_LED_off+0x48>)
 8001086:	f000 ff10 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2140      	movs	r1, #64	@ 0x40
 800108e:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <single_LED_off+0x48>)
 8001090:	f000 ff0b 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <single_LED_off+0x48>)
 800109a:	f000 ff06 	bl	8001eaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <single_LED_off+0x48>)
 80010a6:	f000 ff00 	bl	8001eaa <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010800 	.word	0x40010800

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f000 fbf4 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f834 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 f8ba 	bl	8001238 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010c4:	f000 f86c 	bl	80011a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <main+0x5c>)
 80010ca:	f001 fb4d 	bl	8002768 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010ce:	f000 f92d 	bl	800132c <SCH_Init>
  SCH_Add_Task(led_debug, 0, 1000);
 80010d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d6:	2100      	movs	r1, #0
 80010d8:	480e      	ldr	r0, [pc, #56]	@ (8001114 <main+0x60>)
 80010da:	f000 f943 	bl	8001364 <SCH_Add_Task>
  SCH_Add_Task(getKeyinput, 0, 10);
 80010de:	220a      	movs	r2, #10
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <main+0x64>)
 80010e4:	f000 f93e 	bl	8001364 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 0, 10);
 80010e8:	220a      	movs	r2, #10
 80010ea:	2100      	movs	r1, #0
 80010ec:	480b      	ldr	r0, [pc, #44]	@ (800111c <main+0x68>)
 80010ee:	f000 f939 	bl	8001364 <SCH_Add_Task>
  SCH_Add_Task(Scan7SEG, 0, 250);
 80010f2:	22fa      	movs	r2, #250	@ 0xfa
 80010f4:	2100      	movs	r1, #0
 80010f6:	480a      	ldr	r0, [pc, #40]	@ (8001120 <main+0x6c>)
 80010f8:	f000 f934 	bl	8001364 <SCH_Add_Task>
  SCH_Add_Task(count_1_second, 0, 1000);
 80010fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001100:	2100      	movs	r1, #0
 8001102:	4808      	ldr	r0, [pc, #32]	@ (8001124 <main+0x70>)
 8001104:	f000 f92e 	bl	8001364 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 8001108:	f000 f9b4 	bl	8001474 <SCH_Dispatch_Task>
 800110c:	e7fc      	b.n	8001108 <main+0x54>
 800110e:	bf00      	nop
 8001110:	200000cc 	.word	0x200000cc
 8001114:	080012f9 	.word	0x080012f9
 8001118:	0800014d 	.word	0x0800014d
 800111c:	08000211 	.word	0x08000211
 8001120:	08000b99 	.word	0x08000b99
 8001124:	08000669 	.word	0x08000669

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	@ 0x40
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2228      	movs	r2, #40	@ 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 ff60 	bl	8002ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fed4 	bl	8001f0c <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800116a:	f000 f8d9 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f942 	bl	8002410 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001192:	f000 f8c5 	bl	8001320 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3740      	adds	r7, #64	@ 0x40
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011d4:	2209      	movs	r2, #9
 80011d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <MX_TIM2_Init+0x94>)
 80011e6:	f001 fa6f 	bl	80026c8 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f0:	f000 f896 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_TIM2_Init+0x94>)
 8001202:	f001 fbed 	bl	80029e0 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 f888 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_TIM2_Init+0x94>)
 800121e:	f001 fdc5 	bl	8002dac <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f87a 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000cc 	.word	0x200000cc

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <MX_GPIO_Init+0xb4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a26      	ldr	r2, [pc, #152]	@ (80012ec <MX_GPIO_Init+0xb4>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <MX_GPIO_Init+0xb4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <MX_GPIO_Init+0xb4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <MX_GPIO_Init+0xb4>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <MX_GPIO_Init+0xb4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 800127c:	2200      	movs	r2, #0
 800127e:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 8001282:	481b      	ldr	r0, [pc, #108]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 8001284:	f000 fe11 	bl	8001eaa <HAL_GPIO_WritePin>
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2178      	movs	r1, #120	@ 0x78
 800128c:	4819      	ldr	r0, [pc, #100]	@ (80012f4 <MX_GPIO_Init+0xbc>)
 800128e:	f000 fe0c 	bl	8001eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 R0_Pin Y0_Pin G0_Pin
                           R1_Pin Y1_Pin G1_Pin SEG0_Pin
                           SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|R0_Pin|Y0_Pin|G0_Pin
 8001292:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001296:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin|G1_Pin|SEG0_Pin
                          |SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4619      	mov	r1, r3
 80012aa:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_GPIO_Init+0xb8>)
 80012ac:	f000 fc6a 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80012b0:	2307      	movs	r3, #7
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <MX_GPIO_Init+0xbc>)
 80012c4:	f000 fc5e 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80012c8:	2378      	movs	r3, #120	@ 0x78
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0xbc>)
 80012e0:	f000 fc50 	bl	8001b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <led_debug>:

/* USER CODE BEGIN 4 */
void led_debug(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80012fc:	2104      	movs	r1, #4
 80012fe:	4802      	ldr	r0, [pc, #8]	@ (8001308 <led_debug+0x10>)
 8001300:	f000 fdeb 	bl	8001eda <HAL_GPIO_TogglePin>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40010800 	.word	0x40010800

0800130c <HAL_TIM_PeriodElapsedCallback>:
void led_test(){
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001314:	f000 f878 	bl	8001408 <SCH_Update>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <SCH_Init>:
 */
#include "scheduler.h"

List list;
List list_run;
void SCH_Init(void) {
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	list.head = NULL;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <SCH_Init+0x30>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
	list.tail = NULL;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <SCH_Init+0x30>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
    list.numTask = 0;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <SCH_Init+0x30>)
 800133e:	2200      	movs	r2, #0
 8001340:	721a      	strb	r2, [r3, #8]

    list_run.head = NULL;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <SCH_Init+0x34>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    list_run.tail = NULL;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <SCH_Init+0x34>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
    list_run.numTask = 0;
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <SCH_Init+0x34>)
 8001350:	2200      	movs	r2, #0
 8001352:	721a      	strb	r2, [r3, #8]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000114 	.word	0x20000114
 8001360:	20000120 	.word	0x20000120

08001364 <SCH_Add_Task>:

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){\
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	if(SCH_Is_Task_Exist(function) == 1)
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f985 	bl	8001680 <SCH_Is_Task_Exist>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d03b      	beq.n	80013f4 <SCH_Add_Task+0x90>
		return;
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 800137c:	2014      	movs	r0, #20
 800137e:	f001 fd7f 	bl	8002e80 <malloc>
 8001382:	4603      	mov	r3, r0
 8001384:	617b      	str	r3, [r7, #20]
	if (newTask == NULL)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d035      	beq.n	80013f8 <SCH_Add_Task+0x94>
		return;

	newTask->pTask = function;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4a1a      	ldr	r2, [pc, #104]	@ (8001400 <SCH_Add_Task+0x9c>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <SCH_Add_Task+0x9c>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	609a      	str	r2, [r3, #8]
	//newTask->RunMe = 0;
	newTask->next = NULL;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]

	if(list.head == NULL){
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <SCH_Add_Task+0x6c>
		list.head = newTask;
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	6013      	str	r3, [r2, #0]
		list.tail = newTask;
 80013c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	6053      	str	r3, [r2, #4]
 80013ce:	e00a      	b.n	80013e6 <SCH_Add_Task+0x82>
	}
	else{
		newTask->prev = list.tail;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	611a      	str	r2, [r3, #16]
		list.tail->next = newTask;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	60da      	str	r2, [r3, #12]
		list.tail = newTask;
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	6053      	str	r3, [r2, #4]
	}
	list.numTask++;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013e8:	7a1b      	ldrb	r3, [r3, #8]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SCH_Add_Task+0xa0>)
 80013f0:	721a      	strb	r2, [r3, #8]
 80013f2:	e002      	b.n	80013fa <SCH_Add_Task+0x96>
		return;
 80013f4:	bf00      	nop
 80013f6:	e000      	b.n	80013fa <SCH_Add_Task+0x96>
		return;
 80013f8:	bf00      	nop
}
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	cccccccd 	.word	0xcccccccd
 8001404:	20000114 	.word	0x20000114

08001408 <SCH_Update>:

void SCH_Update(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	sTask * temp = list.head;
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <SCH_Update+0x68>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001414:	e024      	b.n	8001460 <SCH_Update+0x58>
		if(temp->Delay > 0){
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <SCH_Update+0x22>
			temp->Delay --;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	e017      	b.n	800145a <SCH_Update+0x52>
		}
		else{
			//temp->RunMe++;
			add_ListRun(temp->pTask);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f83e 	bl	80014b0 <add_ListRun>
			temp->Delay = temp->Period;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	605a      	str	r2, [r3, #4]
			if(temp->Period == 0){
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10a      	bne.n	800145a <SCH_Update+0x52>
				sTask * del = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	603b      	str	r3, [r7, #0]
				temp = temp->next;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	607b      	str	r3, [r7, #4]
				SCH_Delete_Task(del->pTask);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f8c4 	bl	80015e0 <SCH_Delete_Task>
				continue;
 8001458:	e002      	b.n	8001460 <SCH_Update+0x58>
			}
		}
		temp = temp->next;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1d7      	bne.n	8001416 <SCH_Update+0xe>
	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000114 	.word	0x20000114

08001474 <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
//				continue;
//			}
//		}
//		temp = temp->next;
//	}
	sTask * temp = list_run.head;
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <SCH_Dispatch_Task+0x38>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001480:	e00c      	b.n	800149c <SCH_Dispatch_Task+0x28>
		temp->pTask();
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4798      	blx	r3
		sTask* del = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
		temp = temp->next;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	607b      	str	r3, [r7, #4]
		delete_ListRun(del->pTask);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f83e 	bl	8001518 <delete_ListRun>
	while(temp != NULL){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ef      	bne.n	8001482 <SCH_Dispatch_Task+0xe>
	}
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000120 	.word	0x20000120

080014b0 <add_ListRun>:
void add_ListRun(void (*function)()){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	sTask * newTask = (sTask *) malloc ( sizeof(sTask));
 80014b8:	2014      	movs	r0, #20
 80014ba:	f001 fce1 	bl	8002e80 <malloc>
 80014be:	4603      	mov	r3, r0
 80014c0:	60fb      	str	r3, [r7, #12]
	newTask->pTask = function;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
	newTask->next = NULL;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
	if(list_run.numTask == 0){
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <add_ListRun+0x64>)
 80014d6:	7a1b      	ldrb	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <add_ListRun+0x3a>
		list_run.head = newTask;
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <add_ListRun+0x64>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6013      	str	r3, [r2, #0]
		list_run.tail = newTask;
 80014e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <add_ListRun+0x64>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6053      	str	r3, [r2, #4]
 80014e8:	e00a      	b.n	8001500 <add_ListRun+0x50>

	}
	else{
		newTask->prev = list_run.tail;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <add_ListRun+0x64>)
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	611a      	str	r2, [r3, #16]
		list_run.tail->next = newTask;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <add_ListRun+0x64>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	60da      	str	r2, [r3, #12]
		list_run.tail = newTask;
 80014fa:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <add_ListRun+0x64>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6053      	str	r3, [r2, #4]
	}
	list_run.numTask++;
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <add_ListRun+0x64>)
 8001502:	7a1b      	ldrb	r3, [r3, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <add_ListRun+0x64>)
 800150a:	721a      	strb	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000120 	.word	0x20000120

08001518 <delete_ListRun>:
void delete_ListRun(void (*function)()){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	if(list_run.numTask == 0)
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <delete_ListRun+0xc4>)
 8001522:	7a1b      	ldrb	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d054      	beq.n	80015d2 <delete_ListRun+0xba>
		return ;
	if(list_run.numTask == 1){
 8001528:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <delete_ListRun+0xc4>)
 800152a:	7a1b      	ldrb	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d112      	bne.n	8001556 <delete_ListRun+0x3e>
		sTask * del = list_run.head;
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <delete_ListRun+0xc4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60bb      	str	r3, [r7, #8]
		list_run.head = NULL;
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <delete_ListRun+0xc4>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
		list_run.tail = NULL;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <delete_ListRun+0xc4>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
		free(del);
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f001 fca4 	bl	8002e90 <free>
		list_run.numTask--;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <delete_ListRun+0xc4>)
 800154a:	7a1b      	ldrb	r3, [r3, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <delete_ListRun+0xc4>)
 8001552:	721a      	strb	r2, [r3, #8]
		return;
 8001554:	e03e      	b.n	80015d4 <delete_ListRun+0xbc>
	}
	sTask * temp = list_run.head;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <delete_ListRun+0xc4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 800155c:	e035      	b.n	80015ca <delete_ListRun+0xb2>
		if(temp->pTask == function){
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	d12d      	bne.n	80015c4 <delete_ListRun+0xac>
			if(temp->prev == NULL){ // delete head
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <delete_ListRun+0x6a>
				temp->next->prev = NULL;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
				list_run.head = temp->next;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <delete_ListRun+0xc4>)
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e016      	b.n	80015b0 <delete_ListRun+0x98>
			}
			else if (temp->next == NULL){ //delete tail
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <delete_ListRun+0x84>
				temp->prev->next = NULL;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
				list_run.tail = temp->prev;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <delete_ListRun+0xc4>)
 8001598:	6053      	str	r3, [r2, #4]
 800159a:	e009      	b.n	80015b0 <delete_ListRun+0x98>
			}
			else{
				temp->prev->next = temp->next;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	68d2      	ldr	r2, [r2, #12]
 80015a4:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6912      	ldr	r2, [r2, #16]
 80015ae:	611a      	str	r2, [r3, #16]
			}
			list_run.numTask--;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <delete_ListRun+0xc4>)
 80015b2:	7a1b      	ldrb	r3, [r3, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <delete_ListRun+0xc4>)
 80015ba:	721a      	strb	r2, [r3, #8]
			free(temp);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f001 fc67 	bl	8002e90 <free>
			return;
 80015c2:	e007      	b.n	80015d4 <delete_ListRun+0xbc>
		}
		temp = temp->next;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1c6      	bne.n	800155e <delete_ListRun+0x46>
 80015d0:	e000      	b.n	80015d4 <delete_ListRun+0xbc>
		return ;
 80015d2:	bf00      	nop
	}
}
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000120 	.word	0x20000120

080015e0 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(void (*function)()){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0)
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <SCH_Delete_Task+0x9c>)
 80015ea:	7a1b      	ldrb	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <SCH_Delete_Task+0x14>
		return 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e03e      	b.n	8001672 <SCH_Delete_Task+0x92>
	sTask * temp = list.head;
 80015f4:	4b21      	ldr	r3, [pc, #132]	@ (800167c <SCH_Delete_Task+0x9c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 80015fa:	e036      	b.n	800166a <SCH_Delete_Task+0x8a>
		if(temp->pTask == function){
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d12e      	bne.n	8001664 <SCH_Delete_Task+0x84>
			if(temp->prev == NULL){ // delete head
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <SCH_Delete_Task+0x40>
				temp->next->prev = NULL;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
				list.head = temp->next;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a18      	ldr	r2, [pc, #96]	@ (800167c <SCH_Delete_Task+0x9c>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e016      	b.n	800164e <SCH_Delete_Task+0x6e>
			}
			else if (temp->next == NULL){ //delete tail
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <SCH_Delete_Task+0x5a>
				temp->prev->next = NULL;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
				list.tail = temp->prev;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a11      	ldr	r2, [pc, #68]	@ (800167c <SCH_Delete_Task+0x9c>)
 8001636:	6053      	str	r3, [r2, #4]
 8001638:	e009      	b.n	800164e <SCH_Delete_Task+0x6e>
			}
			else{
				temp->prev->next = temp->next;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	68d2      	ldr	r2, [r2, #12]
 8001642:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	6912      	ldr	r2, [r2, #16]
 800164c:	611a      	str	r2, [r3, #16]
			}
			list.numTask--;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <SCH_Delete_Task+0x9c>)
 8001650:	7a1b      	ldrb	r3, [r3, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <SCH_Delete_Task+0x9c>)
 8001658:	721a      	strb	r2, [r3, #8]
			free(temp);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f001 fc18 	bl	8002e90 <free>
			return 1;
 8001660:	2301      	movs	r3, #1
 8001662:	e006      	b.n	8001672 <SCH_Delete_Task+0x92>
		}
		temp = temp->next;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1c5      	bne.n	80015fc <SCH_Delete_Task+0x1c>
	}
	return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000114 	.word	0x20000114

08001680 <SCH_Is_Task_Exist>:
uint8_t SCH_Is_Task_Exist(void (*function)()){
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0) return 0;
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <SCH_Is_Task_Exist+0x44>)
 800168a:	7a1b      	ldrb	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <SCH_Is_Task_Exist+0x14>
 8001690:	2300      	movs	r3, #0
 8001692:	e011      	b.n	80016b8 <SCH_Is_Task_Exist+0x38>
	sTask * temp = list.head;
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <SCH_Is_Task_Exist+0x44>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 800169a:	e009      	b.n	80016b0 <SCH_Is_Task_Exist+0x30>
		if(temp->pTask == function)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d101      	bne.n	80016aa <SCH_Is_Task_Exist+0x2a>
			return 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e006      	b.n	80016b8 <SCH_Is_Task_Exist+0x38>
		temp = temp->next;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f2      	bne.n	800169c <SCH_Is_Task_Exist+0x1c>
	}
	return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000114 	.word	0x20000114

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <HAL_MspInit+0x5c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_MspInit+0x5c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_MspInit+0x60>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_MspInit+0x60>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173c:	d113      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <HAL_TIM_Base_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 f9db 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 f9f4 	bl	8001b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f8b4 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <TIM2_IRQHandler+0x10>)
 80017d2:	f001 f815 	bl	8002800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000cc 	.word	0x200000cc

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f001 fc0c 	bl	800302c <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20002800 	.word	0x20002800
 8001840:	00000400 	.word	0x00000400
 8001844:	2000012c 	.word	0x2000012c
 8001848:	20000280 	.word	0x20000280

0800184c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff fff8 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480b      	ldr	r0, [pc, #44]	@ (800188c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800185e:	490c      	ldr	r1, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001874:	4c09      	ldr	r4, [pc, #36]	@ (800189c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f001 fbd9 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fc15 	bl	80010b4 <main>
  bx lr
 800188a:	4770      	bx	lr
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001894:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8001898:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800189c:	2000027c 	.word	0x2000027c

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_Init+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_Init+0x28>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f923 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff ff02 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f93b 	bl	8001b6a <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f000 f903 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000001c 	.word	0x2000001c
 8001928:	20000024 	.word	0x20000024
 800192c:	20000020 	.word	0x20000020

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a03      	ldr	r2, [pc, #12]	@ (8001950 <HAL_IncTick+0x20>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000024 	.word	0x20000024
 8001950:	20000130 	.word	0x20000130

08001954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	@ (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000130 	.word	0x20000130

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4906      	ldr	r1, [pc, #24]	@ (8001a00 <__NVIC_EnableIRQ+0x34>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff2d 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff42 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff35 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b08b      	sub	sp, #44	@ 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	e161      	b.n	8001e5c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 8150 	bne.w	8001e56 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a97      	ldr	r2, [pc, #604]	@ (8001e18 <HAL_GPIO_Init+0x294>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d05e      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bc0:	4a95      	ldr	r2, [pc, #596]	@ (8001e18 <HAL_GPIO_Init+0x294>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d875      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a95      	ldr	r2, [pc, #596]	@ (8001e1c <HAL_GPIO_Init+0x298>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d058      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bcc:	4a93      	ldr	r2, [pc, #588]	@ (8001e1c <HAL_GPIO_Init+0x298>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d86f      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a93      	ldr	r2, [pc, #588]	@ (8001e20 <HAL_GPIO_Init+0x29c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d052      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bd8:	4a91      	ldr	r2, [pc, #580]	@ (8001e20 <HAL_GPIO_Init+0x29c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d869      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bde:	4a91      	ldr	r2, [pc, #580]	@ (8001e24 <HAL_GPIO_Init+0x2a0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04c      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001be4:	4a8f      	ldr	r2, [pc, #572]	@ (8001e24 <HAL_GPIO_Init+0x2a0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d863      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bea:	4a8f      	ldr	r2, [pc, #572]	@ (8001e28 <HAL_GPIO_Init+0x2a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d046      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bf0:	4a8d      	ldr	r2, [pc, #564]	@ (8001e28 <HAL_GPIO_Init+0x2a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d85d      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d82a      	bhi.n	8001c50 <HAL_GPIO_Init+0xcc>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d859      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001c04 <HAL_GPIO_Init+0x80>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c6b 	.word	0x08001c6b
 8001c10:	08001cad 	.word	0x08001cad
 8001c14:	08001cb3 	.word	0x08001cb3
 8001c18:	08001cb3 	.word	0x08001cb3
 8001c1c:	08001cb3 	.word	0x08001cb3
 8001c20:	08001cb3 	.word	0x08001cb3
 8001c24:	08001cb3 	.word	0x08001cb3
 8001c28:	08001cb3 	.word	0x08001cb3
 8001c2c:	08001cb3 	.word	0x08001cb3
 8001c30:	08001cb3 	.word	0x08001cb3
 8001c34:	08001cb3 	.word	0x08001cb3
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001cb3 	.word	0x08001cb3
 8001c40:	08001cb3 	.word	0x08001cb3
 8001c44:	08001cb3 	.word	0x08001cb3
 8001c48:	08001c61 	.word	0x08001c61
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	4a76      	ldr	r2, [pc, #472]	@ (8001e2c <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c56:	e02c      	b.n	8001cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e029      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	3304      	adds	r3, #4
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e024      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	3308      	adds	r3, #8
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e01f      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e01a      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c86:	2304      	movs	r3, #4
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e013      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	611a      	str	r2, [r3, #16]
          break;
 8001c9e:	e009      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	615a      	str	r2, [r3, #20]
          break;
 8001caa:	e003      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          break;
 8001cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	@ 0xff
 8001cb8:	d801      	bhi.n	8001cbe <HAL_GPIO_Init+0x13a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_Init+0x13e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	@ 0xff
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_GPIO_Init+0x14c>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x152>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	210f      	movs	r1, #15
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	6a39      	ldr	r1, [r7, #32]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a9 	beq.w	8001e56 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_GPIO_Init+0x2ac>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a49      	ldr	r2, [pc, #292]	@ (8001e30 <HAL_GPIO_Init+0x2ac>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_GPIO_Init+0x2ac>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3d      	ldr	r2, [pc, #244]	@ (8001e38 <HAL_GPIO_Init+0x2b4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00d      	beq.n	8001d64 <HAL_GPIO_Init+0x1e0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x1dc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3b      	ldr	r2, [pc, #236]	@ (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_GPIO_Init+0x1d8>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1e2>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1e2>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1e2>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d76:	492f      	ldr	r1, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x2b0>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	492b      	ldr	r1, [pc, #172]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4927      	ldr	r1, [pc, #156]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4921      	ldr	r1, [pc, #132]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	491d      	ldr	r1, [pc, #116]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4917      	ldr	r1, [pc, #92]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4913      	ldr	r1, [pc, #76]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01f      	beq.n	8001e48 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e01f      	b.n	8001e56 <HAL_GPIO_Init+0x2d2>
 8001e16:	bf00      	nop
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10220000 	.word	0x10220000
 8001e24:	10210000 	.word	0x10210000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_GPIO_Init+0x2f4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <HAL_GPIO_Init+0x2f4>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f47f ae96 	bne.w	8001b98 <HAL_GPIO_Init+0x14>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	372c      	adds	r7, #44	@ 0x2c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eba:	787b      	ldrb	r3, [r7, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	041a      	lsls	r2, r3, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	400b      	ands	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e272      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8087 	beq.w	800203a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2c:	4b92      	ldr	r3, [pc, #584]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d00c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f38:	4b8f      	ldr	r3, [pc, #572]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d112      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
 8001f44:	4b8c      	ldr	r3, [pc, #560]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f50:	d10b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	4b89      	ldr	r3, [pc, #548]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d06c      	beq.n	8002038 <HAL_RCC_OscConfig+0x12c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d168      	bne.n	8002038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e24c      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x76>
 8001f74:	4b80      	ldr	r3, [pc, #512]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a7f      	ldr	r2, [pc, #508]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e02e      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7a      	ldr	r2, [pc, #488]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b78      	ldr	r3, [pc, #480]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a77      	ldr	r2, [pc, #476]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xbc>
 8001fae:	4b72      	ldr	r3, [pc, #456]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a71      	ldr	r2, [pc, #452]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6f      	ldr	r3, [pc, #444]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a67      	ldr	r2, [pc, #412]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fcb4 	bl	8001954 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fcb0 	bl	8001954 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e200      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b5d      	ldr	r3, [pc, #372]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe4>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fca0 	bl	8001954 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fc9c 	bl	8001954 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	@ 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1ec      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b53      	ldr	r3, [pc, #332]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x10c>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b4c      	ldr	r3, [pc, #304]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002052:	4b49      	ldr	r3, [pc, #292]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
 800205e:	4b46      	ldr	r3, [pc, #280]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1c0      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4939      	ldr	r1, [pc, #228]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_RCC_OscConfig+0x270>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fc55 	bl	8001954 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ae:	f7ff fc51 	bl	8001954 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a1      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4927      	ldr	r1, [pc, #156]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b26      	ldr	r3, [pc, #152]	@ (800217c <HAL_RCC_OscConfig+0x270>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fc34 	bl	8001954 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff fc30 	bl	8001954 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e180      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03a      	beq.n	8002190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d019      	beq.n	8002156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7ff fc14 	bl	8001954 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff fc10 	bl	8001954 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e160      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fa9c 	bl	800268c <RCC_Delay>
 8002154:	e01c      	b.n	8002190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_OscConfig+0x274>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff fbfa 	bl	8001954 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002162:	e00f      	b.n	8002184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fbf6 	bl	8001954 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d908      	bls.n	8002184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e146      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	42420000 	.word	0x42420000
 8002180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b92      	ldr	r3, [pc, #584]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e9      	bne.n	8002164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a6 	beq.w	80022ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b8b      	ldr	r3, [pc, #556]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a87      	ldr	r2, [pc, #540]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b85      	ldr	r3, [pc, #532]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b82      	ldr	r3, [pc, #520]	@ (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	4b7f      	ldr	r3, [pc, #508]	@ (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7e      	ldr	r2, [pc, #504]	@ (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fbb7 	bl	8001954 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ea:	f7ff fbb3 	bl	8001954 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b64      	cmp	r3, #100	@ 0x64
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e103      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b75      	ldr	r3, [pc, #468]	@ (80023d4 <HAL_RCC_OscConfig+0x4c8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x312>
 8002210:	4b6f      	ldr	r3, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a6e      	ldr	r2, [pc, #440]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e02d      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x334>
 8002226:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a69      	ldr	r2, [pc, #420]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b67      	ldr	r3, [pc, #412]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a66      	ldr	r2, [pc, #408]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	e01c      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0x356>
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a60      	ldr	r2, [pc, #384]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	4b5e      	ldr	r3, [pc, #376]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a5d      	ldr	r2, [pc, #372]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e00b      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002262:	4b5b      	ldr	r3, [pc, #364]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a5a      	ldr	r2, [pc, #360]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b58      	ldr	r3, [pc, #352]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a57      	ldr	r2, [pc, #348]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d015      	beq.n	80022ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fb67 	bl	8001954 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fb63 	bl	8001954 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0b1      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ee      	beq.n	800228a <HAL_RCC_OscConfig+0x37e>
 80022ac:	e014      	b.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fb51 	bl	8001954 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff fb4d 	bl	8001954 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e09b      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	4b40      	ldr	r3, [pc, #256]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ee      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f4:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d061      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d146      	bne.n	8002396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b33      	ldr	r3, [pc, #204]	@ (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff fb21 	bl	8001954 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff fb1d 	bl	8001954 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e06d      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800233c:	d108      	bne.n	8002350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233e:	4b24      	ldr	r3, [pc, #144]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4921      	ldr	r1, [pc, #132]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a19      	ldr	r1, [r3, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	430b      	orrs	r3, r1
 8002362:	491b      	ldr	r1, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff faf1 	bl	8001954 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff faed 	bl	8001954 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03d      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x46a>
 8002394:	e035      	b.n	8002402 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fada 	bl	8001954 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff fad6 	bl	8001954 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e026      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x498>
 80023c2:	e01e      	b.n	8002402 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e019      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_OscConfig+0x500>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0d0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b6a      	ldr	r3, [pc, #424]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d910      	bls.n	8002454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b67      	ldr	r3, [pc, #412]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0207 	bic.w	r2, r3, #7
 800243a:	4965      	ldr	r1, [pc, #404]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a58      	ldr	r2, [pc, #352]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800248e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d040      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e073      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3d      	ldr	r3, [pc, #244]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06b      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b39      	ldr	r3, [pc, #228]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4936      	ldr	r1, [pc, #216]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7ff fa28 	bl	8001954 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7ff fa24 	bl	8001954 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e053      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d210      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4922      	ldr	r1, [pc, #136]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f821 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_RCC_ClockConfig+0x1cc>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_RCC_ClockConfig+0x1d0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f986 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	0800312c 	.word	0x0800312c
 80025dc:	2000001c 	.word	0x2000001c
 80025e0:	20000020 	.word	0x20000020

080025e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x94>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x30>
 800260e:	2b08      	cmp	r3, #8
 8002610:	d003      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x36>
 8002612:	e027      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002616:	613b      	str	r3, [r7, #16]
      break;
 8002618:	e027      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	4a17      	ldr	r2, [pc, #92]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002624:	5cd3      	ldrb	r3, [r2, r3]
 8002626:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x94>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0c5b      	lsrs	r3, r3, #17
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xa0>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	fb03 f202 	mul.w	r2, r3, r2
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e004      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0c      	ldr	r2, [pc, #48]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	613b      	str	r3, [r7, #16]
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetSysClockFreq+0x98>)
 8002666:	613b      	str	r3, [r7, #16]
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	693b      	ldr	r3, [r7, #16]
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	007a1200 	.word	0x007a1200
 8002680:	0800313c 	.word	0x0800313c
 8002684:	0800314c 	.word	0x0800314c
 8002688:	003d0900 	.word	0x003d0900

0800268c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <RCC_Delay+0x34>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <RCC_Delay+0x38>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a8:	bf00      	nop
  }
  while (Delay --);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <RCC_Delay+0x1c>
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	2000001c 	.word	0x2000001c
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff f81c 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fa56 	bl	8002bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e035      	b.n	80027ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <HAL_TIM_Base_Start_IT+0x90>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_TIM_Base_Start_IT+0x4e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027aa:	d004      	beq.n	80027b6 <HAL_TIM_Base_Start_IT+0x4e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <HAL_TIM_Base_Start_IT+0x94>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d111      	bne.n	80027da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b06      	cmp	r3, #6
 80027c6:	d010      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d8:	e007      	b.n	80027ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400

08002800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f998 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f98b 	bl	8002b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f99a 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0204 	mvn.w	r2, #4
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f972 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f965 	bl	8002b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f974 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0208 	mvn.w	r2, #8
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f94c 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f93f 	bl	8002b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f94e 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d020      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f926 	bl	8002b80 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f919 	bl	8002b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f928 	bl	8002b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0201 	mvn.w	r2, #1
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fcd0 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa6f 	bl	8002e6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8f8 	bl	8002ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0220 	mvn.w	r2, #32
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa42 	bl	8002e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_ConfigClockSource+0x1c>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e0b4      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x186>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a34:	d03e      	beq.n	8002ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a3a:	f200 8087 	bhi.w	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a42:	f000 8086 	beq.w	8002b52 <HAL_TIM_ConfigClockSource+0x172>
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4a:	d87f      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b70      	cmp	r3, #112	@ 0x70
 8002a4e:	d01a      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0xa6>
 8002a50:	2b70      	cmp	r3, #112	@ 0x70
 8002a52:	d87b      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b60      	cmp	r3, #96	@ 0x60
 8002a56:	d050      	beq.n	8002afa <HAL_TIM_ConfigClockSource+0x11a>
 8002a58:	2b60      	cmp	r3, #96	@ 0x60
 8002a5a:	d877      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b50      	cmp	r3, #80	@ 0x50
 8002a5e:	d03c      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xfa>
 8002a60:	2b50      	cmp	r3, #80	@ 0x50
 8002a62:	d873      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b40      	cmp	r3, #64	@ 0x40
 8002a66:	d058      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0x13a>
 8002a68:	2b40      	cmp	r3, #64	@ 0x40
 8002a6a:	d86f      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b30      	cmp	r3, #48	@ 0x30
 8002a6e:	d064      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x15a>
 8002a70:	2b30      	cmp	r3, #48	@ 0x30
 8002a72:	d86b      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d060      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x15a>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d867      	bhi.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d05c      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d05a      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x15a>
 8002a84:	e062      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	f000 f96a 	bl	8002d6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	609a      	str	r2, [r3, #8]
      break;
 8002ab2:	e04f      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ac4:	f000 f953 	bl	8002d6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ad6:	609a      	str	r2, [r3, #8]
      break;
 8002ad8:	e03c      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f000 f8ca 	bl	8002c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2150      	movs	r1, #80	@ 0x50
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f921 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 8002af8:	e02c      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b06:	461a      	mov	r2, r3
 8002b08:	f000 f8e8 	bl	8002cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2160      	movs	r1, #96	@ 0x60
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f911 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 8002b18:	e01c      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 f8aa 	bl	8002c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2140      	movs	r1, #64	@ 0x40
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f901 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 8002b38:	e00c      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f000 f8f8 	bl	8002d3a <TIM_ITRx_SetConfig>
      break;
 8002b4a:	e003      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e000      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a2b      	ldr	r2, [pc, #172]	@ (8002c78 <TIM_Base_SetConfig+0xc0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x28>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x28>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a28      	ldr	r2, [pc, #160]	@ (8002c7c <TIM_Base_SetConfig+0xc4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <TIM_Base_SetConfig+0xc0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0x52>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0x52>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <TIM_Base_SetConfig+0xc4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <TIM_Base_SetConfig+0xc0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f023 0201 	bic.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	611a      	str	r2, [r3, #16]
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400

08002c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 030a 	bic.w	r3, r3, #10
 8002cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0210 	bic.w	r2, r3, #16
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	031b      	lsls	r3, r3, #12
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f043 0307 	orr.w	r3, r3, #7
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b087      	sub	sp, #28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	021a      	lsls	r2, r3, #8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	609a      	str	r2, [r3, #8]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e041      	b.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e10:	d004      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10c      	bne.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40000400 	.word	0x40000400

08002e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <malloc>:
 8002e80:	4b02      	ldr	r3, [pc, #8]	@ (8002e8c <malloc+0xc>)
 8002e82:	4601      	mov	r1, r0
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	f000 b82d 	b.w	8002ee4 <_malloc_r>
 8002e8a:	bf00      	nop
 8002e8c:	20000028 	.word	0x20000028

08002e90 <free>:
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <free+0xc>)
 8002e92:	4601      	mov	r1, r0
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f000 b8f5 	b.w	8003084 <_free_r>
 8002e9a:	bf00      	nop
 8002e9c:	20000028 	.word	0x20000028

08002ea0 <sbrk_aligned>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4e0f      	ldr	r6, [pc, #60]	@ (8002ee0 <sbrk_aligned+0x40>)
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	6831      	ldr	r1, [r6, #0]
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	b911      	cbnz	r1, 8002eb2 <sbrk_aligned+0x12>
 8002eac:	f000 f8ae 	bl	800300c <_sbrk_r>
 8002eb0:	6030      	str	r0, [r6, #0]
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f000 f8a9 	bl	800300c <_sbrk_r>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	d103      	bne.n	8002ec6 <sbrk_aligned+0x26>
 8002ebe:	f04f 34ff 	mov.w	r4, #4294967295
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
 8002ec6:	1cc4      	adds	r4, r0, #3
 8002ec8:	f024 0403 	bic.w	r4, r4, #3
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d0f8      	beq.n	8002ec2 <sbrk_aligned+0x22>
 8002ed0:	1a21      	subs	r1, r4, r0
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f000 f89a 	bl	800300c <_sbrk_r>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d1f2      	bne.n	8002ec2 <sbrk_aligned+0x22>
 8002edc:	e7ef      	b.n	8002ebe <sbrk_aligned+0x1e>
 8002ede:	bf00      	nop
 8002ee0:	20000134 	.word	0x20000134

08002ee4 <_malloc_r>:
 8002ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ee8:	1ccd      	adds	r5, r1, #3
 8002eea:	f025 0503 	bic.w	r5, r5, #3
 8002eee:	3508      	adds	r5, #8
 8002ef0:	2d0c      	cmp	r5, #12
 8002ef2:	bf38      	it	cc
 8002ef4:	250c      	movcc	r5, #12
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	4606      	mov	r6, r0
 8002efa:	db01      	blt.n	8002f00 <_malloc_r+0x1c>
 8002efc:	42a9      	cmp	r1, r5
 8002efe:	d904      	bls.n	8002f0a <_malloc_r+0x26>
 8002f00:	230c      	movs	r3, #12
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fe0 <_malloc_r+0xfc>
 8002f0e:	f000 f869 	bl	8002fe4 <__malloc_lock>
 8002f12:	f8d8 3000 	ldr.w	r3, [r8]
 8002f16:	461c      	mov	r4, r3
 8002f18:	bb44      	cbnz	r4, 8002f6c <_malloc_r+0x88>
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f7ff ffbf 	bl	8002ea0 <sbrk_aligned>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	4604      	mov	r4, r0
 8002f26:	d158      	bne.n	8002fda <_malloc_r+0xf6>
 8002f28:	f8d8 4000 	ldr.w	r4, [r8]
 8002f2c:	4627      	mov	r7, r4
 8002f2e:	2f00      	cmp	r7, #0
 8002f30:	d143      	bne.n	8002fba <_malloc_r+0xd6>
 8002f32:	2c00      	cmp	r4, #0
 8002f34:	d04b      	beq.n	8002fce <_malloc_r+0xea>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	4639      	mov	r1, r7
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	eb04 0903 	add.w	r9, r4, r3
 8002f40:	f000 f864 	bl	800300c <_sbrk_r>
 8002f44:	4581      	cmp	r9, r0
 8002f46:	d142      	bne.n	8002fce <_malloc_r+0xea>
 8002f48:	6821      	ldr	r1, [r4, #0]
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	1a6d      	subs	r5, r5, r1
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7ff ffa6 	bl	8002ea0 <sbrk_aligned>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d03a      	beq.n	8002fce <_malloc_r+0xea>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	442b      	add	r3, r5
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	bb62      	cbnz	r2, 8002fc0 <_malloc_r+0xdc>
 8002f66:	f8c8 7000 	str.w	r7, [r8]
 8002f6a:	e00f      	b.n	8002f8c <_malloc_r+0xa8>
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	1b52      	subs	r2, r2, r5
 8002f70:	d420      	bmi.n	8002fb4 <_malloc_r+0xd0>
 8002f72:	2a0b      	cmp	r2, #11
 8002f74:	d917      	bls.n	8002fa6 <_malloc_r+0xc2>
 8002f76:	1961      	adds	r1, r4, r5
 8002f78:	42a3      	cmp	r3, r4
 8002f7a:	6025      	str	r5, [r4, #0]
 8002f7c:	bf18      	it	ne
 8002f7e:	6059      	strne	r1, [r3, #4]
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	bf08      	it	eq
 8002f84:	f8c8 1000 	streq.w	r1, [r8]
 8002f88:	5162      	str	r2, [r4, r5]
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f000 f82f 	bl	8002ff0 <__malloc_unlock>
 8002f92:	f104 000b 	add.w	r0, r4, #11
 8002f96:	1d23      	adds	r3, r4, #4
 8002f98:	f020 0007 	bic.w	r0, r0, #7
 8002f9c:	1ac2      	subs	r2, r0, r3
 8002f9e:	bf1c      	itt	ne
 8002fa0:	1a1b      	subne	r3, r3, r0
 8002fa2:	50a3      	strne	r3, [r4, r2]
 8002fa4:	e7af      	b.n	8002f06 <_malloc_r+0x22>
 8002fa6:	6862      	ldr	r2, [r4, #4]
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	bf0c      	ite	eq
 8002fac:	f8c8 2000 	streq.w	r2, [r8]
 8002fb0:	605a      	strne	r2, [r3, #4]
 8002fb2:	e7eb      	b.n	8002f8c <_malloc_r+0xa8>
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	6864      	ldr	r4, [r4, #4]
 8002fb8:	e7ae      	b.n	8002f18 <_malloc_r+0x34>
 8002fba:	463c      	mov	r4, r7
 8002fbc:	687f      	ldr	r7, [r7, #4]
 8002fbe:	e7b6      	b.n	8002f2e <_malloc_r+0x4a>
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d1fb      	bne.n	8002fc0 <_malloc_r+0xdc>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6053      	str	r3, [r2, #4]
 8002fcc:	e7de      	b.n	8002f8c <_malloc_r+0xa8>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	6033      	str	r3, [r6, #0]
 8002fd4:	f000 f80c 	bl	8002ff0 <__malloc_unlock>
 8002fd8:	e794      	b.n	8002f04 <_malloc_r+0x20>
 8002fda:	6005      	str	r5, [r0, #0]
 8002fdc:	e7d6      	b.n	8002f8c <_malloc_r+0xa8>
 8002fde:	bf00      	nop
 8002fe0:	20000138 	.word	0x20000138

08002fe4 <__malloc_lock>:
 8002fe4:	4801      	ldr	r0, [pc, #4]	@ (8002fec <__malloc_lock+0x8>)
 8002fe6:	f000 b84b 	b.w	8003080 <__retarget_lock_acquire_recursive>
 8002fea:	bf00      	nop
 8002fec:	20000278 	.word	0x20000278

08002ff0 <__malloc_unlock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	@ (8002ff8 <__malloc_unlock+0x8>)
 8002ff2:	f000 b846 	b.w	8003082 <__retarget_lock_release_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	20000278 	.word	0x20000278

08002ffc <memset>:
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4402      	add	r2, r0
 8003000:	4293      	cmp	r3, r2
 8003002:	d100      	bne.n	8003006 <memset+0xa>
 8003004:	4770      	bx	lr
 8003006:	f803 1b01 	strb.w	r1, [r3], #1
 800300a:	e7f9      	b.n	8003000 <memset+0x4>

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	2300      	movs	r3, #0
 8003010:	4d05      	ldr	r5, [pc, #20]	@ (8003028 <_sbrk_r+0x1c>)
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7fe fbe2 	bl	80017e0 <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000274 	.word	0x20000274

0800302c <__errno>:
 800302c:	4b01      	ldr	r3, [pc, #4]	@ (8003034 <__errno+0x8>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000028 	.word	0x20000028

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2600      	movs	r6, #0
 800303c:	4d0c      	ldr	r5, [pc, #48]	@ (8003070 <__libc_init_array+0x38>)
 800303e:	4c0d      	ldr	r4, [pc, #52]	@ (8003074 <__libc_init_array+0x3c>)
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	f000 f864 	bl	8003114 <_init>
 800304c:	2600      	movs	r6, #0
 800304e:	4d0a      	ldr	r5, [pc, #40]	@ (8003078 <__libc_init_array+0x40>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	@ (800307c <__libc_init_array+0x44>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	08003150 	.word	0x08003150
 8003074:	08003150 	.word	0x08003150
 8003078:	08003150 	.word	0x08003150
 800307c:	08003154 	.word	0x08003154

08003080 <__retarget_lock_acquire_recursive>:
 8003080:	4770      	bx	lr

08003082 <__retarget_lock_release_recursive>:
 8003082:	4770      	bx	lr

08003084 <_free_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4605      	mov	r5, r0
 8003088:	2900      	cmp	r1, #0
 800308a:	d040      	beq.n	800310e <_free_r+0x8a>
 800308c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003090:	1f0c      	subs	r4, r1, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	18e4      	addlt	r4, r4, r3
 8003098:	f7ff ffa4 	bl	8002fe4 <__malloc_lock>
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <_free_r+0x8c>)
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	b933      	cbnz	r3, 80030b0 <_free_r+0x2c>
 80030a2:	6063      	str	r3, [r4, #4]
 80030a4:	6014      	str	r4, [r2, #0]
 80030a6:	4628      	mov	r0, r5
 80030a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ac:	f7ff bfa0 	b.w	8002ff0 <__malloc_unlock>
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	d908      	bls.n	80030c6 <_free_r+0x42>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	1821      	adds	r1, r4, r0
 80030b8:	428b      	cmp	r3, r1
 80030ba:	bf01      	itttt	eq
 80030bc:	6819      	ldreq	r1, [r3, #0]
 80030be:	685b      	ldreq	r3, [r3, #4]
 80030c0:	1809      	addeq	r1, r1, r0
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	e7ed      	b.n	80030a2 <_free_r+0x1e>
 80030c6:	461a      	mov	r2, r3
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b10b      	cbz	r3, 80030d0 <_free_r+0x4c>
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d9fa      	bls.n	80030c6 <_free_r+0x42>
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	1850      	adds	r0, r2, r1
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d10b      	bne.n	80030f0 <_free_r+0x6c>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	4401      	add	r1, r0
 80030dc:	1850      	adds	r0, r2, r1
 80030de:	4283      	cmp	r3, r0
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	d1e0      	bne.n	80030a6 <_free_r+0x22>
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4408      	add	r0, r1
 80030ea:	6010      	str	r0, [r2, #0]
 80030ec:	6053      	str	r3, [r2, #4]
 80030ee:	e7da      	b.n	80030a6 <_free_r+0x22>
 80030f0:	d902      	bls.n	80030f8 <_free_r+0x74>
 80030f2:	230c      	movs	r3, #12
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	e7d6      	b.n	80030a6 <_free_r+0x22>
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	1821      	adds	r1, r4, r0
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf01      	itttt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	1809      	addeq	r1, r1, r0
 8003106:	6021      	streq	r1, [r4, #0]
 8003108:	6063      	str	r3, [r4, #4]
 800310a:	6054      	str	r4, [r2, #4]
 800310c:	e7cb      	b.n	80030a6 <_free_r+0x22>
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	20000138 	.word	0x20000138

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
